{"version":3,"file":"analyzers.js","sourceRoot":"","sources":["../../src/analyzers.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;AAYA,oDAAsC;AACtC,6CAAoD;AA+yBpD,YAAY;AAEZ,wBAAwB;AACxB;;;;GAIG;AACH,SAAgB,gBAAgB,CAAC,QAAa;IAC5C,OAAO,OAAO,CAAC,QAAQ,IAAI,QAAQ,CAAC,gBAAgB,CAAC,CAAC;AACxD,CAAC;AAFD,4CAEC;AAED;;GAEG;AACH,MAAa,QAAQ;IACT,KAAK,CAAS;IACd,GAAG,CAAqB;IAElC;;OAEG;IACH,YAAY,EAAsB,EAAE,IAAY;QAC9C,IAAI,CAAC,GAAG,GAAG,EAAE,CAAC;QACd,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC;IACpB,CAAC;IAED;;OAEG;IACH,IAAI,QAAQ;QACV,OAAO,IAAI,CAAC,GAAG,CAAC;IAClB,CAAC;IAED;;;;OAIG;IACH,IAAI,gBAAgB;QAClB,OAAO,IAAI,CAAC;IACd,CAAC;IAED;;;;OAIG;IACH,IAAI,IAAI;QACN,OAAO,IAAI,CAAC,KAAK,CAAC;IACpB,CAAC;IAED;;;;;;;;;;OAUG;IACH,KAAK,CAAC,MAAM;QACV,IAAI,CAAC;YACH,MAAM,IAAI,CAAC,GAAG,EAAE,CAAC;YACjB,OAAO,IAAI,CAAC;QACd,CAAC;QAAC,OAAO,GAAQ,EAAE,CAAC;YAClB,IAAI,MAAM,CAAC,aAAa,CAAC,GAAG,CAAC,IAAI,GAAG,CAAC,QAAQ,KAAK,6BAAkB,EAAE,CAAC;gBACrE,OAAO,KAAK,CAAC;YACf,CAAC;YACD,MAAM,GAAG,CAAC;QACZ,CAAC;IACH,CAAC;IAED;;;;;;;;;;OAUG;IACH,GAAG;QACD,OAAO,IAAI,CAAC,GAAG,CAAC,OAAO,CAAC;YACtB,QAAQ,EAAE,kBAAkB,kBAAkB,CAAC,IAAI,CAAC,KAAK,CAAC,EAAE;SAC7D,CAAC,CAAC;IACL,CAAC;IAED;;;;;;;;;;;;;;OAcG;IACH,MAAM,CACJ,OAAgB;QAsChB,OAAO,IAAI,CAAC,GAAG,CAAC,OAAO,CAAC;YACtB,MAAM,EAAE,MAAM;YACd,QAAQ,EAAE,gBAAgB;YAC1B,IAAI,EAAE,EAAE,IAAI,EAAE,IAAI,CAAC,KAAK,EAAE,GAAG,OAAO,EAAE;SACvC,CAAC,CAAC;IACL,CAAC;IAED;;;;;;;;;;;;;OAaG;IACH,IAAI,CACF,QAAiB,KAAK;QAEtB,OAAO,IAAI,CAAC,GAAG,CAAC,OAAO,CAAC;YACtB,MAAM,EAAE,QAAQ;YAChB,QAAQ,EAAE,kBAAkB,kBAAkB,CAAC,IAAI,CAAC,KAAK,CAAC,EAAE;YAC5D,MAAM,EAAE,EAAE,KAAK,EAAE;SAClB,CAAC,CAAC;IACL,CAAC;CACF;AAjKD,4BAiKC;AACD,YAAY","sourcesContent":["/**\r\n * ```ts\r\n * import type { Analyzer } from \"arangojs/analyzers\";\r\n * ```\r\n *\r\n * The \"analyzers\" module provides Analyzer related types and interfaces\r\n * for TypeScript.\r\n *\r\n * @packageDocumentation\r\n */\r\nimport * as connection from \"./connection.js\";\r\nimport * as databases from \"./databases.js\";\r\nimport * as errors from \"./errors.js\";\r\nimport { ANALYZER_NOT_FOUND } from \"./lib/codes.js\";\r\n\r\n//#region Shared types\r\n/**\r\n * Name of a feature enabled for an Analyzer.\r\n */\r\nexport type AnalyzerFeature = \"frequency\" | \"norm\" | \"position\" | \"offset\";\r\n\r\n/**\r\n * Text case conversion type.\r\n */\r\nexport type CaseConversion = \"lower\" | \"upper\" | \"none\";\r\n\r\n/**\r\n * Token type for a Segmentation Analyzer.\r\n */\r\nexport type SegmentationTokenType = \"all\" | \"alpha\" | \"graphic\";\r\n\r\n/**\r\n * Token data type for an AQL Analyzer.\r\n */\r\nexport type AqlReturnTokenType = \"string\" | \"number\" | \"bool\";\r\n\r\n/**\r\n * GeoJSON type.\r\n */\r\nexport type GeoType = \"shape\" | \"centroid\" | \"point\";\r\n\r\n/**\r\n * Storage format of a Geo S2 Analyzer.\r\n */\r\nexport type GeoS2Format = \"latLngDouble\" | \"latLngInt\" | \"s2Point\";\r\n\r\n/**\r\n * Type of an Analyzer.\r\n */\r\nexport type AnalyzerType = AnalyzerDescription[\"type\"];\r\n//#endregion\r\n\r\n//#region CreateAnalyzerOptions\r\n/**\r\n * Analyzer type and its type-specific properties.\r\n */\r\nexport type CreateAnalyzerOptions =\r\n  | CreateIdentityAnalyzerOptions\r\n  | CreateDelimiterAnalyzerOptions\r\n  | CreateMultiDelimiterAnalyzerOptions\r\n  | CreateStemAnalyzerOptions\r\n  | CreateNormAnalyzerOptions\r\n  | CreateNgramAnalyzerOptions\r\n  | CreateTextAnalyzerOptions\r\n  | CreateSegmentationAnalyzerOptions\r\n  | CreateAqlAnalyzerOptions\r\n  | CreatePipelineAnalyzerOptions\r\n  | CreateStopwordsAnalyzerOptions\r\n  | CreateCollationAnalyzerOptions\r\n  | CreateMinHashAnalyzerOptions\r\n  | CreateClassificationAnalyzerOptions\r\n  | CreateNearestNeighborsAnalyzerOptions\r\n  | CreateWildcardAnalyzerOptions\r\n  | CreateGeoJsonAnalyzerOptions\r\n  | CreateGeoPointAnalyzerOptions\r\n  | CreateGeoS2AnalyzerOptions;\r\n\r\n/**\r\n * Shared attributes of all Analyzer creation options.\r\n */\r\nexport type CreateAnalyzerOptionsType<\r\n  Type extends AnalyzerType,\r\n  Properties = void,\r\n> = Properties extends void\r\n  ? {\r\n      /**\r\n       * Type of the Analyzer.\r\n       */\r\n      type: Type;\r\n      /**\r\n       * Features to enable for this Analyzer.\r\n       */\r\n      features?: AnalyzerFeature[];\r\n      /**\r\n       * This Analyzer does not take additional properties.\r\n       */\r\n      properties?: Record<string, never>;\r\n    }\r\n  : {\r\n      /**\r\n       * Type of the Analyzer.\r\n       */\r\n      type: Type;\r\n      /**\r\n       * Features to enable for this Analyzer.\r\n       */\r\n      features?: AnalyzerFeature[];\r\n      /**\r\n       * Additional properties for the Analyzer.\r\n       */\r\n      properties: Properties;\r\n    };\r\n\r\n/**\r\n * Options for creating an Identity Analyzer.\r\n */\r\nexport type CreateIdentityAnalyzerOptions =\r\n  CreateAnalyzerOptionsType<\"identity\">;\r\n\r\n/**\r\n * Options for creating a Delimiter Analyzer.\r\n */\r\nexport type CreateDelimiterAnalyzerOptions = CreateAnalyzerOptionsType<\r\n  \"delimiter\",\r\n  | string\r\n  | {\r\n      /**\r\n       * This value will be used as delimiter to split text into tokens as\r\n       * specified in RFC 4180, without starting new records on newlines.\r\n       */\r\n      delimiter: string;\r\n    }\r\n>;\r\n\r\n/**\r\n * Options for creating a Multi-Delimiter Analyzer.\r\n */\r\nexport type CreateMultiDelimiterAnalyzerOptions = CreateAnalyzerOptionsType<\r\n  \"multi_delimiter\",\r\n  {\r\n    /**\r\n     * This value will be used as delimiter to split text into tokens as\r\n     * specified in RFC 4180, without starting new records on newlines.\r\n     */\r\n    delimiters: string[];\r\n  }\r\n>;\r\n\r\n/**\r\n * Options for creating a Stem Analyzer.\r\n */\r\nexport type CreateStemAnalyzerOptions = CreateAnalyzerOptionsType<\r\n  \"stem\",\r\n  {\r\n    /**\r\n     * Text locale.\r\n     *\r\n     * Format: `language[_COUNTRY][.encoding][@variant]`\r\n     */\r\n    locale: string;\r\n  }\r\n>;\r\n\r\n/**\r\n * Options for creating a Norm Analyzer.\r\n */\r\nexport type CreateNormAnalyzerOptions = CreateAnalyzerOptionsType<\r\n  \"norm\",\r\n  {\r\n    /**\r\n     * Text locale.\r\n     *\r\n     * Format: `language[_COUNTRY][.encoding][@variant]`\r\n     */\r\n    locale: string;\r\n    /**\r\n     * Case conversion.\r\n     *\r\n     * Default: `\"lower\"`\r\n     */\r\n    case?: CaseConversion;\r\n    /**\r\n     * Preserve accents in returned words.\r\n     *\r\n     * Default: `false`\r\n     */\r\n    accent?: boolean;\r\n  }\r\n>;\r\n\r\n/**\r\n * Options for creating an Ngram Analyzer.\r\n */\r\nexport type CreateNgramAnalyzerOptions = CreateAnalyzerOptionsType<\r\n  \"ngram\",\r\n  {\r\n    /**\r\n     * Maximum n-gram length.\r\n     */\r\n    max: number;\r\n    /**\r\n     * Minimum n-gram length.\r\n     */\r\n    min: number;\r\n    /**\r\n     * Output the original value as well.\r\n     */\r\n    preserveOriginal: boolean;\r\n  }\r\n>;\r\n\r\n/**\r\n * Options for creating a Text Analyzer.\r\n */\r\nexport type CreateTextAnalyzerOptions = CreateAnalyzerOptionsType<\r\n  \"text\",\r\n  {\r\n    /**\r\n     * Text locale.\r\n     *\r\n     * Format: `language[_COUNTRY][.encoding][@variant]`\r\n     */\r\n    locale: string;\r\n    /**\r\n     * Case conversion.\r\n     *\r\n     * Default: `\"lower\"`\r\n     */\r\n    case?: CaseConversion;\r\n    /**\r\n     * Words to omit from result.\r\n     *\r\n     * Defaults to the words loaded from the file at `stopwordsPath`.\r\n     */\r\n    stopwords?: string[];\r\n    /**\r\n     * Path with a `language` sub-directory containing files with words to omit.\r\n     *\r\n     * Defaults to the path specified in the server-side environment variable\r\n     * `IRESEARCH_TEXT_STOPWORD_PATH` or the current working directory of the\r\n     * ArangoDB process.\r\n     */\r\n    stopwordsPath?: string;\r\n    /**\r\n     * Preserve accents in returned words.\r\n     *\r\n     * Default: `false`\r\n     */\r\n    accent?: boolean;\r\n    /**\r\n     * Apply stemming on returned words.\r\n     *\r\n     * Default: `true`\r\n     */\r\n    stemming?: boolean;\r\n    /**\r\n     * If present, then edge n-grams are generated for each token (word).\r\n     */\r\n    edgeNgram?: {\r\n      min?: number;\r\n      max?: number;\r\n      preserveOriginal?: boolean;\r\n    };\r\n  }\r\n>;\r\n\r\n/**\r\n * Options for creating a Segmentation Analyzer\r\n */\r\nexport type CreateSegmentationAnalyzerOptions = CreateAnalyzerOptionsType<\r\n  \"segmentation\",\r\n  {\r\n    /**\r\n     * Which tokens should be returned.\r\n     *\r\n     * Default: `\"alpha\"`\r\n     */\r\n    break?: SegmentationTokenType;\r\n    /**\r\n     * What case all returned tokens should be converted to if applicable.\r\n     *\r\n     * Default: `\"none\"`\r\n     */\r\n    case?: CaseConversion;\r\n  }\r\n>;\r\n\r\n/**\r\n * Options for creating an AQL Analyzer\r\n */\r\nexport type CreateAqlAnalyzerOptions = CreateAnalyzerOptionsType<\r\n  \"aql\",\r\n  {\r\n    /**\r\n     * AQL query to be executed.\r\n     */\r\n    queryString: string;\r\n    /**\r\n     * If set to `true`, the position is set to `0` for all members of the query result array.\r\n     *\r\n     * Default: `false`\r\n     */\r\n    collapsePositions?: boolean;\r\n    /**\r\n     * If set to `false`, `null` values will be discarded from the View index.\r\n     *\r\n     * Default: `true`\r\n     */\r\n    keepNull?: boolean;\r\n    /**\r\n     * Number between `1` and `1000` that determines the batch size for reading\r\n     * data from the query.\r\n     *\r\n     * Default: `1`\r\n     */\r\n    batchSize?: number;\r\n    /**\r\n     * Memory limit for query execution in bytes.\r\n     *\r\n     * Default: `1048576` (1 MiB)\r\n     */\r\n    memoryLimit?: number;\r\n    /**\r\n     * Data type of the returned tokens.\r\n     *\r\n     * Default: `\"string\"`\r\n     */\r\n    returnType?: AqlReturnTokenType;\r\n  }\r\n>;\r\n\r\n/**\r\n * Options for creating a Pipeline Analyzer\r\n */\r\nexport type CreatePipelineAnalyzerOptions = CreateAnalyzerOptionsType<\r\n  \"pipeline\",\r\n  {\r\n    /**\r\n     * Definitions for Analyzers to chain in this Pipeline Analyzer.\r\n     */\r\n    pipeline: Omit<CreateAnalyzerOptions, \"features\">[];\r\n  }\r\n>;\r\n\r\n/**\r\n * Options for creating a Stopwords Analyzer\r\n */\r\nexport type CreateStopwordsAnalyzerOptions = CreateAnalyzerOptionsType<\r\n  \"stopwords\",\r\n  {\r\n    /**\r\n     * Array of strings that describe the tokens to be discarded.\r\n     */\r\n    stopwords: string[];\r\n    /**\r\n     * Whether stopword values should be interpreted as hex-encoded strings.\r\n     *\r\n     * Default: `false`\r\n     */\r\n    hex?: boolean;\r\n  }\r\n>;\r\n\r\n/**\r\n * Options for creating a Collation Analyzer\r\n */\r\nexport type CreateCollationAnalyzerOptions = CreateAnalyzerOptionsType<\r\n  \"collation\",\r\n  {\r\n    /**\r\n     * Text locale.\r\n     *\r\n     * Format: `language[_COUNTRY][.encoding][@variant]`\r\n     */\r\n    locale: string;\r\n  }\r\n>;\r\n\r\n/**\r\n * (Enterprise Edition only.) Options for creating a MinHash Analyzer\r\n */\r\nexport type CreateMinHashAnalyzerOptions = CreateAnalyzerOptionsType<\r\n  \"minhash\",\r\n  {\r\n    /**\r\n     * An Analyzer definition-like object with `type` and `properties` attributes.\r\n     */\r\n    analyzer: Omit<CreateAnalyzerOptions, \"features\">;\r\n    /**\r\n     * Size of the MinHash signature.\r\n     */\r\n    numHashes: number;\r\n  }\r\n>;\r\n\r\n/**\r\n * (Enterprise Edition only.) Options for creating a Classification Analyzer\r\n */\r\nexport type CreateClassificationAnalyzerOptions = CreateAnalyzerOptionsType<\r\n  \"classification\",\r\n  {\r\n    /**\r\n     * On-disk path to the trained fastText supervised model.\r\n     */\r\n    model_location: string;\r\n    /**\r\n     * Number of class labels that will be produced per input.\r\n     *\r\n     * Default: `1`\r\n     */\r\n    top_k?: number;\r\n    /**\r\n     * Probability threshold for which a label will be assigned to an input.\r\n     *\r\n     * Default: `0.99`\r\n     */\r\n    threshold?: number;\r\n  }\r\n>;\r\n\r\n/**\r\n * (Enterprise Edition only.) Options for creating a NearestNeighbors Analyzer.\r\n */\r\nexport type CreateNearestNeighborsAnalyzerOptions = CreateAnalyzerOptionsType<\r\n  \"nearest_neighbors\",\r\n  {\r\n    /**\r\n     * On-disk path to the trained fastText supervised model.\r\n     */\r\n    model_location: string;\r\n    /**\r\n     * Number of class labels that will be produced per input.\r\n     *\r\n     * Default: `1`\r\n     */\r\n    top_k?: number;\r\n  }\r\n>;\r\n\r\n/**\r\n * Options for creating a Wildcard Analyzer.\r\n */\r\nexport type CreateWildcardAnalyzerOptions = CreateAnalyzerOptionsType<\r\n  \"wildcard\",\r\n  {\r\n    /**\r\n     * N-gram length. Must be a positive integer greater than or equal to 2.\r\n     */\r\n    ngramSize: string;\r\n    /**\r\n     * An Analyzer definition-like object with `type` and `properties` attributes.\r\n     */\r\n    analyzer?: Omit<CreateAnalyzerOptions, \"features\">;\r\n  }\r\n>;\r\n\r\n/**\r\n * Options for creating a GeoJSON Analyzer\r\n */\r\nexport type CreateGeoJsonAnalyzerOptions = CreateAnalyzerOptionsType<\r\n  \"geojson\",\r\n  {\r\n    /**\r\n     * If set to `\"centroid\"`, only the centroid of the input geometry will be\r\n     * computed and indexed.\r\n     *\r\n     * If set to `\"point\"` only GeoJSON objects of type Point will be indexed and\r\n     * all other geometry types will be ignored.\r\n     *\r\n     * Default: `\"shape\"`\r\n     */\r\n    type?: GeoType;\r\n    /**\r\n     * Options for fine-tuning geo queries.\r\n     *\r\n     * Default: `{ maxCells: 20, minLevel: 4, maxLevel: 23 }`\r\n     */\r\n    options?: {\r\n      maxCells?: number;\r\n      minLevel?: number;\r\n      maxLevel?: number;\r\n    };\r\n  }\r\n>;\r\n\r\n/**\r\n * Options for creating a GeoPoint Analyzer\r\n */\r\nexport type CreateGeoPointAnalyzerOptions = CreateAnalyzerOptionsType<\r\n  \"geopoint\",\r\n  {\r\n    /**\r\n     * Attribute paths of the latitude value relative to the field for which the\r\n     * Analyzer is defined in the View.\r\n     */\r\n    latitude?: string[];\r\n    /**\r\n     * Attribute paths of the longitude value relative to the field for which the\r\n     * Analyzer is defined in the View.\r\n     */\r\n    longitude?: string[];\r\n    /**\r\n     * Options for fine-tuning geo queries.\r\n     *\r\n     * Default: `{ maxCells: 20, minLevel: 4, maxLevel: 23 }`\r\n     */\r\n    options?: {\r\n      minCells?: number;\r\n      minLevel?: number;\r\n      maxLevel?: number;\r\n    };\r\n  }\r\n>;\r\n\r\n/**\r\n * (Enterprise Edition only.) Options for creating a Geo S2 Analyzer\r\n */\r\nexport type CreateGeoS2AnalyzerOptions = CreateAnalyzerOptionsType<\r\n  \"geo_s2\",\r\n  {\r\n    /**\r\n     * If set to `\"centroid\"`, only the centroid of the input geometry will be\r\n     * computed and indexed.\r\n     *\r\n     * If set to `\"point\"` only GeoJSON objects of type Point will be indexed and\r\n     * all other geometry types will be ignored.\r\n     *\r\n     * Default: `\"shape\"`\r\n     */\r\n    type?: GeoType;\r\n    /**\r\n     * Options for fine-tuning geo queries.\r\n     *\r\n     * Default: `{ maxCells: 20, minLevel: 4, maxLevel: 23 }`\r\n     */\r\n    options?: {\r\n      maxCells?: number;\r\n      minLevel?: number;\r\n      maxLevel?: number;\r\n    };\r\n    /**\r\n     * If set to `\"latLngDouble\"`, each latitude and longitude value is stored\r\n     * as an 8-byte floating-point value (16 bytes per coordinate pair).\r\n     *\r\n     * If set to `\"latLngInt\"`, each latitude and longitude value is stored as\r\n     * a 4-byte integer value (8 bytes per coordinate pair).\r\n     *\r\n     * If set to `\"s2Point\"`, each longitude-latitude pair is stored in the\r\n     * native format of Google S2 (24 bytes per coordinate pair).\r\n     *\r\n     * Default: `\"latLngDouble\"`\r\n     */\r\n    format?: GeoS2Format;\r\n  }\r\n>;\r\n//#endregion\r\n\r\n//#region AnalyzerDescription\r\n/**\r\n * An object describing an Analyzer.\r\n */\r\nexport type AnalyzerDescription =\r\n  | IdentityAnalyzerDescription\r\n  | DelimiterAnalyzerDescription\r\n  | MultiDelimiterAnalyzerDescription\r\n  | StemAnalyzerDescription\r\n  | NormAnalyzerDescription\r\n  | NgramAnalyzerDescription\r\n  | TextAnalyzerDescription\r\n  | SegmentationAnalyzerDescription\r\n  | AqlAnalyzerDescription\r\n  | PipelineAnalyzerDescription\r\n  | StopwordsAnalyzerDescription\r\n  | CollationAnalyzerDescription\r\n  | MinHashAnalyzerDescription\r\n  | ClassificationAnalyzerDescription\r\n  | NearestNeighborsAnalyzerDescription\r\n  | WildcardAnalyzerDescription\r\n  | GeoJsonAnalyzerDescription\r\n  | GeoPointAnalyzerDescription\r\n  | GeoS2AnalyzerDescription;\r\n\r\n/**\r\n * Shared attributes of all Analyzer descriptions.\r\n */\r\nexport type AnalyzerDescriptionType<\r\n  Type extends string,\r\n  Properties = Record<string, never>,\r\n> = {\r\n  /**\r\n   * A unique name for this Analyzer.\r\n   */\r\n  name: string;\r\n  /**\r\n   * Type of the Analyzer.\r\n   */\r\n  type: Type;\r\n  /**\r\n   * Features to enable for this Analyzer.\r\n   */\r\n  features?: AnalyzerFeature[];\r\n  /**\r\n   * Additional properties for the Analyzer.\r\n   */\r\n  properties: Properties;\r\n};\r\n\r\n/**\r\n * An object describing an Identity Analyzer.\r\n */\r\nexport type IdentityAnalyzerDescription = AnalyzerDescriptionType<\"identity\">;\r\n\r\n/**\r\n * An object describing a Delimiter Analyzer.\r\n */\r\nexport type DelimiterAnalyzerDescription = AnalyzerDescriptionType<\r\n  \"delimiter\",\r\n  { delimiter: string }\r\n>;\r\n\r\n/**\r\n * An object describing a Multi Delimiter Analyzer.\r\n */\r\nexport type MultiDelimiterAnalyzerDescription = AnalyzerDescriptionType<\r\n  \"multi_delimiter\",\r\n  { delimiters: string[] }\r\n>;\r\n\r\n/**\r\n * An object describing a Stem Analyzer.\r\n */\r\nexport type StemAnalyzerDescription = AnalyzerDescriptionType<\r\n  \"stem\",\r\n  { locale: string }\r\n>;\r\n\r\n/**\r\n * An object describing a Norm Analyzer.\r\n */\r\nexport type NormAnalyzerDescription = AnalyzerDescriptionType<\r\n  \"norm\",\r\n  {\r\n    locale: string;\r\n    case: CaseConversion;\r\n    accent: boolean;\r\n  }\r\n>;\r\n\r\n/**\r\n * An object describing an Ngram Analyzer.\r\n */\r\nexport type NgramAnalyzerDescription = AnalyzerDescriptionType<\r\n  \"ngram\",\r\n  {\r\n    min: number;\r\n    max: number;\r\n    preserveOriginal: boolean;\r\n  }\r\n>;\r\n\r\n/**\r\n * An object describing a Text Analyzer.\r\n */\r\nexport type TextAnalyzerDescription = AnalyzerDescriptionType<\r\n  \"text\",\r\n  {\r\n    locale: string;\r\n    case: CaseConversion;\r\n    stopwords: string[];\r\n    stopwordsPath: string;\r\n    accent: boolean;\r\n    stemming: boolean;\r\n    edgeNgram: {\r\n      min: number;\r\n      max: number;\r\n      preserveOriginal: boolean;\r\n    };\r\n  }\r\n>;\r\n\r\n/**\r\n * An object describing a Segmentation Analyzer\r\n */\r\nexport type SegmentationAnalyzerDescription = AnalyzerDescriptionType<\r\n  \"segmentation\",\r\n  {\r\n    break: SegmentationTokenType;\r\n    case: CaseConversion;\r\n  }\r\n>;\r\n\r\n/**\r\n * An object describing an AQL Analyzer\r\n */\r\nexport type AqlAnalyzerDescription = AnalyzerDescriptionType<\r\n  \"aql\",\r\n  {\r\n    queryString: string;\r\n    collapsePositions: boolean;\r\n    keepNull: boolean;\r\n    batchSize: number;\r\n    memoryLimit: number;\r\n    returnType: AqlReturnTokenType;\r\n  }\r\n>;\r\n\r\n/**\r\n * An object describing a Pipeline Analyzer\r\n */\r\nexport type PipelineAnalyzerDescription = AnalyzerDescriptionType<\r\n  \"pipeline\",\r\n  {\r\n    pipeline: Omit<AnalyzerDescription, \"name\" | \"features\">[];\r\n  }\r\n>;\r\n\r\n/**\r\n * An object describing a Stopwords Analyzer\r\n */\r\nexport type StopwordsAnalyzerDescription = AnalyzerDescriptionType<\r\n  \"stopwords\",\r\n  {\r\n    stopwords: string[];\r\n    hex: boolean;\r\n  }\r\n>;\r\n\r\n/**\r\n * An object describing a Collation Analyzer\r\n */\r\nexport type CollationAnalyzerDescription = AnalyzerDescriptionType<\r\n  \"collation\",\r\n  {\r\n    locale: string;\r\n  }\r\n>;\r\n\r\n/**\r\n * (Enterprise Edition only.) An object describing a MinHash Analyzer\r\n */\r\nexport type MinHashAnalyzerDescription = AnalyzerDescriptionType<\r\n  \"minhash\",\r\n  {\r\n    analyzer: Omit<AnalyzerDescription, \"name\" | \"features\">;\r\n    numHashes: number;\r\n  }\r\n>;\r\n\r\n/**\r\n * (Enterprise Edition only.) An object describing a Classification Analyzer\r\n */\r\nexport type ClassificationAnalyzerDescription = AnalyzerDescriptionType<\r\n  \"classification\",\r\n  {\r\n    model_location: string;\r\n    top_k: number;\r\n    threshold: number;\r\n  }\r\n>;\r\n\r\n/**\r\n * (Enterprise Edition only.) An object describing a NearestNeighbors Analyzer\r\n */\r\nexport type NearestNeighborsAnalyzerDescription = AnalyzerDescriptionType<\r\n  \"nearest_neighbors\",\r\n  {\r\n    model_location: string;\r\n    top_k: number;\r\n  }\r\n>;\r\n\r\n/**\r\n * An object describing a Wildcard Analyzer\r\n */\r\nexport type WildcardAnalyzerDescription = AnalyzerDescriptionType<\r\n  \"wildcard\",\r\n  {\r\n    ngramSize: number;\r\n    analyzer?: Omit<AnalyzerDescription, \"name\" | \"features\">;\r\n  }\r\n>;\r\n\r\n/**\r\n * An object describing a GeoJSON Analyzer\r\n */\r\nexport type GeoJsonAnalyzerDescription = AnalyzerDescriptionType<\r\n  \"geojson\",\r\n  {\r\n    type: GeoType;\r\n    description: {\r\n      maxCells: number;\r\n      minLevel: number;\r\n      maxLevel: number;\r\n    };\r\n  }\r\n>;\r\n\r\n/**\r\n * An object describing a GeoPoint Analyzer\r\n */\r\nexport type GeoPointAnalyzerDescription = AnalyzerDescriptionType<\r\n  \"geopoint\",\r\n  {\r\n    latitude: string[];\r\n    longitude: string[];\r\n    description: {\r\n      minCells: number;\r\n      minLevel: number;\r\n      maxLevel: number;\r\n    };\r\n  }\r\n>;\r\n\r\n/**\r\n * (Enterprise Edition only.) An object describing a GeoS2 Analyzer\r\n */\r\nexport type GeoS2AnalyzerDescription = AnalyzerDescriptionType<\r\n  \"geo_s2\",\r\n  {\r\n    type: GeoType;\r\n    description: {\r\n      maxCells: number;\r\n      minLevel: number;\r\n      maxLevel: number;\r\n    };\r\n    format: GeoS2Format;\r\n  }\r\n>;\r\n//#endregion\r\n\r\n//#region Analyzer class\r\n/**\r\n * Indicates whether the given value represents an {@link Analyzer}.\r\n *\r\n * @param analyzer - A value that might be an Analyzer.\r\n */\r\nexport function isArangoAnalyzer(analyzer: any): analyzer is Analyzer {\r\n  return Boolean(analyzer && analyzer.isArangoAnalyzer);\r\n}\r\n\r\n/**\r\n * Represents an Analyzer in a {@link databases.Database}.\r\n */\r\nexport class Analyzer {\r\n  protected _name: string;\r\n  protected _db: databases.Database;\r\n\r\n  /**\r\n   * @internal\r\n   */\r\n  constructor(db: databases.Database, name: string) {\r\n    this._db = db;\r\n    this._name = name;\r\n  }\r\n\r\n  /**\r\n   * Database this analyzer belongs to.\r\n   */\r\n  get database() {\r\n    return this._db;\r\n  }\r\n\r\n  /**\r\n   * @internal\r\n   *\r\n   * Indicates that this object represents an ArangoDB Analyzer.\r\n   */\r\n  get isArangoAnalyzer(): true {\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * Name of this Analyzer.\r\n   *\r\n   * See also {@link databases.Database}.\r\n   */\r\n  get name() {\r\n    return this._name;\r\n  }\r\n\r\n  /**\r\n   * Checks whether the Analyzer exists.\r\n   *\r\n   * @example\r\n   * ```js\r\n   * const db = new Database();\r\n   * const analyzer = db.analyzer(\"some-analyzer\");\r\n   * const result = await analyzer.exists();\r\n   * // result indicates whether the Analyzer exists\r\n   * ```\r\n   */\r\n  async exists(): Promise<boolean> {\r\n    try {\r\n      await this.get();\r\n      return true;\r\n    } catch (err: any) {\r\n      if (errors.isArangoError(err) && err.errorNum === ANALYZER_NOT_FOUND) {\r\n        return false;\r\n      }\r\n      throw err;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Retrieves the Analyzer definition for the Analyzer.\r\n   *\r\n   * @example\r\n   * ```js\r\n   * const db = new Database();\r\n   * const analyzer = db.analyzer(\"some-analyzer\");\r\n   * const definition = await analyzer.get();\r\n   * // definition contains the Analyzer definition\r\n   * ```\r\n   */\r\n  get(): Promise<connection.ArangoApiResponse<AnalyzerDescription>> {\r\n    return this._db.request({\r\n      pathname: `/_api/analyzer/${encodeURIComponent(this._name)}`,\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Creates a new Analyzer with the given `options` and the instance's name.\r\n   *\r\n   * See also {@link databases.Database#createAnalyzer}.\r\n   *\r\n   * @param options - Options for creating the Analyzer.\r\n   *\r\n   * @example\r\n   * ```js\r\n   * const db = new Database();\r\n   * const analyzer = db.analyzer(\"potatoes\");\r\n   * await analyzer.create({ type: \"identity\" });\r\n   * // the identity Analyzer \"potatoes\" now exists\r\n   * ```\r\n   */\r\n  create<Options extends CreateAnalyzerOptions>(\r\n    options: Options\r\n  ): Promise<\r\n    Options extends CreateIdentityAnalyzerOptions\r\n      ? IdentityAnalyzerDescription\r\n      : Options extends CreateDelimiterAnalyzerOptions\r\n        ? DelimiterAnalyzerDescription\r\n        : Options extends CreateStemAnalyzerOptions\r\n          ? StemAnalyzerDescription\r\n          : Options extends CreateNormAnalyzerOptions\r\n            ? NormAnalyzerDescription\r\n            : Options extends CreateNgramAnalyzerOptions\r\n              ? NgramAnalyzerDescription\r\n              : Options extends CreateTextAnalyzerOptions\r\n                ? TextAnalyzerDescription\r\n                : Options extends CreateSegmentationAnalyzerOptions\r\n                  ? SegmentationAnalyzerDescription\r\n                  : Options extends CreateAqlAnalyzerOptions\r\n                    ? AqlAnalyzerDescription\r\n                    : Options extends CreatePipelineAnalyzerOptions\r\n                      ? PipelineAnalyzerDescription\r\n                      : Options extends CreateStopwordsAnalyzerOptions\r\n                        ? StopwordsAnalyzerDescription\r\n                        : Options extends CreateCollationAnalyzerOptions\r\n                          ? CollationAnalyzerDescription\r\n                          : Options extends CreateMinHashAnalyzerOptions\r\n                            ? MinHashAnalyzerDescription\r\n                            : Options extends CreateClassificationAnalyzerOptions\r\n                              ? ClassificationAnalyzerDescription\r\n                              : Options extends CreateNearestNeighborsAnalyzerOptions\r\n                                ? NearestNeighborsAnalyzerDescription\r\n                                : Options extends CreateGeoJsonAnalyzerOptions\r\n                                  ? GeoJsonAnalyzerDescription\r\n                                  : Options extends CreateGeoPointAnalyzerOptions\r\n                                    ? GeoPointAnalyzerDescription\r\n                                    : Options extends CreateGeoS2AnalyzerOptions\r\n                                      ? GeoS2AnalyzerDescription\r\n                                      : AnalyzerDescription\r\n  > {\r\n    return this._db.request({\r\n      method: \"POST\",\r\n      pathname: \"/_api/analyzer\",\r\n      body: { name: this._name, ...options },\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Deletes the Analyzer from the database.\r\n   *\r\n   * @param force - Whether the Analyzer should still be deleted even if it\r\n   * is currently in use.\r\n   *\r\n   * @example\r\n   * ```js\r\n   * const db = new Database();\r\n   * const analyzer = db.analyzer(\"some-analyzer\");\r\n   * await analyzer.drop();\r\n   * // the Analyzer \"some-analyzer\" no longer exists\r\n   * ```\r\n   */\r\n  drop(\r\n    force: boolean = false\r\n  ): Promise<connection.ArangoApiResponse<{ name: string }>> {\r\n    return this._db.request({\r\n      method: \"DELETE\",\r\n      pathname: `/_api/analyzer/${encodeURIComponent(this._name)}`,\r\n      search: { force },\r\n    });\r\n  }\r\n}\r\n//#endregion\r\n"]}