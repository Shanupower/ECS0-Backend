{"version":3,"file":"aql.js","sourceRoot":"","sources":["../../src/aql.ts"],"names":[],"mappings":"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","sourcesContent":["/**\r\n * ```js\r\n * import { aql } from \"arangojs/aql\";\r\n * ```\r\n *\r\n * The \"aql\" module provides the {@link aql} template string handler and\r\n * helper functions, as well as associated types and interfaces for TypeScript.\r\n *\r\n * The aql function and namespace is also re-exported by the \"index\" module.\r\n *\r\n * @packageDocumentation\r\n */\r\nimport * as analyzers from \"./analyzers.js\";\r\nimport * as collections from \"./collections.js\";\r\nimport * as graphs from \"./graphs.js\";\r\nimport * as views from \"./views.js\";\r\n\r\ndeclare const type: unique symbol;\r\n\r\n/**\r\n * Generic AQL query object consisting of an AQL query string and its bind\r\n * parameters.\r\n */\r\nexport interface AqlQuery<T = any> {\r\n  [type]?: T | any;\r\n  /**\r\n   * An AQL query string.\r\n   */\r\n  query: string;\r\n  /**\r\n   * An object mapping AQL bind parameter names to their respective values.\r\n   *\r\n   * Names of parameters representing collections are prefixed with an\r\n   * at-symbol.\r\n   */\r\n  bindVars: Record<string, any>;\r\n}\r\n\r\n/**\r\n * Derived type representing AQL query objects generated by the AQL helper\r\n * functions and the AQL template string handler. These objects can be fed\r\n * back into these helper functions to be inlined or merged in complex queries.\r\n */\r\nexport interface GeneratedAqlQuery<T = any> extends AqlQuery<T> {\r\n  /**\r\n   * @internal\r\n   */\r\n  _source: () => { strings: string[]; args: AqlValue[] };\r\n}\r\n\r\n/**\r\n * An object representing a trusted AQL literal that will be inlined directly\r\n * when used in an AQL template or passed to AQL helper functions.\r\n *\r\n * Arbitrary values can be converted to trusted AQL literals by passing them\r\n * to the {@link literal} helper function.\r\n */\r\nexport interface AqlLiteral {\r\n  /**\r\n   * @internal\r\n   *\r\n   * Returns a string representation of this AQL literal that can be inlined\r\n   * in an AQL template.\r\n   */\r\n  toAQL: () => string;\r\n}\r\n\r\n/**\r\n * A value that can be used in an AQL template string or passed to an AQL\r\n * helper function.\r\n */\r\nexport type AqlValue =\r\n  | collections.ArangoCollection\r\n  | views.View\r\n  | graphs.Graph\r\n  | GeneratedAqlQuery\r\n  | AqlLiteral\r\n  | string\r\n  | number\r\n  | boolean\r\n  | null\r\n  | undefined\r\n  | Record<string, any>\r\n  | any[];\r\n\r\n/**\r\n * Indicates whether the given value is an {@link AqlQuery}.\r\n *\r\n * @param query - A value that might be an `AqlQuery`.\r\n */\r\nexport function isAqlQuery(query: any): query is AqlQuery {\r\n  return Boolean(query && typeof query.query === \"string\" && query.bindVars);\r\n}\r\n\r\n/**\r\n * Indicates whether the given value is a {@link GeneratedAqlQuery}.\r\n *\r\n * @param query - A value that might be a `GeneratedAqlQuery`.\r\n *\r\n * @internal\r\n */\r\nexport function isGeneratedAqlQuery(query: any): query is GeneratedAqlQuery {\r\n  return isAqlQuery(query) && typeof (query as any)._source === \"function\";\r\n}\r\n\r\n/**\r\n * Indicates whether the given value is an {@link AqlLiteral}.\r\n *\r\n * @param literal - A value that might be an `AqlLiteral`.\r\n */\r\nexport function isAqlLiteral(literal: any): literal is AqlLiteral {\r\n  return Boolean(literal && typeof literal.toAQL === \"function\");\r\n}\r\n\r\n/**\r\n * Template string handler (template tag) for AQL queries.\r\n *\r\n * The `aql` tag can be used to write complex AQL queries as multi-line strings\r\n * without having to worry about `bindVars` and the distinction between\r\n * collections and regular parameters.\r\n *\r\n * Tagged template strings will return an {@link AqlQuery} object with\r\n * `query` and `bindVars` attributes reflecting any interpolated values.\r\n *\r\n * Any {@link collections.ArangoCollection} instance used in a query string will\r\n * be recognized as a collection reference and generate an AQL collection bind\r\n * parameter instead of a regular AQL value bind parameter.\r\n *\r\n * **Note**: you should always use the `aql` template tag when writing\r\n * dynamic AQL queries instead of using untagged (normal) template strings.\r\n * Untagged template strings will inline any interpolated values and return\r\n * a plain string as result. The `aql` template tag will only inline references\r\n * to the interpolated values and produce an AQL query object containing both\r\n * the query and the values. This prevents most injection attacks when using\r\n * untrusted values in dynamic queries.\r\n *\r\n * @example\r\n * ```js\r\n * // Some user-supplied string that may be malicious\r\n * const untrustedValue = req.body.email;\r\n *\r\n * // Without aql tag: BAD! DO NOT DO THIS!\r\n * const badQuery = `\r\n *   FOR user IN users\r\n *   FILTER user.email == \"${untrustedValue}\"\r\n *   RETURN user\r\n * `;\r\n * // e.g. if untrustedValue is '\" || user.admin == true || \"':\r\n * // Query:\r\n * //   FOR user IN users\r\n * //   FILTER user.email == \"\" || user.admin == true || \"\"\r\n * //   RETURN user\r\n *\r\n * // With the aql tag: GOOD! MUCH SAFER!\r\n * const betterQuery = aql`\r\n *   FOR user IN users\r\n *   FILTER user.email == ${untrustedValue}\r\n *   RETURN user\r\n * `;\r\n * // Query:\r\n * //   FOR user IN users\r\n * //   FILTER user.email == @value0\r\n * //   RETURN user\r\n * // Bind parameters:\r\n * //   value0 -> untrustedValue\r\n * ```\r\n *\r\n * @example\r\n * ```js\r\n * const collection = db.collection(\"some-collection\");\r\n * const minValue = 23;\r\n * const result = await db.query(aql`\r\n *   FOR d IN ${collection}\r\n *   FILTER d.num > ${minValue}\r\n *   RETURN d\r\n * `);\r\n *\r\n * // Equivalent raw query object\r\n * const result2 = await db.query({\r\n *   query: `\r\n *     FOR d IN @@collection\r\n *     FILTER d.num > @minValue\r\n *     RETURN d\r\n *   `,\r\n *   bindVars: {\r\n *     \"@collection\": collection.name,\r\n *     minValue: minValue\r\n *   }\r\n * });\r\n * ```\r\n *\r\n * @example\r\n * ```js\r\n * const collection = db.collection(\"some-collection\");\r\n * const color = \"green\";\r\n * const filter = aql`FILTER d.color == ${color}'`;\r\n * const result = await db.query(aql`\r\n *   FOR d IN ${collection}\r\n *   ${filter}\r\n *   RETURN d\r\n * `);\r\n * ```\r\n */\r\nexport function aql<T = any>(\r\n  templateStrings: TemplateStringsArray,\r\n  ...args: AqlValue[]\r\n): AqlQuery<T> {\r\n  const strings = [...templateStrings];\r\n  const bindVars: Record<string, any> = {};\r\n  const bindValues = [];\r\n  let query = strings[0];\r\n  for (let i = 0; i < args.length; i++) {\r\n    const rawValue = args[i];\r\n    let value = rawValue;\r\n    if (isGeneratedAqlQuery(rawValue)) {\r\n      const src = rawValue._source();\r\n      if (src.args.length) {\r\n        query += src.strings[0];\r\n        args.splice(i, 1, ...src.args);\r\n        strings.splice(\r\n          i,\r\n          2,\r\n          strings[i] + src.strings[0],\r\n          ...src.strings.slice(1, src.args.length),\r\n          src.strings[src.args.length] + strings[i + 1]\r\n        );\r\n      } else {\r\n        query += rawValue.query + strings[i + 1];\r\n        args.splice(i, 1);\r\n        strings.splice(i, 2, strings[i] + rawValue.query + strings[i + 1]);\r\n      }\r\n      i -= 1;\r\n      continue;\r\n    }\r\n    if (rawValue === undefined) {\r\n      query += strings[i + 1];\r\n      continue;\r\n    }\r\n    if (isAqlLiteral(rawValue)) {\r\n      query += `${rawValue.toAQL()}${strings[i + 1]}`;\r\n      continue;\r\n    }\r\n    const index = bindValues.indexOf(rawValue);\r\n    const isKnown = index !== -1;\r\n    let name = `value${isKnown ? index : bindValues.length}`;\r\n    if (\r\n      collections.isArangoCollection(rawValue) ||\r\n      graphs.isArangoGraph(rawValue) ||\r\n      views.isArangoView(rawValue) ||\r\n      analyzers.isArangoAnalyzer(rawValue)\r\n    ) {\r\n      name = `@${name}`;\r\n      value = rawValue.name;\r\n    }\r\n    if (!isKnown) {\r\n      bindValues.push(rawValue);\r\n      bindVars[name] = value;\r\n    }\r\n    query += `@${name}${strings[i + 1]}`;\r\n  }\r\n  return {\r\n    query,\r\n    bindVars,\r\n    _source: () => ({ strings, args }),\r\n  } as AqlQuery<T>;\r\n}\r\n\r\n/**\r\n * Marks an arbitrary scalar value (i.e. a string, number or boolean) as\r\n * safe for being inlined directly into AQL queries when used in an `aql`\r\n * template string, rather than being converted into a bind parameter.\r\n *\r\n * **Note**: Nesting `aql` template strings is a much safer alternative for\r\n * most use cases. This low-level helper function only exists to help with\r\n * rare edge cases where a trusted AQL query fragment must be read from a\r\n * string (e.g. when reading query fragments from JSON) and should only be\r\n * used as a last resort.\r\n *\r\n * @example\r\n * ```js\r\n * // BAD! DO NOT DO THIS!\r\n * const sortDirection = literal('ASC');\r\n *\r\n * // GOOD! DO THIS INSTEAD!\r\n * const sortDirection = aql`ASC`;\r\n * ```\r\n *\r\n * @example\r\n * ```js\r\n * // BAD! DO NOT DO THIS!\r\n * const filterColor = literal('FILTER d.color == \"green\"');\r\n * const result = await db.query(aql`\r\n *   FOR d IN some-collection\r\n *   ${filterColor}\r\n *   RETURN d\r\n * `);\r\n *\r\n * // GOOD! DO THIS INSTEAD!\r\n * const color = \"green\";\r\n * const filterColor = aql`FILTER d.color === ${color}`;\r\n * const result = await db.query(aql`\r\n *   FOR d IN some-collection\r\n *   ${filterColor}\r\n *   RETURN d\r\n * `);\r\n * ```\r\n *\r\n * @example\r\n * ```js\r\n * // WARNING: We explicitly trust the environment variable to be safe!\r\n * const filter = literal(process.env.FILTER_STATEMENT);\r\n * const users = await db.query(aql`\r\n *   FOR user IN users\r\n *   ${filter}\r\n *   RETURN user\r\n * `);\r\n * ```\r\n */\r\nexport function literal(\r\n  value: string | number | boolean | AqlLiteral | null | undefined\r\n): AqlLiteral {\r\n  if (isAqlLiteral(value)) {\r\n    return value;\r\n  }\r\n  return {\r\n    toAQL() {\r\n      if (value === undefined) {\r\n        return \"\";\r\n      }\r\n      return String(value);\r\n    },\r\n  };\r\n}\r\n\r\n/**\r\n * Constructs {@link AqlQuery} objects from an array of arbitrary values.\r\n *\r\n * **Note**: Nesting `aql` template strings is a much safer alternative\r\n * for most use cases. This low-level helper function only exists to\r\n * complement the `aql` tag when constructing complex queries from dynamic\r\n * arrays of query fragments.\r\n *\r\n * @param values - Array of values to join. These values will behave exactly\r\n * like values interpolated in an `aql` template string.\r\n * @param sep - Seperator to insert between values. This value will behave\r\n * exactly like a value passed to {@link literal}, i.e. it will be\r\n * inlined as-is, rather than being converted into a bind parameter.\r\n *\r\n * @example\r\n * ```js\r\n * const users = db.collection(\"users\");\r\n * const filters = [];\r\n * if (adminsOnly) filters.push(aql`FILTER user.admin`);\r\n * if (activeOnly) filters.push(aql`FILTER user.active`);\r\n * const result = await db.query(aql`\r\n *   FOR user IN ${users}\r\n *   ${join(filters)}\r\n *   RETURN user\r\n * `);\r\n * ```\r\n *\r\n * @example\r\n * ```js\r\n * const users = db.collection(\"users\");\r\n * const keys = [\"jreyes\", \"ghermann\"];\r\n *\r\n * // BAD! NEEDLESSLY COMPLEX!\r\n * const docs = keys.map(key => aql`DOCUMENT(${users}, ${key}`));\r\n * const result = await db.query(aql`\r\n *   FOR user IN [\r\n *     ${join(docs, \", \")}\r\n *   ]\r\n *   RETURN user\r\n * `);\r\n * // Query:\r\n * //   FOR user IN [\r\n * //     DOCUMENT(@@value0, @value1), DOCUMENT(@@value0, @value2)\r\n * //   ]\r\n * //   RETURN user\r\n * // Bind parameters:\r\n * //   @value0 -> \"users\"\r\n * //   value1 -> \"jreyes\"\r\n * //   value2 -> \"ghermann\"\r\n *\r\n * // GOOD! MUCH SIMPLER!\r\n * const result = await db.query(aql`\r\n *   FOR key IN ${keys}\r\n *   LET user = DOCUMENT(${users}, key)\r\n *   RETURN user\r\n * `);\r\n * // Query:\r\n * //   FOR user IN @value0\r\n * //   LET user = DOCUMENT(@@value1, key)\r\n * //   RETURN user\r\n * // Bind parameters:\r\n * //   value0 -> [\"jreyes\", \"ghermann\"]\r\n * //   @value1 -> \"users\"\r\n * ```\r\n */\r\nexport function join(values: AqlValue[], sep: string = \" \"): AqlQuery {\r\n  if (!values.length) {\r\n    return aql``;\r\n  }\r\n  if (values.length === 1) {\r\n    return aql`${values[0]}`;\r\n  }\r\n  return aql([\"\", ...Array(values.length - 1).fill(sep), \"\"] as any, ...values);\r\n}\r\n"]}