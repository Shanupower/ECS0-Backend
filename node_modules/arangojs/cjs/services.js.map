{"version":3,"file":"services.js","sourceRoot":"","sources":["../../src/services.ts"],"names":[],"mappings":";;AA0hBA,YAAY","sourcesContent":["/**\r\n * ```ts\r\n * import type { ServiceInfo } from \"arangojs/services\";\r\n * ```\r\n *\r\n * The \"services\" module provides types for Foxx services.\r\n *\r\n * @packageDocumentation\r\n */\r\nimport { FoxxManifest } from \"./foxx-manifest.js\";\r\n/** @import databases from \"./databases.js\" */\r\n\r\n//#region Service operation options\r\n/**\r\n * Options for installing the service.\r\n *\r\n * See {@link databases.Database#installService}.\r\n */\r\nexport type InstallServiceOptions = {\r\n  /**\r\n   * An object mapping configuration option names to values.\r\n   *\r\n   * See also {@link databases.Database#getServiceConfiguration}.\r\n   */\r\n  configuration?: Record<string, any>;\r\n  /**\r\n   * An object mapping dependency aliases to mount points.\r\n   *\r\n   * See also {@link databases.Database#getServiceDependencies}.\r\n   */\r\n  dependencies?: Record<string, string>;\r\n  /**\r\n   * Whether the service should be installed in development mode.\r\n   *\r\n   * See also {@link databases.Database#setServiceDevelopmentMode}.\r\n   *\r\n   * Default: `false`\r\n   */\r\n  development?: boolean;\r\n  /**\r\n   * Whether the service should be installed in legacy compatibility mode\r\n   *\r\n   * This overrides the `engines` option in the service manifest (if any).\r\n   *\r\n   * Default: `false`\r\n   */\r\n  legacy?: boolean;\r\n  /**\r\n   * Whether the \"setup\" script should be executed.\r\n   *\r\n   * Default: `true`\r\n   */\r\n  setup?: boolean;\r\n};\r\n\r\n/**\r\n * Options for replacing a service.\r\n *\r\n * See {@link databases.Database#replaceService}.\r\n */\r\nexport type ReplaceServiceOptions = {\r\n  /**\r\n   * An object mapping configuration option names to values.\r\n   *\r\n   * See also {@link databases.Database#getServiceConfiguration}.\r\n   */\r\n  configuration?: Record<string, any>;\r\n  /**\r\n   * An object mapping dependency aliases to mount points.\r\n   *\r\n   * See also {@link databases.Database#getServiceDependencies}.\r\n   */\r\n  dependencies?: Record<string, string>;\r\n  /**\r\n   * Whether the service should be installed in development mode.\r\n   *\r\n   * See also {@link databases.Database#setServiceDevelopmentMode}.\r\n   *\r\n   * Default: `false`\r\n   */\r\n  development?: boolean;\r\n  /**\r\n   * Whether the service should be installed in legacy compatibility mode\r\n   *\r\n   * This overrides the `engines` option in the service manifest (if any).\r\n   *\r\n   * Default: `false`\r\n   */\r\n  legacy?: boolean;\r\n  /**\r\n   * Whether the \"setup\" script should be executed.\r\n   *\r\n   * Default: `true`\r\n   */\r\n  setup?: boolean;\r\n  /**\r\n   * Whether the existing service's \"teardown\" script should be executed\r\n   * prior to removing that service.\r\n   *\r\n   * Default: `true`\r\n   */\r\n  teardown?: boolean;\r\n  /**\r\n   * If set to `true`, replacing a service that does not already exist will\r\n   * fall back to installing the new service.\r\n   *\r\n   * Default: `false`\r\n   */\r\n  force?: boolean;\r\n};\r\n\r\n/**\r\n * Options for upgrading a service.\r\n *\r\n * See {@link databases.Database#upgradeService}.\r\n */\r\nexport type UpgradeServiceOptions = {\r\n  /**\r\n   * An object mapping configuration option names to values.\r\n   *\r\n   * See also {@link databases.Database#getServiceConfiguration}.\r\n   */\r\n  configuration?: Record<string, any>;\r\n  /**\r\n   * An object mapping dependency aliases to mount points.\r\n   *\r\n   * See also {@link databases.Database#getServiceDependencies}.\r\n   */\r\n  dependencies?: Record<string, string>;\r\n  /**\r\n   * Whether the service should be installed in development mode.\r\n   *\r\n   * See also {@link databases.Database#setServiceDevelopmentMode}.\r\n   *\r\n   * Default: `false`\r\n   */\r\n  development?: boolean;\r\n  /**\r\n   * Whether the service should be installed in legacy compatibility mode\r\n   *\r\n   * This overrides the `engines` option in the service manifest (if any).\r\n   *\r\n   * Default: `false`\r\n   */\r\n  legacy?: boolean;\r\n  /**\r\n   * Whether the \"setup\" script should be executed.\r\n   *\r\n   * Default: `true`\r\n   */\r\n  setup?: boolean;\r\n  /**\r\n   * Whether the existing service's \"teardown\" script should be executed\r\n   * prior to upgrading that service.\r\n   *\r\n   * Default: `false`\r\n   */\r\n  teardown?: boolean;\r\n  /**\r\n   * Unless set to `true`, upgrading a service that does not already exist will\r\n   * fall back to installing the new service.\r\n   *\r\n   * Default: `false`\r\n   */\r\n  force?: boolean;\r\n};\r\n\r\n/**\r\n * Options for uninstalling a service.\r\n *\r\n * See {@link databases.Database#uninstallService}.\r\n */\r\nexport type UninstallServiceOptions = {\r\n  /**\r\n   * Whether the service's \"teardown\" script should be executed\r\n   * prior to removing that service.\r\n   *\r\n   * Default: `true`\r\n   */\r\n  teardown?: boolean;\r\n  /**\r\n   * If set to `true`, uninstalling a service that does not already exist\r\n   * will be considered successful.\r\n   *\r\n   * Default: `false`\r\n   */\r\n  force?: boolean;\r\n};\r\n//#endregion\r\n\r\n//#region Service operation results\r\n/**\r\n * Object briefly describing a Foxx service.\r\n */\r\nexport type ServiceSummary = {\r\n  /**\r\n   * Service mount point, relative to the database.\r\n   */\r\n  mount: string;\r\n  /**\r\n   * Name defined in the service manifest.\r\n   */\r\n  name?: string;\r\n  /**\r\n   * Version defined in the service manifest.\r\n   */\r\n  version?: string;\r\n  /**\r\n   * Service dependencies the service expects to be able to match as a mapping\r\n   * from dependency names to versions the service is compatible with.\r\n   */\r\n  provides: Record<string, string>;\r\n  /**\r\n   * Whether development mode is enabled for this service.\r\n   */\r\n  development: boolean;\r\n  /**\r\n   * Whether the service is running in legacy compatibility mode.\r\n   */\r\n  legacy: boolean;\r\n};\r\n\r\n/**\r\n * Object describing a configuration option of a Foxx service.\r\n */\r\nexport type ServiceConfiguration = {\r\n  /**\r\n   * Data type of the configuration value.\r\n   *\r\n   * **Note**: `\"int\"` and `\"bool\"` are historical synonyms for `\"integer\"` and\r\n   * `\"boolean\"`. The `\"password\"` type is synonymous with `\"string\"` but can\r\n   * be used to distinguish values which should not be displayed in plain text\r\n   * by software when managing the service.\r\n   */\r\n  type:\r\n    | \"integer\"\r\n    | \"boolean\"\r\n    | \"string\"\r\n    | \"number\"\r\n    | \"json\"\r\n    | \"password\"\r\n    | \"int\"\r\n    | \"bool\";\r\n  /**\r\n   * Current value of the configuration option as stored internally.\r\n   */\r\n  currentRaw: any;\r\n  /**\r\n   * Processed current value of the configuration option as exposed in the\r\n   * service code.\r\n   */\r\n  current: any;\r\n  /**\r\n   * Formatted name of the configuration option.\r\n   */\r\n  title: string;\r\n  /**\r\n   * Human-readable description of the configuration option.\r\n   */\r\n  description?: string;\r\n  /**\r\n   * Whether the configuration option must be set in order for the service\r\n   * to be operational.\r\n   */\r\n  required: boolean;\r\n  /**\r\n   * Default value of the configuration option.\r\n   */\r\n  default?: any;\r\n};\r\n\r\n/**\r\n * Object describing a single-service dependency defined by a Foxx service.\r\n */\r\nexport type SingleServiceDependency = {\r\n  /**\r\n   * Whether this is a multi-service dependency.\r\n   */\r\n  multiple: false;\r\n  /**\r\n   * Current mount point the dependency is resolved to.\r\n   */\r\n  current?: string;\r\n  /**\r\n   * Formatted name of the dependency.\r\n   */\r\n  title: string;\r\n  /**\r\n   * Name of the service the dependency expects to match.\r\n   */\r\n  name: string;\r\n  /**\r\n   * Version of the service the dependency expects to match.\r\n   */\r\n  version: string;\r\n  /**\r\n   * Human-readable description of the dependency.\r\n   */\r\n  description?: string;\r\n  /**\r\n   * Whether the dependency must be matched in order for the service\r\n   * to be operational.\r\n   */\r\n  required: boolean;\r\n};\r\n\r\n/**\r\n * Object describing a multi-service dependency defined by a Foxx service.\r\n */\r\nexport type MultiServiceDependency = {\r\n  /**\r\n   * Whether this is a multi-service dependency.\r\n   */\r\n  multiple: true;\r\n  /**\r\n   * Current mount points the dependency is resolved to.\r\n   */\r\n  current?: string[];\r\n  /**\r\n   * Formatted name of the dependency.\r\n   */\r\n  title: string;\r\n  /**\r\n   * Name of the service the dependency expects to match.\r\n   */\r\n  name: string;\r\n  /**\r\n   * Version of the service the dependency expects to match.\r\n   */\r\n  version: string;\r\n  /**\r\n   * Human-readable description of the dependency.\r\n   */\r\n  description?: string;\r\n  /**\r\n   * Whether the dependency must be matched in order for the service\r\n   * to be operational.\r\n   */\r\n  required: boolean;\r\n};\r\n\r\n/**\r\n * Test stats for a Foxx service's tests.\r\n */\r\nexport type ServiceTestStats = {\r\n  /**\r\n   * Total number of tests found.\r\n   */\r\n  tests: number;\r\n  /**\r\n   * Number of tests that ran successfully.\r\n   */\r\n  passes: number;\r\n  /**\r\n   * Number of tests that failed.\r\n   */\r\n  failures: number;\r\n  /**\r\n   * Number of tests skipped or not executed.\r\n   */\r\n  pending: number;\r\n  /**\r\n   * Total test duration in milliseconds.\r\n   */\r\n  duration: number;\r\n};\r\n\r\n/**\r\n * Test results for a Foxx service's tests using the stream reporter.\r\n */\r\nexport type ServiceTestStreamReport = (\r\n  | [\"start\", { total: number }]\r\n  | [\"pass\", ServiceTestStreamTest]\r\n  | [\"fail\", ServiceTestStreamTest]\r\n  | [\"end\", ServiceTestStats]\r\n)[];\r\n\r\n/**\r\n * Test results for a single test case using the stream reporter.\r\n */\r\nexport type ServiceTestStreamTest = {\r\n  title: string;\r\n  fullTitle: string;\r\n  duration: number;\r\n  err?: string;\r\n};\r\n\r\n/**\r\n * Test results for a Foxx service's tests using the suite reporter.\r\n */\r\nexport type ServiceTestSuiteReport = {\r\n  stats: ServiceTestStats;\r\n  suites: ServiceTestSuite[];\r\n  tests: ServiceTestSuiteTest[];\r\n};\r\n\r\n/**\r\n * Test results for a single test suite using the suite reporter.\r\n */\r\nexport type ServiceTestSuite = {\r\n  title: string;\r\n  suites: ServiceTestSuite[];\r\n  tests: ServiceTestSuiteTest[];\r\n};\r\n\r\n/**\r\n * Test results for a single test case using the suite reporter.\r\n */\r\nexport type ServiceTestSuiteTest = {\r\n  result: \"pending\" | \"pass\" | \"fail\";\r\n  title: string;\r\n  duration: number;\r\n  err?: any;\r\n};\r\n\r\n/**\r\n * Test results for a Foxx service's tests in XUnit format using the JSONML\r\n * representation.\r\n */\r\nexport type ServiceTestXunitReport = [\r\n  \"testsuite\",\r\n  {\r\n    timestamp: number;\r\n    tests: number;\r\n    errors: number;\r\n    failures: number;\r\n    skip: number;\r\n    time: number;\r\n  },\r\n  ...ServiceTestXunitTest[],\r\n];\r\n\r\n/**\r\n * Test results for a single test case in XUnit format using the JSONML\r\n * representation.\r\n */\r\nexport type ServiceTestXunitTest =\r\n  | [\"testcase\", { classname: string; name: string; time: number }]\r\n  | [\r\n      \"testcase\",\r\n      { classname: string; name: string; time: number },\r\n      [\"failure\", { message: string; type: string }, string],\r\n    ];\r\n\r\n/**\r\n * Test results for a Foxx service's tests in TAP format.\r\n */\r\nexport type ServiceTestTapReport = string[];\r\n\r\n/**\r\n * Test results for a Foxx service's tests using the default reporter.\r\n */\r\nexport type ServiceTestDefaultReport = {\r\n  stats: ServiceTestStats;\r\n  tests: ServiceTestDefaultTest[];\r\n  pending: ServiceTestDefaultTest[];\r\n  failures: ServiceTestDefaultTest[];\r\n  passes: ServiceTestDefaultTest[];\r\n};\r\n\r\n/**\r\n * Test results for a single test case using the default reporter.\r\n */\r\nexport type ServiceTestDefaultTest = {\r\n  title: string;\r\n  fullTitle: string;\r\n  duration: number;\r\n  err?: string;\r\n};\r\n\r\n/**\r\n * OpenAPI 2.0 description of a Foxx service.\r\n */\r\nexport type SwaggerJson = {\r\n  [key: string]: any;\r\n  info: {\r\n    title: string;\r\n    description: string;\r\n    version: string;\r\n    license: string;\r\n  };\r\n  path: {\r\n    [key: string]: any;\r\n  };\r\n};\r\n//#endregion\r\n\r\n//#region ServiceDescription\r\n/**\r\n * Object describing a Foxx service in detail.\r\n */\r\nexport type ServiceDescription = {\r\n  /**\r\n   * Service mount point, relative to the database.\r\n   */\r\n  mount: string;\r\n  /**\r\n   * File system path of the service.\r\n   */\r\n  path: string;\r\n  /**\r\n   * Name defined in the service manifest.\r\n   */\r\n  name?: string;\r\n  /**\r\n   * Version defined in the service manifest.\r\n   */\r\n  version?: string;\r\n  /**\r\n   * Whether development mode is enabled for this service.\r\n   */\r\n  development: boolean;\r\n  /**\r\n   * Whether the service is running in legacy compatibility mode.\r\n   */\r\n  legacy: boolean;\r\n  /**\r\n   * Content of the service manifest of this service.\r\n   */\r\n  manifest: FoxxManifest;\r\n  /**\r\n   * Internal checksum of the service's initial source bundle.\r\n   */\r\n  checksum: string;\r\n  /**\r\n   * Options for this service.\r\n   */\r\n  options: {\r\n    /**\r\n     * Configuration values set for this service.\r\n     */\r\n    configuration: Record<string, any>;\r\n    /**\r\n     * Service dependency configuration of this service.\r\n     */\r\n    dependencies: Record<string, string>;\r\n  };\r\n};\r\n//#endregion\r\n"]}