{"version":3,"file":"errors.js","sourceRoot":"","sources":["../../src/errors.ts"],"names":[],"mappings":"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","sourcesContent":["/**\r\n * ```ts\r\n * import type { ArangoError, HttpError } from \"arangojs/errors\";\r\n * ```\r\n *\r\n * The \"errors\" module provides types and interfaces for TypeScript related\r\n * to arangojs error handling.\r\n *\r\n * @packageDocumentation\r\n */\r\n\r\nimport * as connection from \"./connection.js\";\r\nimport { ERROR_ARANGO_MAINTENANCE_MODE } from \"./lib/codes.js\";\r\n\r\n/**\r\n * Indicates whether the given value represents an {@link ArangoError}.\r\n *\r\n * @param error - A value that might be an `ArangoError`.\r\n */\r\nexport function isArangoError(error: any): error is ArangoError {\r\n  return Boolean(error && error.isArangoError);\r\n}\r\n\r\n/**\r\n * Indicates whether the given value represents a {@link NetworkError}.\r\n *\r\n * @param error - A value that might be a `NetworkError`.\r\n */\r\nexport function isNetworkError(error: any): error is NetworkError {\r\n  return error instanceof NetworkError;\r\n}\r\n\r\n/**\r\n * @internal\r\n *\r\n * Indicates whether the given value represents a Node.js `SystemError`.\r\n */\r\nexport function isSystemError(err: any): err is SystemError {\r\n  if (!err || !(err instanceof Error)) return false;\r\n  if (Object.getPrototypeOf(err) !== Error.prototype) return false;\r\n  const error = err as SystemError;\r\n  if (typeof error.code !== \"string\") return false;\r\n  if (typeof error.syscall !== \"string\") return false;\r\n  return typeof error.errno === \"number\" || typeof error.errno === \"string\";\r\n}\r\n\r\n/**\r\n * @internal\r\n *\r\n * Indicates whether the given value represents a Node.js `UndiciError`.\r\n */\r\nexport function isUndiciError(err: any): err is UndiciError {\r\n  if (!err || !(err instanceof Error)) return false;\r\n  const error = err as UndiciError;\r\n  if (typeof error.code !== \"string\") return false;\r\n  return error.code.startsWith(\"UND_\");\r\n}\r\n\r\n/**\r\n * @internal\r\n *\r\n * Determines whether the given failed fetch error cause is safe to retry.\r\n */\r\nfunction isSafeToRetryFailedFetch(error?: Error): boolean | null {\r\n  if (!error || !error.cause) return null;\r\n  let cause = error.cause as Error;\r\n  if (isArangoError(cause) || isNetworkError(cause)) {\r\n    return cause.isSafeToRetry;\r\n  }\r\n  if (\r\n    isSystemError(cause) &&\r\n    cause.syscall === \"connect\" &&\r\n    cause.code === \"ECONNREFUSED\"\r\n  ) {\r\n    return true;\r\n  }\r\n  if (isUndiciError(cause) && cause.code === \"UND_ERR_CONNECT_TIMEOUT\") {\r\n    return true;\r\n  }\r\n  return isSafeToRetryFailedFetch(cause);\r\n}\r\n\r\n/**\r\n * Interface representing a Node.js `UndiciError`.\r\n *\r\n * @internal\r\n */\r\nexport interface UndiciError extends Error {\r\n  code: `UND_${string}`;\r\n}\r\n\r\n/**\r\n * Interface representing a Node.js `SystemError`.\r\n *\r\n * @internal\r\n */\r\nexport interface SystemError extends Error {\r\n  code: string;\r\n  errno: number | string;\r\n  syscall: string;\r\n}\r\n\r\n/**\r\n * Represents an error from a deliberate timeout encountered while waiting\r\n * for propagation.\r\n */\r\nexport class PropagationTimeoutError extends Error {\r\n  name = \"PropagationTimeoutError\";\r\n\r\n  constructor(message?: string, options: { cause?: Error } = {}) {\r\n    super(message ?? \"Timed out while waiting for propagation\", options);\r\n  }\r\n}\r\n\r\n/**\r\n * Represents a network error or an error encountered while performing a network request.\r\n */\r\nexport class NetworkError extends Error {\r\n  name = \"NetworkError\";\r\n\r\n  /**\r\n   * Indicates whether the request that caused this error can be safely retried.\r\n   */\r\n  isSafeToRetry: boolean | null;\r\n\r\n  /**\r\n   * Fetch request object.\r\n   */\r\n  request: globalThis.Request;\r\n\r\n  constructor(\r\n    message: string,\r\n    request: globalThis.Request,\r\n    options: { cause?: Error; isSafeToRetry?: boolean | null } = {},\r\n  ) {\r\n    const { isSafeToRetry = null, ...opts } = options;\r\n    super(message, opts);\r\n    this.request = request;\r\n    this.isSafeToRetry = isSafeToRetry;\r\n  }\r\n\r\n  toJSON() {\r\n    return {\r\n      error: true,\r\n      errorMessage: this.message,\r\n      code: 0,\r\n    };\r\n  }\r\n}\r\n\r\n/**\r\n * Represents an error from a deliberate timeout encountered while waiting\r\n * for a server response.\r\n */\r\nexport class ResponseTimeoutError extends NetworkError {\r\n  name = \"ResponseTimeoutError\";\r\n\r\n  constructor(\r\n    message: string | undefined,\r\n    request: globalThis.Request,\r\n    options: { cause?: Error; isSafeToRetry?: boolean | null } = {},\r\n  ) {\r\n    super(\r\n      message ?? \"Timed out while waiting for server response\",\r\n      request,\r\n      options,\r\n    );\r\n  }\r\n}\r\n\r\n/**\r\n * Represents an error from a request that was aborted.\r\n */\r\nexport class RequestAbortedError extends NetworkError {\r\n  name = \"RequestAbortedError\";\r\n\r\n  constructor(\r\n    message: string | undefined,\r\n    request: globalThis.Request,\r\n    options: { cause?: Error; isSafeToRetry?: boolean | null } = {},\r\n  ) {\r\n    super(message ?? \"Request aborted\", request, options);\r\n  }\r\n}\r\n\r\n/**\r\n * Represents an error from a failed fetch request.\r\n *\r\n * The root cause is often extremely difficult to determine.\r\n */\r\nexport class FetchFailedError extends NetworkError {\r\n  name = \"FetchFailedError\";\r\n\r\n  constructor(\r\n    message: string | undefined,\r\n    request: globalThis.Request,\r\n    options: { cause?: Error; isSafeToRetry?: boolean | null } = {},\r\n  ) {\r\n    let isSafeToRetry =\r\n      options.isSafeToRetry ?? isSafeToRetryFailedFetch(options.cause);\r\n    if (options.cause?.cause instanceof Error && options.cause.cause.message) {\r\n      message = `Fetch failed: ${options.cause.cause.message}`;\r\n    }\r\n    super(message ?? \"Fetch failed\", request, { ...options, isSafeToRetry });\r\n  }\r\n}\r\n\r\n/**\r\n * Represents a plain HTTP error response.\r\n */\r\nexport class HttpError extends NetworkError {\r\n  name = \"HttpError\";\r\n\r\n  /**\r\n   * HTTP status code of the server response.\r\n   */\r\n  code: number;\r\n\r\n  /**\r\n   * Server response object.\r\n   */\r\n  response: connection.ProcessedResponse;\r\n\r\n  /**\r\n   * @internal\r\n   */\r\n  constructor(\r\n    response: connection.ProcessedResponse,\r\n    options: { cause?: Error; isSafeToRetry?: boolean | null } = {},\r\n  ) {\r\n    super(connection.getStatusMessage(response), response.request, options);\r\n    this.response = response;\r\n    this.code = response.status;\r\n  }\r\n\r\n  toJSON() {\r\n    return {\r\n      error: true,\r\n      errorMessage: this.message,\r\n      code: this.code,\r\n    };\r\n  }\r\n\r\n  toString() {\r\n    return `${this.name} ${this.code}: ${this.message}`;\r\n  }\r\n}\r\n\r\n/**\r\n * Represents an error returned by ArangoDB.\r\n */\r\nexport class ArangoError extends Error {\r\n  name = \"ArangoError\";\r\n\r\n  /**\r\n   * Indicates whether the request that caused this error can be safely retried.\r\n   *\r\n   * @internal\r\n   */\r\n  isSafeToRetry: boolean | null = null;\r\n\r\n  /**\r\n   * @internal\r\n   */\r\n  get error(): true {\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * ArangoDB error code.\r\n   *\r\n   * See [ArangoDB error documentation](https://www.arangodb.com/docs/stable/appendix-error-codes.html).\r\n   */\r\n  errorNum: number;\r\n\r\n  /**\r\n   * Error message accompanying the error code.\r\n   */\r\n  get errorMessage(): string {\r\n    return this.message;\r\n  }\r\n\r\n  /**\r\n   * HTTP status code included in the server error response object.\r\n   */\r\n  code?: number;\r\n\r\n  /**\r\n   * @internal\r\n   *\r\n   * Creates a new `ArangoError` from a response object.\r\n   */\r\n  static from(\r\n    response: connection.ProcessedResponse<connection.ArangoErrorResponse>,\r\n  ): ArangoError {\r\n    return new ArangoError(response.parsedBody!, {\r\n      cause: new HttpError(response),\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Creates a new `ArangoError` from an ArangoDB error response.\r\n   */\r\n  constructor(\r\n    data: Omit<connection.ArangoErrorResponse, \"error\">,\r\n    options: { cause?: Error; isSafeToRetry?: boolean | null } = {},\r\n  ) {\r\n    const { isSafeToRetry, ...opts } = options;\r\n    super(data.errorMessage, opts);\r\n    this.errorNum = data.errorNum;\r\n    this.code = data.code;\r\n    if (isSafeToRetry !== undefined) {\r\n      this.isSafeToRetry = isSafeToRetry;\r\n    } else if (this.errorNum === ERROR_ARANGO_MAINTENANCE_MODE) {\r\n      this.isSafeToRetry = true;\r\n    } else if (this.cause instanceof NetworkError) {\r\n      this.isSafeToRetry = this.cause.isSafeToRetry;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Server response object.\r\n   */\r\n  get response():\r\n    | connection.ProcessedResponse<connection.ArangoErrorResponse>\r\n    | undefined {\r\n    const cause = this.cause;\r\n    if (cause instanceof HttpError) {\r\n      return cause.response;\r\n    }\r\n    return undefined;\r\n  }\r\n\r\n  /**\r\n   * Fetch request object.\r\n   */\r\n  get request(): globalThis.Request | undefined {\r\n    const cause = this.cause;\r\n    if (cause instanceof NetworkError) {\r\n      return cause.request;\r\n    }\r\n    return undefined;\r\n  }\r\n\r\n  /**\r\n   * @internal\r\n   *\r\n   * Indicates that this object represents an ArangoDB error.\r\n   */\r\n  get isArangoError(): true {\r\n    return true;\r\n  }\r\n\r\n  toJSON(): connection.ArangoErrorResponse {\r\n    return {\r\n      error: true,\r\n      errorMessage: this.errorMessage,\r\n      errorNum: this.errorNum,\r\n      code: this.code,\r\n    };\r\n  }\r\n\r\n  toString() {\r\n    return `${this.name} ${this.errorNum}: ${this.message}`;\r\n  }\r\n}\r\n"]}