{"version":3,"file":"jobs.js","sourceRoot":"","sources":["../../src/jobs.ts"],"names":[],"mappings":";;;AAYA;;;;GAIG;AACH,MAAa,GAAG;IACJ,GAAG,CAAS;IACZ,GAAG,CAAqB;IACxB,kBAAkB,CAEH;IACf,eAAe,CAAuC;IACtD,OAAO,GAAY,KAAK,CAAC;IACzB,OAAO,CAAyB;IAE1C;;OAEG;IACH,YACE,EAAsB,EACtB,EAAU,EACV,iBAEwB,EACxB,cAAoD;QAEpD,IAAI,CAAC,GAAG,GAAG,EAAE,CAAC;QACd,IAAI,CAAC,GAAG,GAAG,EAAE,CAAC;QACd,IAAI,CAAC,kBAAkB,GAAG,iBAAiB,CAAC;QAC5C,IAAI,CAAC,eAAe,GAAG,cAAc,CAAC;IACxC,CAAC;IAED;;OAEG;IACH,IAAI,QAAQ;QACV,OAAO,IAAI,CAAC,GAAG,CAAC;IAClB,CAAC;IAED;;OAEG;IACH,IAAI,EAAE;QACJ,OAAO,IAAI,CAAC,GAAG,CAAC;IAClB,CAAC;IAED;;;OAGG;IACH,IAAI,QAAQ;QACV,OAAO,IAAI,CAAC,OAAO,CAAC;IACtB,CAAC;IAED;;OAEG;IACH,IAAI,MAAM;QACR,OAAO,IAAI,CAAC,OAAO,CAAC;IACtB,CAAC;IAED;;;;;;;;;;;;;;OAcG;IACH,KAAK,CAAC,IAAI;QACR,IAAI,CAAC,IAAI,CAAC,QAAQ,EAAE,CAAC;YACnB,IAAI,GAAiC,CAAC;YACtC,IAAI,CAAC;gBACH,GAAG,GAAG,MAAM,IAAI,CAAC,GAAG,CAAC,OAAO,CAC1B;oBACE,MAAM,EAAE,KAAK;oBACb,QAAQ,EAAE,aAAa,IAAI,CAAC,GAAG,EAAE;iBAClC,EACD,KAAK,CACN,CAAC;YACJ,CAAC;YAAC,OAAO,CAAC,EAAE,CAAC;gBACX,IAAI,IAAI,CAAC,eAAe,EAAE,CAAC;oBACzB,OAAO,IAAI,CAAC,eAAe,CAAC,CAAC,CAAC,CAAC;gBACjC,CAAC;gBACD,MAAM,CAAC,CAAC;YACV,CAAC;YACD,IAAI,GAAG,CAAC,MAAM,KAAK,GAAG,EAAE,CAAC;gBACvB,IAAI,CAAC,OAAO,GAAG,IAAI,CAAC;gBACpB,IAAI,IAAI,CAAC,kBAAkB,EAAE,CAAC;oBAC5B,IAAI,CAAC,OAAO,GAAG,MAAM,IAAI,CAAC,kBAAkB,CAAC,GAAG,CAAC,CAAC;gBACpD,CAAC;qBAAM,CAAC;oBACN,IAAI,CAAC,OAAO,GAAG,GAAG,CAAC,UAAU,CAAC;gBAChC,CAAC;YACH,CAAC;QACH,CAAC;QACD,OAAO,IAAI,CAAC,OAAO,CAAC;IACtB,CAAC;IAED;;;OAGG;IACH,MAAM;QACJ,OAAO,IAAI,CAAC,GAAG,CAAC,OAAO,CACrB;YACE,MAAM,EAAE,KAAK;YACb,QAAQ,EAAE,aAAa,IAAI,CAAC,GAAG,SAAS;SACzC,EACD,GAAG,EAAE,CAAC,SAAS,CAChB,CAAC;IACJ,CAAC;IAED;;OAEG;IACH,YAAY;QACV,OAAO,IAAI,CAAC,GAAG,CAAC,OAAO,CACrB;YACE,MAAM,EAAE,QAAQ;YAChB,QAAQ,EAAE,aAAa,IAAI,CAAC,GAAG,EAAE;SAClC,EACD,GAAG,EAAE,CAAC,SAAS,CAChB,CAAC;IACJ,CAAC;IAED;;;;;;;;;;;;;;;OAeG;IACH,YAAY;QACV,OAAO,IAAI,CAAC,GAAG,CAAC,OAAO,CACrB;YACE,QAAQ,EAAE,aAAa,IAAI,CAAC,GAAG,EAAE;SAClC,EACD,CAAC,GAAG,EAAE,EAAE,CAAC,GAAG,CAAC,MAAM,KAAK,GAAG,CAC5B,CAAC;IACJ,CAAC;CACF;AAvJD,kBAuJC","sourcesContent":["/**\r\n * ```ts\r\n * import type { Job } from \"arangojs/jobs\";\r\n * ```\r\n *\r\n * The \"jobs\" module provides job-related types for TypeScript.\r\n *\r\n * @packageDocumentation\r\n */\r\nimport * as connection from \"./connection.js\";\r\nimport * as databases from \"./databases.js\";\r\n\r\n/**\r\n * Represents an async job in a {@link databases.Database}.\r\n *\r\n * @param ResultType - The type of the job's result.\r\n */\r\nexport class Job<ResultType = any> {\r\n  protected _id: string;\r\n  protected _db: databases.Database;\r\n  protected _transformResponse?: (\r\n    res: connection.ProcessedResponse,\r\n  ) => Promise<ResultType>;\r\n  protected _transformError?: (error: any) => Promise<ResultType>;\r\n  protected _loaded: boolean = false;\r\n  protected _result: ResultType | undefined;\r\n\r\n  /**\r\n   * @internal\r\n   */\r\n  constructor(\r\n    db: databases.Database,\r\n    id: string,\r\n    transformResponse?: (\r\n      res: connection.ProcessedResponse,\r\n    ) => Promise<ResultType>,\r\n    transformError?: (error: any) => Promise<ResultType>,\r\n  ) {\r\n    this._db = db;\r\n    this._id = id;\r\n    this._transformResponse = transformResponse;\r\n    this._transformError = transformError;\r\n  }\r\n\r\n  /**\r\n   * Database this job belongs to.\r\n   */\r\n  get database() {\r\n    return this._db;\r\n  }\r\n\r\n  /**\r\n   * The job's ID.\r\n   */\r\n  get id(): string {\r\n    return this._id;\r\n  }\r\n\r\n  /**\r\n   * Whether the job's results have been loaded. If set to `true`, the job's\r\n   * result can be accessed from {@link Job.result}.\r\n   */\r\n  get isLoaded(): boolean {\r\n    return this._loaded;\r\n  }\r\n\r\n  /**\r\n   * The job's result if it has been loaded or `undefined` otherwise.\r\n   */\r\n  get result(): ResultType | undefined {\r\n    return this._result;\r\n  }\r\n\r\n  /**\r\n   * Loads the job's result from the database if it is not already loaded.\r\n   *\r\n   * @example\r\n   * ```js\r\n   * // poll for the job to complete\r\n   * while (!job.isLoaded) {\r\n   *   await timeout(1000);\r\n   *   const result = await job.load();\r\n   *   console.log(result);\r\n   * }\r\n   * // job result is now loaded and can also be accessed from job.result\r\n   * console.log(job.result);\r\n   * ```\r\n   */\r\n  async load(): Promise<ResultType | undefined> {\r\n    if (!this.isLoaded) {\r\n      let res: connection.ProcessedResponse;\r\n      try {\r\n        res = await this._db.request(\r\n          {\r\n            method: \"PUT\",\r\n            pathname: `/_api/job/${this._id}`,\r\n          },\r\n          false,\r\n        );\r\n      } catch (e) {\r\n        if (this._transformError) {\r\n          return this._transformError(e);\r\n        }\r\n        throw e;\r\n      }\r\n      if (res.status !== 204) {\r\n        this._loaded = true;\r\n        if (this._transformResponse) {\r\n          this._result = await this._transformResponse(res);\r\n        } else {\r\n          this._result = res.parsedBody;\r\n        }\r\n      }\r\n    }\r\n    return this._result;\r\n  }\r\n\r\n  /**\r\n   * Cancels the job if it is still running. Note that it may take some time to\r\n   * actually cancel the job.\r\n   */\r\n  cancel(): Promise<void> {\r\n    return this._db.request(\r\n      {\r\n        method: \"PUT\",\r\n        pathname: `/_api/job/${this._id}/cancel`,\r\n      },\r\n      () => undefined,\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Deletes the result if it has not already been retrieved or deleted.\r\n   */\r\n  deleteResult(): Promise<void> {\r\n    return this._db.request(\r\n      {\r\n        method: \"DELETE\",\r\n        pathname: `/_api/job/${this._id}`,\r\n      },\r\n      () => undefined,\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Fetches the job's completion state.\r\n   *\r\n   * Returns `true` if the job has completed, `false` otherwise.\r\n   *\r\n   * @example\r\n   * ```js\r\n   * // poll for the job to complete\r\n   * while (!(await job.getCompleted())) {\r\n   *   await timeout(1000);\r\n   * }\r\n   * // job result is now available and can be loaded\r\n   * await job.load();\r\n   * console.log(job.result);\r\n   * ```\r\n   */\r\n  getCompleted(): Promise<boolean> {\r\n    return this._db.request(\r\n      {\r\n        pathname: `/_api/job/${this._id}`,\r\n      },\r\n      (res) => res.status !== 204,\r\n    );\r\n  }\r\n}\r\n"]}