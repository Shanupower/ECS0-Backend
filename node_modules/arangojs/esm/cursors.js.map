{"version":3,"file":"cursors.js","sourceRoot":"","sources":["../../src/cursors.ts"],"names":[],"mappings":"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","sourcesContent":["/**\r\n * ```ts\r\n * import type { Cursor, BatchCursor } from \"arangojs/cursors\";\r\n * ```\r\n *\r\n * The \"cursors\" module provides cursor-related types and interfaces for\r\n * TypeScript.\r\n *\r\n * @packageDocumentation\r\n */\r\nimport { LinkedList } from \"./lib/x3-linkedlist.js\";\r\nimport * as databases from \"./databases.js\";\r\n\r\n//#region Cursor properties\r\n/**\r\n * Additional information about the cursor.\r\n */\r\nexport type CursorExtras = {\r\n  /**\r\n   * Warnings encountered while executing the query.\r\n   */\r\n  warnings: {\r\n    code: number;\r\n    message: string;\r\n  }[];\r\n  /**\r\n   * Query execution plan for the executed query.\r\n   */\r\n  plan?: Record<string, any>;\r\n  /**\r\n   * Additional profiling information for the executed query.\r\n   */\r\n  profile?: Record<string, number>;\r\n  /**\r\n   * Additional statistics about the query execution.\r\n   */\r\n  stats?: CursorStats;\r\n};\r\n\r\n/**\r\n * Additional statics about the query execution of the cursor.\r\n */\r\nexport type CursorStats = {\r\n  /**\r\n   * Total number of index entries read from in-memory caches for indexes of\r\n   * type edge or persistent.\r\n   */\r\n  cacheHits: number;\r\n  /**\r\n   * Total number of cache read attempts for index entries that could not be\r\n   * served from in-memory caches for indexes of type edge or persistent.\r\n   */\r\n  cacheMisses: number;\r\n  /**\r\n   * Total number of cursor objects created during query execution.\r\n   */\r\n  cursorsCreated: number;\r\n  /**\r\n   * Total number of times an existing cursor object was repurposed.\r\n   */\r\n  cursorsRearmed: number;\r\n  /**\r\n   * Total number of data-modification operations successfully executed.\r\n   */\r\n  writesExecuted: number;\r\n  /**\r\n   * Total number of data-modification operations that were unsuccessful, but have been ignored because of query option ignoreErrors.\r\n   */\r\n  writesIgnored: number;\r\n  /**\r\n   * Total number of documents iterated over when scanning a collection without an index.\r\n   */\r\n  scannedFull: number;\r\n  /**\r\n   * Total number of documents iterated over when scanning a collection using an index.\r\n   */\r\n  scannedIndex: number;\r\n  /**\r\n   * Total number of documents that were removed after executing a filter condition in a FilterNode.\r\n   */\r\n  filtered: number;\r\n  /**\r\n   * Maximum memory usage of the query while it was running.\r\n   */\r\n  peakMemoryUsage: number;\r\n  /**\r\n   * Execution time of the query in seconds.\r\n   */\r\n  executionTime: number;\r\n  /**\r\n   * Total number of documents that matched the search condition if the query’s final top-level LIMIT statement were not present.\r\n   */\r\n  fullCount?: number;\r\n  /**\r\n   * Total number of cluster-internal HTTP requests performed.\r\n   */\r\n  httpRequests: number;\r\n  /**\r\n   * Runtime statistics per query execution node if `profile` was set to `2` or greater.\r\n   */\r\n  nodes?: {\r\n    /**\r\n     * Execution node ID to correlate this node with nodes in the `extra.plan`.\r\n     */\r\n    id: number;\r\n    /**\r\n     * Number of calls in this node.\r\n     */\r\n    calls: number;\r\n    /**\r\n     * Number of temporary result items returned by this node.\r\n     */\r\n    items: number;\r\n    filter: number;\r\n    /**\r\n     * Execution time of this node in seconds.\r\n     */\r\n    runtime: number;\r\n  }[];\r\n};\r\n\r\n/**\r\n * A low-level interface for consuming the items of a {@link BatchCursor}.\r\n */\r\nexport interface BatchCursorItemsView<ItemType = any> {\r\n  readonly isEmpty: boolean;\r\n  more(): Promise<void>;\r\n  shift(): ItemType | undefined;\r\n}\r\n//#endregion\r\n\r\n/**\r\n * The `BatchCursor` provides a batch-wise API to an {@link Cursor}.\r\n *\r\n * When using TypeScript, cursors can be cast to a specific item type in order\r\n * to increase type safety.\r\n *\r\n * @param ItemType - Type to use for each item. Defaults to `any`.\r\n *\r\n * @example\r\n * ```ts\r\n * const db = new Database();\r\n * const query = aql`FOR x IN 1..5 RETURN x`;\r\n * const cursor = await db.query(query) as Cursor<number>;\r\n * const batches = cursor.batches;\r\n * ```\r\n *\r\n * @example\r\n * ```js\r\n * const db = new Database();\r\n * const query = aql`FOR x IN 1..10000 RETURN x`;\r\n * const cursor = await db.query(query, { batchSize: 10 });\r\n * for await (const batch of cursor.batches) {\r\n *   // Process all values in a batch in parallel\r\n *   await Promise.all(batch.map(\r\n *     value => asyncProcessValue(value)\r\n *   ));\r\n * }\r\n * ```\r\n */\r\nexport class BatchCursor<ItemType = any> {\r\n  protected _db: databases.Database;\r\n  protected _batches: LinkedList<LinkedList<ItemType>>;\r\n  protected _count?: number;\r\n  protected _extra: CursorExtras;\r\n  protected _hasMore: boolean;\r\n  protected _nextBatchId?: string;\r\n  protected _id: string | undefined;\r\n  protected _hostUrl?: string;\r\n  protected _allowDirtyRead?: boolean;\r\n  protected _itemsCursor: Cursor<ItemType>;\r\n\r\n  /**\r\n   * @internal\r\n   */\r\n  constructor(\r\n    db: databases.Database,\r\n    body: {\r\n      extra: CursorExtras;\r\n      result: ItemType[];\r\n      hasMore: boolean;\r\n      nextBatchId?: string;\r\n      id: string;\r\n      count: number;\r\n    },\r\n    hostUrl?: string,\r\n    allowDirtyRead?: boolean,\r\n  ) {\r\n    const batches = new LinkedList(\r\n      body.result.length ? [new LinkedList(body.result)] : [],\r\n    );\r\n    this._db = db;\r\n    this._batches = batches;\r\n    this._id = body.id;\r\n    this._hasMore = Boolean(body.id && body.hasMore);\r\n    this._nextBatchId = body.nextBatchId;\r\n    this._hostUrl = hostUrl;\r\n    this._count = body.count;\r\n    this._extra = body.extra;\r\n    this._allowDirtyRead = allowDirtyRead;\r\n    this._itemsCursor = new Cursor(this, this.itemsView);\r\n  }\r\n\r\n  protected async _more(): Promise<void> {\r\n    if (!this._id || !this.hasMore) return;\r\n    const body = await this._db.request({\r\n      method: \"POST\",\r\n      pathname: this._nextBatchId\r\n        ? `/_api/cursor/${encodeURIComponent(this._id)}/${this._nextBatchId}`\r\n        : `/_api/cursor/${encodeURIComponent(this._id)}`,\r\n      hostUrl: this._hostUrl,\r\n      allowDirtyRead: this._allowDirtyRead,\r\n    });\r\n    this._batches.push(new LinkedList(body.result));\r\n    this._hasMore = body.hasMore;\r\n    this._nextBatchId = body.nextBatchId;\r\n  }\r\n\r\n  /**\r\n   * Database this cursor belongs to.\r\n   */\r\n  get database() {\r\n    return this._db;\r\n  }\r\n\r\n  /**\r\n   * ID of this cursor.\r\n   */\r\n  get id() {\r\n    return this._id;\r\n  }\r\n\r\n  /**\r\n   * An {@link Cursor} providing item-wise access to the cursor result set.\r\n   *\r\n   * See also {@link Cursor#batches}.\r\n   */\r\n  get items() {\r\n    return this._itemsCursor;\r\n  }\r\n\r\n  /**\r\n   * A low-level interface for consuming the items of this {@link BatchCursor}.\r\n   */\r\n  get itemsView(): BatchCursorItemsView<ItemType> {\r\n    const batches = this._batches;\r\n    return {\r\n      get isEmpty() {\r\n        return !batches.length;\r\n      },\r\n      more: () => this._more(),\r\n      shift: () => {\r\n        let batch = batches.first?.value;\r\n        while (batch && !batch.length) {\r\n          batches.shift();\r\n          batch = batches.first?.value;\r\n        }\r\n        if (!batch) return undefined;\r\n        const value = batch.shift();\r\n        if (!batch.length) batches.shift();\r\n        return value;\r\n      },\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Additional information about the cursor.\r\n   */\r\n  get extra(): Readonly<CursorExtras> {\r\n    return this._extra;\r\n  }\r\n\r\n  /**\r\n   * Total number of documents in the query result. Only available if the\r\n   * `count` option was used.\r\n   */\r\n  get count(): number | undefined {\r\n    return this._count;\r\n  }\r\n\r\n  /**\r\n   * Whether the cursor has any remaining batches that haven't yet been\r\n   * fetched. If set to `false`, all batches have been fetched and no\r\n   * additional requests to the server will be made when consuming any\r\n   * remaining batches from this cursor.\r\n   */\r\n  get hasMore(): boolean {\r\n    return this._hasMore;\r\n  }\r\n\r\n  /**\r\n   * Whether the cursor has more batches. If set to `false`, the cursor has\r\n   * already been depleted and contains no more batches.\r\n   */\r\n  get hasNext(): boolean {\r\n    return this.hasMore || Boolean(this._batches.length);\r\n  }\r\n\r\n  /**\r\n   * Enables use with `for await` to deplete the cursor by asynchronously\r\n   * yielding every batch in the cursor's remaining result set.\r\n   *\r\n   * **Note**: If the result set spans multiple batches, any remaining batches\r\n   * will only be fetched on demand. Depending on the cursor's TTL and the\r\n   * processing speed, this may result in the server discarding the cursor\r\n   * before it is fully depleted.\r\n   *\r\n   * @example\r\n   * ```js\r\n   * const cursor = await db.query(aql`\r\n   *   FOR user IN users\r\n   *   FILTER user.isActive\r\n   *   RETURN user\r\n   * `);\r\n   * for await (const users of cursor.batches) {\r\n   *   for (const user of users) {\r\n   *     console.log(user.email, user.isAdmin);\r\n   *   }\r\n   * }\r\n   * ```\r\n   */\r\n  async *[Symbol.asyncIterator](): AsyncGenerator<\r\n    ItemType[],\r\n    undefined,\r\n    undefined\r\n  > {\r\n    while (this.hasNext) {\r\n      yield this.next() as Promise<ItemType[]>;\r\n    }\r\n    return undefined;\r\n  }\r\n\r\n  /**\r\n   * Loads all remaining batches from the server.\r\n   *\r\n   * **Warning**: This may impact memory use when working with very large\r\n   * query result sets.\r\n   *\r\n   * @example\r\n   * ```js\r\n   * const cursor = await db.query(\r\n   *   aql`FOR x IN 1..5 RETURN x`,\r\n   *   { batchSize: 1 }\r\n   * );\r\n   * console.log(cursor.batches.hasMore); // true\r\n   * await cursor.batches.loadAll();\r\n   * console.log(cursor.batches.hasMore); // false\r\n   * console.log(cursor.hasNext); // true\r\n   * for await (const item of cursor) {\r\n   *   console.log(item);\r\n   *   // No server roundtrips necessary any more\r\n   * }\r\n   * ```\r\n   */\r\n  async loadAll(): Promise<void> {\r\n    while (this._hasMore) {\r\n      await this._more();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Depletes the cursor, then returns an array containing all batches in the\r\n   * cursor's remaining result list.\r\n   *\r\n   * @example\r\n   * ```js\r\n   * const cursor = await db.query(\r\n   *   aql`FOR x IN 1..5 RETURN x`,\r\n   *   { batchSize: 2 }\r\n   * );\r\n   * const result = await cursor.batches.all(); // [[1, 2], [3, 4], [5]]\r\n   * console.log(cursor.hasNext); // false\r\n   * ```\r\n   */\r\n  async all(): Promise<ItemType[][]> {\r\n    return this.map((batch) => batch);\r\n  }\r\n\r\n  /**\r\n   * Advances the cursor and returns all remaining values in the cursor's\r\n   * current batch. If the current batch has already been exhausted, fetches\r\n   * the next batch from the server and returns it, or `undefined` if the\r\n   * cursor has been depleted.\r\n   *\r\n   * **Note**: If the result set spans multiple batches, any remaining batches\r\n   * will only be fetched on demand. Depending on the cursor's TTL and the\r\n   * processing speed, this may result in the server discarding the cursor\r\n   * before it is fully depleted.\r\n   *\r\n   * @example\r\n   * ```js\r\n   * const cursor = await db.query(\r\n   *   aql`FOR i IN 1..10 RETURN i`,\r\n   *   { batchSize: 5 }\r\n   * );\r\n   * const firstBatch = await cursor.batches.next(); // [1, 2, 3, 4, 5]\r\n   * await cursor.next(); // 6\r\n   * const lastBatch = await cursor.batches.next(); // [7, 8, 9, 10]\r\n   * console.log(cursor.hasNext); // false\r\n   * ```\r\n   */\r\n  async next(): Promise<ItemType[] | undefined> {\r\n    while (!this._batches.length && this.hasNext) {\r\n      await this._more();\r\n    }\r\n    if (!this._batches.length) {\r\n      return undefined;\r\n    }\r\n    const batch = this._batches.shift();\r\n    if (!batch) return undefined;\r\n    const values = [...batch.values()];\r\n    batch.clear(true);\r\n    return values;\r\n  }\r\n\r\n  /**\r\n   * Advances the cursor by applying the `callback` function to each item in\r\n   * the cursor's remaining result list until the cursor is depleted or\r\n   * `callback` returns the exact value `false`. Returns a promise that\r\n   * evaluates to `true` unless the function returned `false`.\r\n   *\r\n   * **Note**: If the result set spans multiple batches, any remaining batches\r\n   * will only be fetched on demand. Depending on the cursor's TTL and the\r\n   * processing speed, this may result in the server discarding the cursor\r\n   * before it is fully depleted.\r\n   *\r\n   * See also:\r\n   * [`Array.prototype.forEach`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach).\r\n   *\r\n   * @param callback - Function to execute on each element.\r\n   *\r\n   * @example\r\n   * ```js\r\n   * const cursor = await db.query(\r\n   *   aql`FOR x IN 1..5 RETURN x`,\r\n   *   { batchSize: 2 }\r\n   * );\r\n   * const result = await cursor.batches.forEach((currentBatch) => {\r\n   *   for (const value of currentBatch) {\r\n   *     console.log(value);\r\n   *   }\r\n   * });\r\n   * console.log(result) // true\r\n   * console.log(cursor.hasNext); // false\r\n   * ```\r\n   *\r\n   * @example\r\n   * ```js\r\n   * const cursor = await db.query(\r\n   *   aql`FOR x IN 1..5 RETURN x`,\r\n   *   { batchSize: 2 }\r\n   * );\r\n   * const result = await cursor.batches.forEach((currentBatch) => {\r\n   *   for (const value of currentBatch) {\r\n   *     console.log(value);\r\n   *   }\r\n   *   return false; // stop after the first batch\r\n   * });\r\n   * console.log(result); // false\r\n   * console.log(cursor.hasNext); // true\r\n   * ```\r\n   */\r\n  async forEach(\r\n    callback: (\r\n      currentBatch: ItemType[],\r\n      index: number,\r\n      self: this,\r\n    ) => false | void,\r\n  ): Promise<boolean> {\r\n    let index = 0;\r\n    while (this.hasNext) {\r\n      const currentBatch = await this.next();\r\n      const result = callback(currentBatch!, index, this);\r\n      index++;\r\n      if (result === false) return result;\r\n      if (this.hasNext) await this._more();\r\n    }\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * Depletes the cursor by applying the `callback` function to each batch in\r\n   * the cursor's remaining result list. Returns an array containing the\r\n   * return values of `callback` for each batch.\r\n   *\r\n   * **Note**: This creates an array of all return values, which may impact\r\n   * memory use when working with very large query result sets. Consider using\r\n   * {@link BatchCursor#forEach}, {@link BatchCursor#reduce} or\r\n   * {@link BatchCursor#flatMap} instead.\r\n   *\r\n   * See also:\r\n   * [`Array.prototype.map`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map).\r\n   *\r\n   * @param R - Return type of the `callback` function.\r\n   * @param callback - Function to execute on each element.\r\n   *\r\n   * @example\r\n   * ```js\r\n   * const cursor = await db.query(\r\n   *   aql`FOR x IN 1..5 RETURN x`,\r\n   *   { batchSize: 2 }\r\n   * );\r\n   * const squares = await cursor.batches.map((currentBatch) => {\r\n   *   return currentBatch.map((value) => value ** 2);\r\n   * });\r\n   * console.log(squares); // [[1, 4], [9, 16], [25]]\r\n   * console.log(cursor.hasNext); // false\r\n   * ```\r\n   */\r\n  async map<R>(\r\n    callback: (currentBatch: ItemType[], index: number, self: this) => R,\r\n  ): Promise<R[]> {\r\n    let index = 0;\r\n    const result: any[] = [];\r\n    while (this.hasNext) {\r\n      const currentBatch = await this.next();\r\n      result.push(callback(currentBatch!, index, this));\r\n      index++;\r\n    }\r\n    return result;\r\n  }\r\n\r\n  /**\r\n   * Depletes the cursor by applying the `callback` function to each batch in\r\n   * the cursor's remaining result list. Returns an array containing the\r\n   * return values of `callback` for each batch, flattened to a depth of 1.\r\n   *\r\n   * **Note**: If the result set spans multiple batches, any remaining batches\r\n   * will only be fetched on demand. Depending on the cursor's TTL and the\r\n   * processing speed, this may result in the server discarding the cursor\r\n   * before it is fully depleted.\r\n   *\r\n   * See also:\r\n   * [`Array.prototype.flatMap`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/flatMap).\r\n   *\r\n   * @param R - Return type of the `callback` function.\r\n   * @param callback - Function to execute on each element.\r\n   *\r\n   * @example\r\n   * ```js\r\n   * const cursor = await db.query(\r\n   *   aql`FOR x IN 1..5 RETURN x`,\r\n   *   { batchSize: 2 }\r\n   * );\r\n   * const squares = await cursor.batches.flatMap((currentBatch) => {\r\n   *   return currentBatch.map((value) => value ** 2);\r\n   * });\r\n   * console.log(squares); // [1, 1, 2, 4, 3, 9, 4, 16, 5, 25]\r\n   * console.log(cursor.hasNext); // false\r\n   * ```\r\n   *\r\n   * @example\r\n   * ```js\r\n   * const cursor = await db.query(\r\n   *   aql`FOR x IN 1..5 RETURN x`,\r\n   *   { batchSize: 1 }\r\n   * );\r\n   * const odds = await cursor.batches.flatMap((currentBatch) => {\r\n   *   if (currentBatch[0] % 2 === 0) {\r\n   *     return []; // empty array flattens into nothing\r\n   *   }\r\n   *   return currentBatch;\r\n   * });\r\n   * console.logs(odds); // [1, 3, 5]\r\n   * ```\r\n   */\r\n  async flatMap<R>(\r\n    callback: (currentBatch: ItemType[], index: number, self: this) => R | R[],\r\n  ): Promise<R[]> {\r\n    let index = 0;\r\n    const result: any[] = [];\r\n    while (this.hasNext) {\r\n      const currentBatch = await this.next();\r\n      const value = callback(currentBatch!, index, this);\r\n      if (Array.isArray(value)) {\r\n        result.push(...value);\r\n      } else {\r\n        result.push(value);\r\n      }\r\n      index++;\r\n    }\r\n    return result;\r\n  }\r\n\r\n  /**\r\n   * Depletes the cursor by applying the `reducer` function to each batch in\r\n   * the cursor's remaining result list. Returns the return value of `reducer`\r\n   * for the last batch.\r\n   *\r\n   * **Note**: Most complex uses of the `reduce` method can be replaced with\r\n   * simpler code using {@link BatchCursor#forEach} or the `for await`\r\n   * syntax.\r\n   *\r\n   * **Note**: If the result set spans multiple batches, any remaining batches\r\n   * will only be fetched on demand. Depending on the cursor's TTL and the\r\n   * processing speed, this may result in the server discarding the cursor\r\n   * before it is fully depleted.\r\n   *\r\n   * See also:\r\n   * [`Array.prototype.reduce`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce).\r\n   *\r\n   * @param R - Return type of the `reducer` function.\r\n   * @param reducer - Function to execute on each element.\r\n   * @param initialValue - Initial value of the `accumulator` value passed to\r\n   * the `reducer` function.\r\n   *\r\n   * @example\r\n   * ```js\r\n   * function largestValue(baseline, values) {\r\n   *   return Math.max(baseline, ...values);\r\n   * }\r\n   * const cursor = await db.query(\r\n   *   aql`FOR x IN 1..5 RETURN x`,\r\n   *   { batchSize: 3 }\r\n   * );\r\n   * const result = await cursor.batches.reduce(largestValue, 0);\r\n   * console.log(result); // 5\r\n   * console.log(cursor.hasNext); // false\r\n   * const emptyResult = await cursor.batches.reduce(largestValue, 0);\r\n   * console.log(emptyResult); // 0\r\n   * ```\r\n   *\r\n   * @example\r\n   * ```js\r\n   * // BAD! NEEDLESSLY COMPLEX!\r\n   * const cursor = await db.query(\r\n   *   aql`FOR x IN 1..5 RETURN x`,\r\n   *   { batchSize: 1 }\r\n   * );\r\n   * const result = await cursor.reduce((accumulator, currentBatch) => {\r\n   *   if (currentBatch[0] % 2 === 0) {\r\n   *     accumulator.even.push(...currentBatch);\r\n   *   } else {\r\n   *     accumulator.odd.push(...currentBatch);\r\n   *   }\r\n   *   return accumulator;\r\n   * }, { odd: [], even: [] });\r\n   * console.log(result); // { odd: [1, 3, 5], even: [2, 4] }\r\n   *\r\n   * // GOOD! MUCH SIMPLER!\r\n   * const cursor = await db.query(aql`FOR x IN 1..5 RETURN x`);\r\n   * const odd = [];\r\n   * const even = [];\r\n   * for await (const currentBatch of cursor) {\r\n   *   if (currentBatch[0] % 2 === 0) {\r\n   *     even.push(...currentBatch);\r\n   *   } else {\r\n   *     odd.push(...currentBatch);\r\n   *   }\r\n   * }\r\n   * console.log({ odd, even }); // { odd: [1, 3, 5], even: [2, 4] }\r\n   * ```\r\n   */\r\n  async reduce<R>(\r\n    reducer: (\r\n      accumulator: R,\r\n      currentBatch: ItemType[],\r\n      index: number,\r\n      self: this,\r\n    ) => R,\r\n    initialValue: R,\r\n  ): Promise<R>;\r\n\r\n  /**\r\n   * Depletes the cursor by applying the `reducer` function to each batch in\r\n   * the cursor's remaining result list. Returns the return value of `reducer`\r\n   * for the last batch.\r\n   *\r\n   * **Note**: If the result set spans multiple batches, any remaining batches\r\n   * will only be fetched on demand. Depending on the cursor's TTL and the\r\n   * processing speed, this may result in the server discarding the cursor\r\n   * before it is fully depleted.\r\n   *\r\n   * See also:\r\n   * [`Array.prototype.reduce`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce).\r\n   *\r\n   * @param R - Return type of the `reducer` function.\r\n   * @param reducer - Function to execute on each element.\r\n   *\r\n   * @example\r\n   * ```js\r\n   * function largestValue(values1, values2) {\r\n   *   return [Math.max(...values1, ...values2)];\r\n   * }\r\n   * const cursor = await db.query(\r\n   *   aql`FOR x IN 1..5 RETURN x`,\r\n   *   { batchSize: 3 }\r\n   * );\r\n   * const result = await cursor.batches.reduce(largestValue);\r\n   * console.log(result); // [5]\r\n   * console.log(cursor.hasNext); // false\r\n   * ```\r\n   *\r\n   */\r\n  async reduce<R>(\r\n    reducer: (\r\n      accumulator: ItemType[] | R,\r\n      currentBatch: ItemType[],\r\n      index: number,\r\n      self: this,\r\n    ) => R,\r\n  ): Promise<R | undefined>;\r\n  async reduce<R>(\r\n    reducer: (\r\n      accumulator: R,\r\n      currentBatch: ItemType[],\r\n      index: number,\r\n      self: this,\r\n    ) => R,\r\n    initialValue?: R,\r\n  ): Promise<R | undefined> {\r\n    let index = 0;\r\n    if (!this.hasNext) return initialValue;\r\n    if (initialValue === undefined) {\r\n      initialValue = (await this.next()) as any;\r\n      index += 1;\r\n    }\r\n    let value = initialValue as R;\r\n    while (this.hasNext) {\r\n      const currentBatch = await this.next();\r\n      value = reducer(value, currentBatch!, index, this);\r\n      index++;\r\n    }\r\n    return value;\r\n  }\r\n\r\n  /**\r\n   * Drains the cursor and frees up associated database resources.\r\n   *\r\n   * This method has no effect if all batches have already been consumed.\r\n   *\r\n   * @example\r\n   * ```js\r\n   * const cursor1 = await db.query(aql`FOR x IN 1..5 RETURN x`);\r\n   * console.log(cursor1.batches.hasMore); // false\r\n   * await cursor1.kill(); // no effect\r\n   *\r\n   * const cursor2 = await db.query(\r\n   *   aql`FOR x IN 1..5 RETURN x`,\r\n   *   { batchSize: 2 }\r\n   * );\r\n   * console.log(cursor2.batches.hasMore); // true\r\n   * await cursor2.kill(); // cursor is depleted\r\n   * ```\r\n   */\r\n  async kill(): Promise<void> {\r\n    if (this._batches.length) {\r\n      for (const batch of this._batches.values()) {\r\n        batch.clear();\r\n      }\r\n      this._batches.clear();\r\n    }\r\n    if (!this.hasNext) return undefined;\r\n    return this._db.request(\r\n      {\r\n        method: \"DELETE\",\r\n        pathname: `/_api/cursor/${encodeURIComponent(this._id!)}`,\r\n      },\r\n      () => {\r\n        this._hasMore = false;\r\n        return undefined;\r\n      },\r\n    );\r\n  }\r\n}\r\n\r\n/**\r\n * The `Cursor` type represents a cursor returned from a\r\n * {@link databases.Database#query}.\r\n *\r\n * When using TypeScript, cursors can be cast to a specific item type in order\r\n * to increase type safety.\r\n *\r\n * See also {@link BatchCursor}.\r\n *\r\n * @param ItemType - Type to use for each item. Defaults to `any`.\r\n *\r\n * @example\r\n * ```ts\r\n * const db = new Database();\r\n * const query = aql`FOR x IN 1..5 RETURN x`;\r\n * const result = await db.query(query) as Cursor<number>;\r\n * ```\r\n *\r\n * @example\r\n * ```js\r\n * const db = new Database();\r\n * const query = aql`FOR x IN 1..10 RETURN x`;\r\n * const cursor = await db.query(query);\r\n * for await (const value of cursor) {\r\n *   // Process each value asynchronously\r\n *   await processValue(value);\r\n * }\r\n * ```\r\n */\r\nexport class Cursor<ItemType = any> {\r\n  protected _batches: BatchCursor<ItemType>;\r\n  protected _view: BatchCursorItemsView<ItemType>;\r\n\r\n  /**\r\n   * @internal\r\n   */\r\n  constructor(\r\n    batchedCursor: BatchCursor,\r\n    view: BatchCursorItemsView<ItemType>,\r\n  ) {\r\n    this._batches = batchedCursor;\r\n    this._view = view;\r\n  }\r\n\r\n  /**\r\n   * Database this cursor belongs to.\r\n   */\r\n  get database() {\r\n    return this._batches.database;\r\n  }\r\n\r\n  /**\r\n   * ID of this cursor.\r\n   */\r\n  get id() {\r\n    return this._batches.id;\r\n  }\r\n\r\n  /**\r\n   * A {@link BatchCursor} providing batch-wise access to the cursor\r\n   * result set.\r\n   *\r\n   * See also {@link BatchCursor#items}.\r\n   */\r\n  get batches() {\r\n    return this._batches;\r\n  }\r\n\r\n  /**\r\n   * Additional information about the cursor.\r\n   */\r\n  get extra(): CursorExtras {\r\n    return this.batches.extra;\r\n  }\r\n\r\n  /**\r\n   * Total number of documents in the query result. Only available if the\r\n   * `count` option was used.\r\n   */\r\n  get count(): number | undefined {\r\n    return this.batches.count;\r\n  }\r\n\r\n  /**\r\n   * Whether the cursor has more values. If set to `false`, the cursor has\r\n   * already been depleted and contains no more items.\r\n   */\r\n  get hasNext(): boolean {\r\n    return this.batches.hasNext;\r\n  }\r\n\r\n  /**\r\n   * Enables use with `for await` to deplete the cursor by asynchronously\r\n   * yielding every value in the cursor's remaining result set.\r\n   *\r\n   * **Note**: If the result set spans multiple batches, any remaining batches\r\n   * will only be fetched on demand. Depending on the cursor's TTL and the\r\n   * processing speed, this may result in the server discarding the cursor\r\n   * before it is fully depleted.\r\n   *\r\n   * @example\r\n   * ```js\r\n   * const cursor = await db.query(aql`\r\n   *   FOR user IN users\r\n   *   FILTER user.isActive\r\n   *   RETURN user\r\n   * `);\r\n   * for await (const user of cursor) {\r\n   *   console.log(user.email, user.isAdmin);\r\n   * }\r\n   * ```\r\n   */\r\n  async *[Symbol.asyncIterator](): AsyncGenerator<\r\n    ItemType,\r\n    undefined,\r\n    undefined\r\n  > {\r\n    while (this.hasNext) {\r\n      yield this.next() as Promise<ItemType>;\r\n    }\r\n    return undefined;\r\n  }\r\n\r\n  /**\r\n   * Depletes the cursor, then returns an array containing all values in the\r\n   * cursor's remaining result list.\r\n   *\r\n   * @example\r\n   * ```js\r\n   * const cursor = await db.query(aql`FOR x IN 1..5 RETURN x`);\r\n   * const result = await cursor.all(); // [1, 2, 3, 4, 5]\r\n   * console.log(cursor.hasNext); // false\r\n   * ```\r\n   */\r\n  async all(): Promise<ItemType[]> {\r\n    return this.batches.flatMap((v) => v);\r\n  }\r\n\r\n  /**\r\n   * Advances the cursor and returns the next value in the cursor's remaining\r\n   * result list, or `undefined` if the cursor has been depleted.\r\n   *\r\n   * **Note**: If the result set spans multiple batches, any remaining batches\r\n   * will only be fetched on demand. Depending on the cursor's TTL and the\r\n   * processing speed, this may result in the server discarding the cursor\r\n   * before it is fully depleted.\r\n   *\r\n   * @example\r\n   * ```js\r\n   * const cursor = await db.query(aql`FOR x IN 1..3 RETURN x`);\r\n   * const one = await cursor.next(); // 1\r\n   * const two = await cursor.next(); // 2\r\n   * const three = await cursor.next(); // 3\r\n   * const empty = await cursor.next(); // undefined\r\n   * ```\r\n   */\r\n  async next(): Promise<ItemType | undefined> {\r\n    while (this._view.isEmpty && this.batches.hasMore) {\r\n      await this._view.more();\r\n    }\r\n    if (this._view.isEmpty) {\r\n      return undefined;\r\n    }\r\n    return this._view.shift();\r\n  }\r\n\r\n  /**\r\n   * Advances the cursor by applying the `callback` function to each item in\r\n   * the cursor's remaining result list until the cursor is depleted or\r\n   * `callback` returns the exact value `false`. Returns a promise that\r\n   * evalues to `true` unless the function returned `false`.\r\n   *\r\n   * **Note**: If the result set spans multiple batches, any remaining batches\r\n   * will only be fetched on demand. Depending on the cursor's TTL and the\r\n   * processing speed, this may result in the server discarding the cursor\r\n   * before it is fully depleted.\r\n   *\r\n   * See also:\r\n   * [`Array.prototype.forEach`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach).\r\n   *\r\n   * @param callback - Function to execute on each element.\r\n   *\r\n   * @example\r\n   * ```js\r\n   * const cursor = await db.query(aql`FOR x IN 1..5 RETURN x`);\r\n   * const result = await cursor.forEach((currentValue) => {\r\n   *   console.log(currentValue);\r\n   * });\r\n   * console.log(result) // true\r\n   * console.log(cursor.hasNext); // false\r\n   * ```\r\n   *\r\n   * @example\r\n   * ```js\r\n   * const cursor = await db.query(aql`FOR x IN 1..5 RETURN x`);\r\n   * const result = await cursor.forEach((currentValue) => {\r\n   *   console.log(currentValue);\r\n   *   return false; // stop after the first item\r\n   * });\r\n   * console.log(result); // false\r\n   * console.log(cursor.hasNext); // true\r\n   * ```\r\n   */\r\n  async forEach(\r\n    callback: (\r\n      currentValue: ItemType,\r\n      index: number,\r\n      self: this,\r\n    ) => false | void,\r\n  ): Promise<boolean> {\r\n    let index = 0;\r\n    while (this.hasNext) {\r\n      const value = await this.next();\r\n      const result = callback(value!, index, this);\r\n      index++;\r\n      if (result === false) return result;\r\n    }\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * Depletes the cursor by applying the `callback` function to each item in\r\n   * the cursor's remaining result list. Returns an array containing the\r\n   * return values of `callback` for each item.\r\n   *\r\n   * **Note**: This creates an array of all return values, which may impact\r\n   * memory use when working with very large query result sets. Consider using\r\n   * {@link Cursor#forEach}, {@link Cursor#reduce} or\r\n   * {@link Cursor#flatMap} instead.\r\n   *\r\n   * See also:\r\n   * [`Array.prototype.map`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map).\r\n   *\r\n   * @param R - Return type of the `callback` function.\r\n   * @param callback - Function to execute on each element.\r\n   *\r\n   * @example\r\n   * ```js\r\n   * const cursor = await db.query(aql`FOR x IN 1..5 RETURN x`);\r\n   * const squares = await cursor.map((currentValue) => {\r\n   *   return currentValue ** 2;\r\n   * });\r\n   * console.log(squares); // [1, 4, 9, 16, 25]\r\n   * console.log(cursor.hasNext); // false\r\n   * ```\r\n   */\r\n  async map<R>(\r\n    callback: (currentValue: ItemType, index: number, self: this) => R,\r\n  ): Promise<R[]> {\r\n    let index = 0;\r\n    const result: any[] = [];\r\n    while (this.hasNext) {\r\n      const value = await this.next();\r\n      result.push(callback(value!, index, this));\r\n      index++;\r\n    }\r\n    return result;\r\n  }\r\n\r\n  /**\r\n   * Depletes the cursor by applying the `callback` function to each item in\r\n   * the cursor's remaining result list. Returns an array containing the\r\n   * return values of `callback` for each item, flattened to a depth of 1.\r\n   *\r\n   * **Note**: If the result set spans multiple batches, any remaining batches\r\n   * will only be fetched on demand. Depending on the cursor's TTL and the\r\n   * processing speed, this may result in the server discarding the cursor\r\n   * before it is fully depleted.\r\n   *\r\n   * See also:\r\n   * [`Array.prototype.flatMap`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/flatMap).\r\n   *\r\n   * @param R - Return type of the `callback` function.\r\n   * @param callback - Function to execute on each element.\r\n   *\r\n   * @example\r\n   * ```js\r\n   * const cursor = await db.query(aql`FOR x IN 1..5 RETURN x`);\r\n   * const squares = await cursor.flatMap((currentValue) => {\r\n   *   return [currentValue, currentValue ** 2];\r\n   * });\r\n   * console.log(squares); // [1, 1, 2, 4, 3, 9, 4, 16, 5, 25]\r\n   * console.log(cursor.hasNext); // false\r\n   * ```\r\n   *\r\n   * @example\r\n   * ```js\r\n   * const cursor = await db.query(aql`FOR x IN 1..5 RETURN x`);\r\n   * const odds = await cursor.flatMap((currentValue) => {\r\n   *   if (currentValue % 2 === 0) {\r\n   *     return []; // empty array flattens into nothing\r\n   *   }\r\n   *   return currentValue; // or [currentValue]\r\n   * });\r\n   * console.logs(odds); // [1, 3, 5]\r\n   * ```\r\n   */\r\n  async flatMap<R>(\r\n    callback: (currentValue: ItemType, index: number, self: this) => R | R[],\r\n  ): Promise<R[]> {\r\n    let index = 0;\r\n    const result: any[] = [];\r\n    while (this.hasNext) {\r\n      const value = await this.next();\r\n      const item = callback(value!, index, this);\r\n      if (Array.isArray(item)) {\r\n        result.push(...item);\r\n      } else {\r\n        result.push(item);\r\n      }\r\n      index++;\r\n    }\r\n    return result;\r\n  }\r\n\r\n  /**\r\n   * Depletes the cursor by applying the `reducer` function to each item in\r\n   * the cursor's remaining result list. Returns the return value of `reducer`\r\n   * for the last item.\r\n   *\r\n   * **Note**: Most complex uses of the `reduce` method can be replaced with\r\n   * simpler code using {@link Cursor#forEach} or the `for await` syntax.\r\n   *\r\n   * **Note**: If the result set spans multiple batches, any remaining batches\r\n   * will only be fetched on demand. Depending on the cursor's TTL and the\r\n   * processing speed, this may result in the server discarding the cursor\r\n   * before it is fully depleted.\r\n   *\r\n   * See also:\r\n   * [`Array.prototype.reduce`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce).\r\n   *\r\n   * @param R - Return type of the `reducer` function.\r\n   * @param reducer - Function to execute on each element.\r\n   * @param initialValue - Initial value of the `accumulator` value passed to\r\n   * the `reducer` function.\r\n   *\r\n   * @example\r\n   * ```js\r\n   * function largestOfTwo(one, two) {\r\n   *   return Math.max(one, two);\r\n   * }\r\n   * const cursor = await db.query(aql`FOR x IN 1..5 RETURN x`);\r\n   * const result = await cursor.reduce(largestOfTwo, 0);\r\n   * console.log(result); // 5\r\n   * console.log(cursor.hasNext); // false\r\n   * const emptyResult = await cursor.reduce(largestOfTwo, 0);\r\n   * console.log(emptyResult); // 0\r\n   * ```\r\n   *\r\n   * @example\r\n   * ```js\r\n   * // BAD! NEEDLESSLY COMPLEX!\r\n   * const cursor = await db.query(aql`FOR x IN 1..5 RETURN x`);\r\n   * const result = await cursor.reduce((accumulator, currentValue) => {\r\n   *   if (currentValue % 2 === 0) {\r\n   *     accumulator.even.push(...currentValue);\r\n   *   } else {\r\n   *     accumulator.odd.push(...currentValue);\r\n   *   }\r\n   *   return accumulator;\r\n   * }, { odd: [], even: [] });\r\n   * console.log(result); // { odd: [1, 3, 5], even: [2, 4] }\r\n   *\r\n   * // GOOD! MUCH SIMPLER!\r\n   * const cursor = await db.query(aql`FOR x IN 1..5 RETURN x`);\r\n   * const odd = [];\r\n   * const even = [];\r\n   * for await (const currentValue of cursor) {\r\n   *   if (currentValue % 2 === 0) {\r\n   *     even.push(currentValue);\r\n   *   } else {\r\n   *     odd.push(currentValue);\r\n   *   }\r\n   * }\r\n   * console.log({ odd, even }); // { odd: [1, 3, 5], even: [2, 4] }\r\n   * ```\r\n   */\r\n  async reduce<R>(\r\n    reducer: (\r\n      accumulator: R,\r\n      currentValue: ItemType,\r\n      index: number,\r\n      self: this,\r\n    ) => R,\r\n    initialValue: R,\r\n  ): Promise<R>;\r\n  /**\r\n   * Depletes the cursor by applying the `reducer` function to each item in\r\n   * the cursor's remaining result list. Returns the return value of `reducer`\r\n   * for the last item.\r\n   *\r\n   * **Note**: If the result set spans multiple batches, any remaining batches\r\n   * will only be fetched on demand. Depending on the cursor's TTL and the\r\n   * processing speed, this may result in the server discarding the cursor\r\n   * before it is fully depleted.\r\n   *\r\n   * See also:\r\n   * [`Array.prototype.reduce`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce).\r\n   *\r\n   * @param R - Return type of the `reducer` function.\r\n   * @param reducer - Function to execute on each element.\r\n   *\r\n   * @example\r\n   * ```js\r\n   * function largestOfTwo(one, two) {\r\n   *   return Math.max(one, two);\r\n   * }\r\n   * const cursor = await db.query(aql`FOR x IN 1..5 RETURN x`);\r\n   * const result = await cursor.reduce(largestOfTwo);\r\n   * console.log(result); // 5\r\n   * console.log(cursor.hasNext); // false\r\n   * const emptyResult = await cursor.reduce(largestOfTwo);\r\n   * console.log(emptyResult); // undefined\r\n   * ```\r\n   */\r\n  async reduce<R>(\r\n    reducer: (\r\n      accumulator: ItemType | R,\r\n      currentValue: ItemType,\r\n      index: number,\r\n      self: this,\r\n    ) => R,\r\n  ): Promise<R | undefined>;\r\n  async reduce<R>(\r\n    reducer: (\r\n      accumulator: R,\r\n      currentValue: ItemType,\r\n      index: number,\r\n      self: this,\r\n    ) => R,\r\n    initialValue?: R,\r\n  ): Promise<R | undefined> {\r\n    let index = 0;\r\n    if (!this.hasNext) return initialValue;\r\n    if (initialValue === undefined) {\r\n      const value = (await this.next()) as any;\r\n      initialValue = value as R;\r\n      index += 1;\r\n    }\r\n    let value = initialValue;\r\n    while (this.hasNext) {\r\n      const item = await this.next();\r\n      value = reducer(value, item!, index, this);\r\n      index++;\r\n    }\r\n    return value;\r\n  }\r\n\r\n  /**\r\n   * Kills the cursor and frees up associated database resources.\r\n   *\r\n   * This method has no effect if all batches have already been fetched.\r\n   *\r\n   * @example\r\n   * ```js\r\n   * const cursor1 = await db.query(aql`FOR x IN 1..5 RETURN x`);\r\n   * console.log(cursor1.batches.hasMore); // false\r\n   * await cursor1.kill(); // no effect\r\n   *\r\n   * const cursor2 = await db.query(\r\n   *   aql`FOR x IN 1..5 RETURN x`,\r\n   *   { batchSize: 2 }\r\n   * );\r\n   * console.log(cursor2.batches.hasMore); // true\r\n   * await cursor2.kill(); // cursor is depleted\r\n   * ```\r\n   */\r\n  async kill(): Promise<void> {\r\n    return this.batches.kill();\r\n  }\r\n}\r\n"]}