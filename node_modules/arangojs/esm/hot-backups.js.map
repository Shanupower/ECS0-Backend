{"version":3,"file":"hot-backups.js","sourceRoot":"","sources":["../../src/hot-backups.ts"],"names":[],"mappings":"AAAA;;;;;;;;GAQG","sourcesContent":["/**\r\n * ```ts\r\n * import type { HotBackupOptions } from \"arangojs/hot-backups\";\r\n * ```\r\n *\r\n * The \"hot-backups\" module provides types for managing hot backups.\r\n *\r\n * @packageDocumentation\r\n */\r\n\r\n/**\r\n * (Enterprise Edition only.) Options for creating a hot backup.\r\n */\r\nexport type HotBackupOptions = {\r\n  /**\r\n   * If set to `true` and no global transaction lock can be acquired within the\r\n   * given timeout, a possibly inconsistent backup is taken.\r\n   *\r\n   * Default: `false`\r\n   */\r\n  allowInconsistent?: boolean;\r\n  /**\r\n   * (Enterprise Edition cluster only.) If set to `true` and no global\r\n   * transaction lock can be acquired within the given timeout, all running\r\n   * transactions are forcefully aborted to ensure that a consistent backup\r\n   * can be created.\r\n   *\r\n   * Default: `false`.\r\n   */\r\n  force?: boolean;\r\n  /**\r\n   * Label to appended to the backup's identifier.\r\n   *\r\n   * Default: If omitted or empty, a UUID will be generated.\r\n   */\r\n  label?: string;\r\n  /**\r\n   * Time in seconds that the operation will attempt to get a consistent\r\n   * snapshot.\r\n   *\r\n   * Default: `120`.\r\n   */\r\n  timeout?: number;\r\n};\r\n\r\n/**\r\n * (Enterprise Edition only.) Result of a hot backup.\r\n */\r\nexport type HotBackupResult = {\r\n  id: string;\r\n  potentiallyInconsistent: boolean;\r\n  sizeInBytes: number;\r\n  datetime: string;\r\n  nrDBServers: number;\r\n  nrFiles: number;\r\n};\r\n\r\n/**\r\n * (Enterprise Edition only.) List of known hot backups.\r\n */\r\nexport type HotBackupList = {\r\n  server: string;\r\n  list: Record<\r\n    string,\r\n    HotBackupResult & {\r\n      version: string;\r\n      keys: any[];\r\n      available: boolean;\r\n      nrPiecesPresent: number;\r\n      countIncludesFilesOnly: boolean;\r\n    }\r\n  >;\r\n};\r\n"]}