{"version":3,"file":"queries.js","sourceRoot":"","sources":["../../src/queries.ts"],"names":[],"mappings":"AAAA;;;;;;;;GAQG;AACH,8CAA8C;;AA8lB9C,YAAY","sourcesContent":["/**\r\n * ```ts\r\n * import type { QueryOptions } from \"arangojs/queries\";\r\n * ```\r\n *\r\n * The \"query\" module provides query related types for TypeScript.\r\n *\r\n * @packageDocumentation\r\n */\r\n/** @import databases from \"./databases.js\" */\r\n\r\n//#region Query operation options\r\n/**\r\n * Options for executing a query.\r\n *\r\n * See {@link databases.Database#query}.\r\n */\r\nexport type QueryOptions = {\r\n  /**\r\n   * If set to `true`, the query will be executed with support for dirty reads\r\n   * enabled, permitting ArangoDB to return a potentially dirty or stale result\r\n   * and arangojs will load balance the request without distinguishing between\r\n   * leaders and followers.\r\n   *\r\n   * Note that dirty reads are only supported for read-only queries, not data\r\n   * modification queries (e.g. using `INSERT`, `UPDATE`, `REPLACE` or\r\n   * `REMOVE`) and only when using ArangoDB 3.4 or later.\r\n   *\r\n   * Default: `false`\r\n   */\r\n  allowDirtyRead?: boolean;\r\n  /**\r\n   * If set to `true`, cursor results will be stored by ArangoDB in such a way\r\n   * that batch reads can be retried in the case of a communication error.\r\n   *\r\n   * Default: `false`\r\n   */\r\n  allowRetry?: boolean;\r\n  /**\r\n   * Maximum time in milliseconds arangojs will wait for a server response.\r\n   * Exceeding this value will result in the request being cancelled.\r\n   *\r\n   * **Note**: Setting a timeout for the client does not guarantee the query\r\n   * will be killed by ArangoDB if it is already being executed. See the\r\n   * `maxRuntime` option for limiting the execution time within ArangoDB.\r\n   */\r\n  timeout?: number;\r\n  /**\r\n   * If set to a positive number, the query will automatically be retried at\r\n   * most this many times if it results in a write-write conflict.\r\n   *\r\n   * Default: `0`\r\n   */\r\n  retryOnConflict?: number;\r\n  /**\r\n   * Unless set to `false`, the number of result values in the result set will\r\n   * be returned in the `count` attribute. This may be disabled by default in\r\n   * a future version of ArangoDB if calculating this value has a performance\r\n   * impact for some queries.\r\n   *\r\n   * Default: `true`.\r\n   */\r\n  count?: boolean;\r\n  /**\r\n   * Number of result values to be transferred by the server in each\r\n   * network roundtrip (or \"batch\").\r\n   *\r\n   * Must be greater than zero.\r\n   */\r\n  batchSize?: number;\r\n  /**\r\n   * If set to `false`, the AQL query results cache lookup will be skipped for\r\n   * this query.\r\n   *\r\n   * Default: `true`\r\n   */\r\n  cache?: boolean;\r\n  /**\r\n   * Maximum memory size in bytes that the query is allowed to use.\r\n   * Exceeding this value will result in the query failing with an error.\r\n   *\r\n   * If set to `0`, the memory limit is disabled.\r\n   *\r\n   * Default: `0`\r\n   */\r\n  memoryLimit?: number;\r\n  /**\r\n   * Maximum allowed execution time before the query will be killed in seconds.\r\n   *\r\n   * If set to `0`, the query will be allowed to run indefinitely.\r\n   *\r\n   * Default: `0`\r\n   */\r\n  maxRuntime?: number;\r\n  /**\r\n   * Time-to-live for the cursor in seconds. The cursor results may be\r\n   * garbage collected by ArangoDB after this much time has passed.\r\n   *\r\n   * Default: `30`\r\n   */\r\n  ttl?: number;\r\n  /**\r\n   * If set to `true`, the query will throw an exception and abort if it would\r\n    otherwise produce a warning.\r\n   */\r\n  failOnWarning?: boolean;\r\n  /**\r\n   * If set to `1` or `true`, additional query profiling information will be\r\n   * returned in the `extra.profile` attribute if the query is not served from\r\n   * the result cache.\r\n   *\r\n   * If set to `2`, the query will return execution stats per query plan node\r\n   * in the `extra.stats.nodes` attribute. Additionally the query plan is\r\n   * returned in `extra.plan`.\r\n   */\r\n  profile?: boolean | number;\r\n  /**\r\n   * If set to `true`, the query will be executed as a streaming query.\r\n   */\r\n  stream?: boolean;\r\n  /**\r\n   * Limits the maximum number of warnings a query will return.\r\n   */\r\n  maxWarningsCount?: number;\r\n  /**\r\n   * If set to `true` and the query has a `LIMIT` clause, the total number of\r\n   * values matched before the last top-level `LIMIT` in the query was applied\r\n   * will be returned in the `extra.stats.fullCount` attribute.\r\n   */\r\n  fullCount?: boolean;\r\n  /**\r\n   * If set to `false`, the query data will not be stored in the RocksDB block\r\n   * cache. This can be used to avoid thrashing he block cache when reading a\r\n   * lot of data.\r\n   */\r\n  fillBlockCache?: boolean;\r\n  /**\r\n   * An object with a `rules` property specifying a list of optimizer rules to\r\n   * be included or excluded by the optimizer for this query. Prefix a rule\r\n   * name with `+` to include it, or `-` to exclude it. The name `all` acts as\r\n   * an alias matching all optimizer rules.\r\n   */\r\n  optimizer?: { rules: string[] };\r\n  /**\r\n   * Limits the maximum number of plans that will be created by the AQL query\r\n   * optimizer.\r\n   */\r\n  maxPlans?: number;\r\n  /**\r\n   * Controls after how many execution nodes in a query a stack split should be\r\n   * performed.\r\n   *\r\n   * Default: `250` (`200` on macOS)\r\n   */\r\n  maxNodesPerCallstack?: number;\r\n  /**\r\n   * Maximum size of transactions in bytes.\r\n   */\r\n  maxTransactionSize?: number;\r\n  /**\r\n   * Maximum number of operations after which an intermediate commit is\r\n   * automatically performed.\r\n   */\r\n  intermediateCommitCount?: number;\r\n  /**\r\n   * Maximum total size of operations in bytes after which an intermediate\r\n   * commit is automatically performed.\r\n   */\r\n  intermediateCommitSize?: number;\r\n  /**\r\n   * (Enterprise Edition cluster only.) If set to `true`, collections\r\n   * inaccessible to current user will result in an access error instead\r\n   * of being treated as empty.\r\n   */\r\n  skipInaccessibleCollections?: boolean;\r\n  /**\r\n   * (Enterprise Edition cluster only.) Limits the maximum time in seconds a\r\n   * DBServer will wait to bring satellite collections involved in the query\r\n   * into sync. Exceeding this value will result in the query being stopped.\r\n   *\r\n   * Default: `60`\r\n   */\r\n  satelliteSyncWait?: number;\r\n};\r\n\r\n/**\r\n * Options for explaining a query.\r\n *\r\n * See {@link databases.Database#explain}.\r\n */\r\nexport type ExplainOptions = {\r\n  /**\r\n   * An object with a `rules` property specifying a list of optimizer rules to\r\n   * be included or excluded by the optimizer for this query. Prefix a rule\r\n   * name with `+` to include it, or `-` to exclude it. The name `all` acts as\r\n   * an alias matching all optimizer rules.\r\n   */\r\n  optimizer?: { rules: string[] };\r\n  /**\r\n   * Maximum number of plans that the optimizer is allowed to generate.\r\n   * Setting this to a low value limits the amount of work the optimizer does.\r\n   */\r\n  maxNumberOfPlans?: number;\r\n  /**\r\n   * If set to true, all possible execution plans will be returned as the\r\n   * `plans` property. Otherwise only the optimal execution plan will be\r\n   * returned as the `plan` property.\r\n   *\r\n   * Default: `false`\r\n   */\r\n  allPlans?: boolean;\r\n};\r\n\r\n/**\r\n * Options for query tracking.\r\n *\r\n * See {@link databases.Database#queryTracking}.\r\n */\r\nexport type QueryTrackingOptions = {\r\n  /**\r\n   * If set to `false`, neither queries nor slow queries will be tracked.\r\n   */\r\n  enabled?: boolean;\r\n  /**\r\n   * Maximum query string length in bytes that will be kept in the list.\r\n   */\r\n  maxQueryStringLength?: number;\r\n  /**\r\n   * Maximum number of slow queries to be kept in the list.\r\n   */\r\n  maxSlowQueries?: number;\r\n  /**\r\n   * Threshold execution time in seconds for when a query will be\r\n   * considered slow.\r\n   */\r\n  slowQueryThreshold?: number;\r\n  /**\r\n   * If set to `true`, bind parameters will be tracked along with queries.\r\n   */\r\n  trackBindVars?: boolean;\r\n  /**\r\n   * If set to `true` and `enabled` is also set to `true`, slow queries will be\r\n   * tracked if their execution time exceeds `slowQueryThreshold`.\r\n   */\r\n  trackSlowQueries?: boolean;\r\n};\r\n\r\n/**\r\n * Options for adjusting the global properties for the AQL query results cache.\r\n */\r\nexport type QueryCachePropertiesOptions = {\r\n  /**\r\n   * If set to `true`, the query cache will include queries that involve\r\n   * system collections.\r\n   */\r\n  includeSystem?: boolean;\r\n  /**\r\n   * Maximum individual size of query results that will be stored per\r\n   * database-specific cache.\r\n   */\r\n  maxEntrySize?: number;\r\n  /**\r\n   * Maximum number of query results that will be stored per database-specific\r\n   * cache.\r\n   */\r\n  maxResults?: number;\r\n  /**\r\n   * Maximum cumulated size of query results that will be stored per\r\n   * database-specific cache.\r\n   */\r\n  maxResultsSize?: number;\r\n  /**\r\n   * Mode the AQL query cache should operate in.\r\n   */\r\n  mode?: \"off\" | \"on\" | \"demand\";\r\n};\r\n//#endregion\r\n\r\n//#region Query operation results\r\n/**\r\n * Result of explaining a query with a single plan.\r\n */\r\nexport type SingleExplainResult = {\r\n  /**\r\n   * Query plan.\r\n   */\r\n  plan: ExplainPlan;\r\n  /**\r\n   * Whether it would be possible to cache the query.\r\n   */\r\n  cacheable: boolean;\r\n  /**\r\n   * Warnings encountered while planning the query execution.\r\n   */\r\n  warnings: { code: number; message: string }[];\r\n  /**\r\n   * Optimizer statistics for the explained query.\r\n   */\r\n  stats: ExplainStats;\r\n};\r\n\r\n/**\r\n * Result of explaining a query with multiple plans.\r\n */\r\nexport type MultiExplainResult = {\r\n  /**\r\n   * Query plans.\r\n   */\r\n  plans: ExplainPlan[];\r\n  /**\r\n   * Whether it would be possible to cache the query.\r\n   */\r\n  cacheable: boolean;\r\n  /**\r\n   * Warnings encountered while planning the query execution.\r\n   */\r\n  warnings: { code: number; message: string }[];\r\n  /**\r\n   * Optimizer statistics for the explained query.\r\n   */\r\n  stats: ExplainStats;\r\n};\r\n\r\n/**\r\n * Plan explaining query execution.\r\n */\r\nexport type ExplainPlan = {\r\n  /**\r\n   * Execution nodes in this plan.\r\n   */\r\n  nodes: {\r\n    [key: string]: any;\r\n    type: string;\r\n    id: number;\r\n    dependencies: number[];\r\n    estimatedCost: number;\r\n    estimatedNrItems: number;\r\n  }[];\r\n  /**\r\n   * Rules applied by the optimizer.\r\n   */\r\n  rules: string[];\r\n  /**\r\n   * Information about collections involved in the query.\r\n   */\r\n  collections: {\r\n    name: string;\r\n    type: \"read\" | \"write\";\r\n  }[];\r\n  /**\r\n   * Variables used in the query.\r\n   */\r\n  variables: {\r\n    id: number;\r\n    name: string;\r\n  }[];\r\n  /**\r\n   * Total estimated cost of the plan.\r\n   */\r\n  estimatedCost: number;\r\n  /**\r\n   * Estimated number of items returned by the query.\r\n   */\r\n  estimatedNrItems: number;\r\n  /**\r\n   * Whether the query is a data modification query.\r\n   */\r\n  isModificationQuery: boolean;\r\n};\r\n\r\n/**\r\n * Optimizer statistics for an explained query.\r\n */\r\nexport type ExplainStats = {\r\n  /**\r\n   * Total number of rules executed for this query.\r\n   */\r\n  rulesExecuted: number;\r\n  /**\r\n   * Number of rules skipped for this query.\r\n   */\r\n  rulesSkipped: number;\r\n  /**\r\n   * Total number of plans created.\r\n   */\r\n  plansCreated: number;\r\n  /**\r\n   * Maximum memory usage in bytes of the query during explain.\r\n   */\r\n  peakMemoryUsage: number;\r\n  /**\r\n   * Time in seconds needed to explain the query.\r\n   */\r\n  executionTime: number;\r\n};\r\n\r\n/**\r\n * Result of parsing a query.\r\n */\r\nexport type ParseResult = {\r\n  /**\r\n   * Whether the query was parsed.\r\n   */\r\n  parsed: boolean;\r\n  /**\r\n   * Names of all collections involved in the query.\r\n   */\r\n  collections: string[];\r\n  /**\r\n   * Names of all bind parameters used in the query.\r\n   */\r\n  bindVars: string[];\r\n  /**\r\n   * Abstract syntax tree (AST) of the query.\r\n   */\r\n  ast: AstNode[];\r\n};\r\n\r\n/**\r\n * Node in an AQL abstract syntax tree (AST).\r\n */\r\nexport type AstNode = {\r\n  [key: string]: any;\r\n  type: string;\r\n  subNodes: AstNode[];\r\n};\r\n\r\n/**\r\n * Optimizer rule for AQL queries.\r\n */\r\nexport type QueryOptimizerRule = {\r\n  name: string;\r\n  flags: {\r\n    hidden: boolean;\r\n    clusterOnly: boolean;\r\n    canBeDisabled: boolean;\r\n    canCreateAdditionalPlans: boolean;\r\n    disabledByDefault: boolean;\r\n    enterpriseOnly: boolean;\r\n  };\r\n};\r\n\r\n/**\r\n * Information about query tracking.\r\n */\r\nexport type QueryTrackingInfo = {\r\n  /**\r\n   * Whether query tracking is enabled.\r\n   */\r\n  enabled: boolean;\r\n  /**\r\n   * Maximum query string length in bytes that is kept in the list.\r\n   */\r\n  maxQueryStringLength: number;\r\n  /**\r\n   * Maximum number of slow queries that is kept in the list.\r\n   */\r\n  maxSlowQueries: number;\r\n  /**\r\n   * Threshold execution time in seconds for when a query is\r\n   * considered slow.\r\n   */\r\n  slowQueryThreshold: number;\r\n  /**\r\n   * Whether bind parameters are being tracked along with queries.\r\n   */\r\n  trackBindVars: boolean;\r\n  /**\r\n   * Whether slow queries are being tracked.\r\n   */\r\n  trackSlowQueries: boolean;\r\n};\r\n\r\n/**\r\n * Entry in the AQL query results cache.\r\n */\r\nexport type QueryCacheEntry = {\r\n  /**\r\n   * Hash of the query results.\r\n   */\r\n  hash: string;\r\n  /**\r\n   * Query string.\r\n   */\r\n  query: string;\r\n  /**\r\n   * Bind parameters used in the query. Only shown if tracking for bind\r\n   * variables was enabled at server start.\r\n   */\r\n  bindVars: Record<string, any>;\r\n  /**\r\n   * Size of the query results and bind parameters in bytes.\r\n   */\r\n  size: number;\r\n  /**\r\n   * Number of documents/rows in the query results.\r\n   */\r\n  results: number;\r\n  /**\r\n   * Date and time the query was started as an ISO 8601 timestamp.\r\n   */\r\n  started: string;\r\n  /**\r\n   * Number of times the result was served from the cache.\r\n   */\r\n  hits: number;\r\n  /**\r\n   * Running time of the query in seconds.\r\n   */\r\n  runTime: number;\r\n  /**\r\n   * Collections and views involved in the query.\r\n   */\r\n  dataSources: string[];\r\n};\r\n\r\n/**\r\n * Properties of the global AQL query results cache configuration.\r\n */\r\nexport type QueryCacheProperties = {\r\n  /**\r\n   * If set to `true`, the query cache will include queries that involve\r\n   * system collections.\r\n   */\r\n  includeSystem: boolean;\r\n  /**\r\n   * Maximum individual size of query results that will be stored per\r\n   * database-specific cache.\r\n   */\r\n  maxEntrySize: number;\r\n  /**\r\n   * Maximum number of query results that will be stored per database-specific\r\n   * cache.\r\n   */\r\n  maxResults: number;\r\n  /**\r\n   * Maximum cumulated size of query results that will be stored per\r\n   * database-specific cache.\r\n   */\r\n  maxResultsSize: number;\r\n  /**\r\n   * Mode the AQL query cache should operate in.\r\n   */\r\n  mode: \"off\" | \"on\" | \"demand\";\r\n};\r\n//#endregion\r\n\r\n//#region QueryDescription\r\n/**\r\n * Object describing a query.\r\n */\r\nexport type QueryDescription = {\r\n  /**\r\n   * Unique identifier for this query.\r\n   */\r\n  id: string;\r\n  /**\r\n   * Name of the database the query runs in.\r\n   */\r\n  database: string;\r\n  /**\r\n   * Name of the user that started the query.\r\n   */\r\n  user: string;\r\n  /**\r\n   * Query string (potentially truncated).\r\n   */\r\n  query: string;\r\n  /**\r\n   * Bind parameters used in the query.\r\n   */\r\n  bindVars: Record<string, any>;\r\n  /**\r\n   * Date and time the query was started.\r\n   */\r\n  started: string;\r\n  /**\r\n   * Query's running time in seconds.\r\n   */\r\n  runTime: number;\r\n  /**\r\n   * Maximum memory usage in bytes of the query.\r\n   */\r\n  peakMemoryUsage: number;\r\n  /**\r\n   * Query's current execution state.\r\n   */\r\n  state: \"executing\" | \"finished\" | \"killed\";\r\n  /**\r\n   * Whether the query uses a streaming cursor.\r\n   */\r\n  stream: boolean;\r\n};\r\n//#endregion\r\n\r\n//#region UserFunctionDescription\r\n/**\r\n * Definition of an AQL User Function.\r\n */\r\nexport type UserFunctionDescription = {\r\n  /**\r\n   * Name of the AQL User Function.\r\n   */\r\n  name: string;\r\n  /**\r\n   * Implementation of the AQL User Function.\r\n   */\r\n  code: string;\r\n  /**\r\n   * Whether the function is deterministic.\r\n   *\r\n   * See {@link databases.Database#createUserFunction}.\r\n   */\r\n  isDeterministic: boolean;\r\n};\r\n//#endregion\r\n"]}