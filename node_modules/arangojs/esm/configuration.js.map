{"version":3,"file":"configuration.js","sourceRoot":"","sources":["../../src/configuration.ts"],"names":[],"mappings":"AAqDA;;GAEG;AACH,MAAM,UAAU,YAAY,CAC1B,IAAkD;IAElD,OAAO,IAAI,CAAC,cAAc,CAAC,OAAO,CAAC,CAAC;AACtC,CAAC;AAsID,YAAY","sourcesContent":["/**\r\n * ```ts\r\n * import type { ConfigOptions } from \"arangojs/configuration\";\r\n * ```\r\n *\r\n * The \"configuration\" module provides configuration related types for\r\n * TypeScript.\r\n *\r\n * @packageDocumentation\r\n */\r\nimport * as connection from \"./connection.js\";\r\n\r\n//#region Shared types\r\n/**\r\n * Determines the behavior when multiple URLs are used:\r\n *\r\n * - `\"NONE\"`: No load balancing. All requests will be handled by the first\r\n *   URL in the list until a network error is encountered. On network error,\r\n *   arangojs will advance to using the next URL in the list.\r\n *\r\n * - `\"ONE_RANDOM\"`: Randomly picks one URL from the list initially, then\r\n *   behaves like `\"NONE\"`.\r\n *\r\n * - `\"ROUND_ROBIN\"`: Every sequential request uses the next URL in the list.\r\n */\r\nexport type LoadBalancingStrategy = \"NONE\" | \"ROUND_ROBIN\" | \"ONE_RANDOM\";\r\n//#endregion\r\n\r\n//#region Credentials\r\n/**\r\n * Credentials for HTTP Basic authentication.\r\n */\r\nexport type BasicAuthCredentials = {\r\n  /**\r\n   * Username to use for authentication, e.g. `\"root\"`.\r\n   */\r\n  username: string;\r\n  /**\r\n   * Password to use for authentication. Defaults to an empty string.\r\n   */\r\n  password?: string;\r\n};\r\n\r\n/**\r\n * Credentials for HTTP Bearer token authentication.\r\n */\r\nexport type BearerAuthCredentials = {\r\n  /**\r\n   * Bearer token to use for authentication.\r\n   */\r\n  token: string;\r\n};\r\n\r\n/**\r\n * Determines if the given credentials are for Bearer token authentication.\r\n */\r\nexport function isBearerAuth(\r\n  auth: BasicAuthCredentials | BearerAuthCredentials,\r\n): auth is BearerAuthCredentials {\r\n  return auth.hasOwnProperty(\"token\");\r\n}\r\n//#endregion\r\n\r\n//#region Config\r\n/**\r\n * Options for configuring arangojs.\r\n */\r\nexport type ConfigOptions = connection.CommonRequestOptions & {\r\n  /**\r\n   * Name of the database to use.\r\n   *\r\n   * Default: `\"_system\"`\r\n   */\r\n  databaseName?: string;\r\n  /**\r\n   * Base URL of the ArangoDB server or list of server URLs.\r\n   *\r\n   * When working with a cluster, the method {@link databases.Database#acquireHostList}\r\n   * can be used to automatically pick up additional coordinators/followers at\r\n   * any point.\r\n   *\r\n   * When running ArangoDB on a unix socket, e.g. `/tmp/arangodb.sock`, the\r\n   * following URL formats are supported for unix sockets:\r\n   *\r\n   * - `unix:///tmp/arangodb.sock` (no SSL)\r\n   * - `http+unix:///tmp/arangodb.sock` (or `https+unix://` for SSL)\r\n   * - `http://unix:/tmp/arangodb.sock` (or `https://unix:` for SSL)\r\n   *\r\n   * Additionally `ssl` and `tls` are treated as synonymous with `https` and\r\n   * `tcp` is treated as synonymous with `http`, so the following URLs are\r\n   * considered identical:\r\n   *\r\n   * - `tcp://127.0.0.1:8529` and `http://127.0.0.1:8529`\r\n   * - `ssl://127.0.0.1:8529` and `https://127.0.0.1:8529`\r\n   * - `tcp+unix:///tmp/arangodb.sock` and `http+unix:///tmp/arangodb.sock`\r\n   * - `ssl+unix:///tmp/arangodb.sock` and `https+unix:///tmp/arangodb.sock`\r\n   * - `tcp://unix:/tmp/arangodb.sock` and `http://unix:/tmp/arangodb.sock`\r\n   * - `ssl://unix:/tmp/arangodb.sock` and `https://unix:/tmp/arangodb.sock`\r\n   *\r\n   * See also `auth` for passing authentication credentials.\r\n   *\r\n   * Default: `\"http://127.0.0.1:8529\"`\r\n   */\r\n  url?: string | string[];\r\n  /**\r\n   * Credentials to use for authentication.\r\n   *\r\n   * See also {@link databases.Database#useBasicAuth} and\r\n   * {@link databases.Database#useBearerAuth}.\r\n   *\r\n   * Default: `{ username: \"root\", password: \"\" }`\r\n   */\r\n  auth?: BasicAuthCredentials | BearerAuthCredentials;\r\n  /**\r\n   * Numeric representation of the ArangoDB version the driver should expect.\r\n   * The format is defined as `XYYZZ` where `X` is the major version, `Y` is\r\n   * the zero-filled two-digit minor version and `Z` is the zero-filled two-digit\r\n   * bugfix version, e.g. `30102` for 3.1.2, `20811` for 2.8.11.\r\n   *\r\n   * Depending on this value certain methods may become unavailable or change\r\n   * their behavior to remain compatible with different versions of ArangoDB.\r\n   *\r\n   * Default: `31100`\r\n   */\r\n  arangoVersion?: number;\r\n  /**\r\n   * Determines the behavior when multiple URLs are provided:\r\n   *\r\n   * - `\"NONE\"`: No load balancing. All requests will be handled by the first\r\n   *   URL in the list until a network error is encountered. On network error,\r\n   *   arangojs will advance to using the next URL in the list.\r\n   *\r\n   * - `\"ONE_RANDOM\"`: Randomly picks one URL from the list initially, then\r\n   *   behaves like `\"NONE\"`.\r\n   *\r\n   * - `\"ROUND_ROBIN\"`: Every sequential request uses the next URL in the list.\r\n   *\r\n   * Default: `\"NONE\"`\r\n   */\r\n  loadBalancingStrategy?: LoadBalancingStrategy;\r\n  /**\r\n   * Maximum number of parallel requests arangojs will perform. If any\r\n   * additional requests are attempted, they will be enqueued until one of the\r\n   * active requests has completed.\r\n   *\r\n   * **Note:** when using `ROUND_ROBIN` load balancing and passing an array of\r\n   * URLs in the `url` option, the default value of this option will be set to\r\n   * `3 * url.length` instead of `3`.\r\n   *\r\n   * Default: `3`\r\n   */\r\n  poolSize?: number;\r\n  /**\r\n   * Default options to pass to the `fetch` function when making requests.\r\n   *\r\n   * See [the Fetch API specification](https://fetch.spec.whatwg.org/#request-class)\r\n   * or the [MDN Web Docs](https://developer.mozilla.org/en-US/docs/Web/API/RequestInit)\r\n   * for more information on the available options.\r\n   */\r\n  fetchOptions?: connection.CommonFetchOptions;\r\n  /**\r\n   * If set, arangojs will use the [`undici`](https://www.npmjs.com/package/undici)\r\n   * package to make requests and the provided options will be used to create\r\n   * the `undici` agent.\r\n   *\r\n   * See [the `undici` documentation](https://undici.nodejs.org/#/docs/api/Agent?id=parameter-agentoptions)\r\n   * for more information on the available options.\r\n   */\r\n  agentOptions?: any;\r\n  /**\r\n   * Callback that will be invoked when a request\r\n   *\r\n   * @param err - Error encountered when handling this request.\r\n   */\r\n  onError?: (err: Error) => void | Promise<void>;\r\n  /**\r\n   * If set to `true`, arangojs will generate stack traces every time a request\r\n   * is initiated and augment the stack traces of any errors it generates.\r\n   *\r\n   * **Warning**: This will cause arangojs to generate stack traces in advance\r\n   * even if the request does not result in an error. Generating stack traces\r\n   * may negatively impact performance.\r\n   */\r\n  precaptureStackTraces?: boolean;\r\n  /**\r\n   * Limits the number of values of server-reported response queue times that\r\n   * will be stored and accessible using {@link databases.Database#queueTime}. If set to\r\n   * a finite value, older values will be discarded to make room for new values\r\n   * when that limit is reached.\r\n   *\r\n   * Default: `10`\r\n   */\r\n  responseQueueTimeSamples?: number;\r\n};\r\n//#endregion\r\n"]}