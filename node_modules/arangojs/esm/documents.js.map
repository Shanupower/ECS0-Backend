{"version":3,"file":"documents.js","sourceRoot":"","sources":["../../src/documents.ts"],"names":[],"mappings":"AAAA;;;;;;;;GAQG;AAwjBH;;GAEG;AACH,MAAM,UAAU,eAAe,CAC7B,QAA0B,EAC1B,cAAsB,EACtB,SAAkB,IAAI;IAEtB,IAAI,OAAO,QAAQ,KAAK,QAAQ,EAAE,CAAC;QACjC,IAAI,QAAQ,CAAC,GAAG,EAAE,CAAC;YACjB,OAAO,eAAe,CAAC,QAAQ,CAAC,GAAG,EAAE,cAAc,CAAC,CAAC;QACvD,CAAC;QACD,IAAI,QAAQ,CAAC,IAAI,EAAE,CAAC;YAClB,OAAO,eAAe,CAAC,QAAQ,CAAC,IAAI,EAAE,cAAc,CAAC,CAAC;QACxD,CAAC;QACD,MAAM,IAAI,KAAK,CACb,4EAA4E,CAC7E,CAAC;IACJ,CAAC;IACD,IAAI,QAAQ,CAAC,QAAQ,CAAC,GAAG,CAAC,EAAE,CAAC;QAC3B,MAAM,CAAC,IAAI,CAAC,GAAG,QAAQ,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;QACnC,IAAI,MAAM,IAAI,IAAI,KAAK,cAAc,EAAE,CAAC;YACtC,MAAM,IAAI,KAAK,CACb,gBAAgB,QAAQ,qCAAqC,cAAc,GAAG,CAC/E,CAAC;QACJ,CAAC;QACD,OAAO,QAAQ,CAAC;IAClB,CAAC;IACD,OAAO,GAAG,cAAc,IAAI,QAAQ,EAAE,CAAC;AACzC,CAAC;AACD,YAAY","sourcesContent":["/**\r\n * ```ts\r\n * import type { Document, Edge } from \"arangojs/documents\";\r\n * ```\r\n *\r\n * The \"documents\" module provides document/edge related types for TypeScript.\r\n *\r\n * @packageDocumentation\r\n */\r\n\r\n//#region Shared types\r\n/**\r\n * Common ArangoDB metadata properties of a document.\r\n */\r\nexport type DocumentMetadata = {\r\n  /**\r\n   * Key of the document, which uniquely identifies the document within its\r\n   * collection.\r\n   */\r\n  _key: string;\r\n  /**\r\n   * Unique ID of the document, which is composed of the collection name\r\n   * and the document `_key`.\r\n   */\r\n  _id: string;\r\n  /**\r\n   * Revision of the document data.\r\n   */\r\n  _rev: string;\r\n};\r\n\r\n/**\r\n * ArangoDB metadata defining the relations of an edge document.\r\n */\r\nexport type EdgeMetadata = {\r\n  /**\r\n   * Unique ID of the document that acts as the edge's start vertex.\r\n   */\r\n  _from: string;\r\n  /**\r\n   * Unique ID of the document that acts as the edge's end vertex.\r\n   */\r\n  _to: string;\r\n};\r\n//#endregion\r\n\r\n//#region Document types\r\n/**\r\n * Type representing an object that can be stored in a collection.\r\n */\r\nexport type DocumentData<T extends Record<string, any> = any> = T &\r\n  Partial<DocumentMetadata> &\r\n  Partial<EdgeMetadata>;\r\n\r\n/**\r\n * Type representing an object that can be stored in an edge collection.\r\n */\r\nexport type EdgeData<T extends Record<string, any> = any> = T &\r\n  Partial<DocumentMetadata> &\r\n  EdgeMetadata;\r\n\r\n/**\r\n * Type representing a document stored in a collection.\r\n */\r\nexport type Document<T extends Record<string, any> = any> = T &\r\n  DocumentMetadata &\r\n  Partial<EdgeMetadata>;\r\n\r\n/**\r\n * Type representing an edge document stored in an edge collection.\r\n */\r\nexport type Edge<T extends Record<string, any> = any> = T &\r\n  DocumentMetadata &\r\n  EdgeMetadata;\r\n\r\n/**\r\n * Type representing patch data for a given object type to represent a payload\r\n * ArangoDB can apply in a document PATCH request (i.e. a partial update).\r\n *\r\n * This differs from `Partial` in that it also applies itself to any nested\r\n * objects recursively.\r\n */\r\nexport type Patch<T = Record<string, any>> = {\r\n  [K in keyof T]?: T[K] | Patch<T[K]>;\r\n};\r\n//#endregion\r\n\r\n//#region Document operation options\r\n/**\r\n * Options for checking whether a document exists in a collection.\r\n */\r\nexport type DocumentExistsOptions = {\r\n  /**\r\n   * If set to `true`, the request will explicitly permit ArangoDB to return a\r\n   * potentially dirty or stale result and arangojs will load balance the\r\n   * request without distinguishing between leaders and followers.\r\n   */\r\n  allowDirtyRead?: boolean;\r\n  /**\r\n   * If set to a document revision, the document will only match if its `_rev`\r\n   * matches the given revision.\r\n   */\r\n  ifMatch?: string;\r\n  /**\r\n   * If set to a document revision, the document will only match if its `_rev`\r\n   * does not match the given revision.\r\n   */\r\n  ifNoneMatch?: string;\r\n};\r\n\r\n/**\r\n * Options for retrieving a document from a collection.\r\n */\r\nexport type ReadDocumentOptions = {\r\n  /**\r\n   * If set to `true`, `null` is returned instead of an exception being thrown\r\n   * if the document does not exist.\r\n   */\r\n  graceful?: boolean;\r\n  /**\r\n   * If set to `true`, the request will explicitly permit ArangoDB to return a\r\n   * potentially dirty or stale result and arangojs will load balance the\r\n   * request without distinguishing between leaders and followers.\r\n   */\r\n  allowDirtyRead?: boolean;\r\n  /**\r\n   * If set to a document revision, the request will fail with an error if the\r\n   * document exists but its `_rev` does not match the given revision.\r\n   */\r\n  ifMatch?: string;\r\n  /**\r\n   * If set to a document revision, the request will fail with an error if the\r\n   * document exists and its `_rev` matches the given revision. Note that an\r\n   * `HttpError` with code 304 will be thrown instead of an `ArangoError`.\r\n   */\r\n  ifNoneMatch?: string;\r\n};\r\n\r\n/**\r\n * Options for retrieving multiple documents from a collection.\r\n */\r\nexport type BulkReadDocumentsOptions = {\r\n  /**\r\n   * If set to `true`, the request will explicitly permit ArangoDB to return a\r\n   * potentially dirty or stale result and arangojs will load balance the\r\n   * request without distinguishing between leaders and followers.\r\n   */\r\n  allowDirtyRead?: boolean;\r\n  /**\r\n   * If set to `false`, the existing document will only be modified if its\r\n   * `_rev` property matches the same property on the new data.\r\n   *\r\n   * Default: `true`\r\n   */\r\n  ignoreRevs?: boolean;\r\n};\r\n\r\n/**\r\n * Options for inserting a new document into a collection.\r\n */\r\nexport type InsertDocumentOptions = {\r\n  /**\r\n   * If set to `true`, data will be synchronized to disk before returning.\r\n   *\r\n   * Default: `false`\r\n   */\r\n  waitForSync?: boolean;\r\n  /**\r\n   * If set to `true`, no data will be returned by the server. This option can\r\n   * be used to reduce network traffic.\r\n   *\r\n   * Default: `false`\r\n   */\r\n  silent?: boolean;\r\n  /**\r\n   * If set to `true`, the complete new document will be returned as the `new`\r\n   * property on the result object. Has no effect if `silent` is set to `true`.\r\n   *\r\n   * Default: `false`\r\n   */\r\n  returnNew?: boolean;\r\n  /**\r\n   * If set to `true`, the complete old document will be returned as the `old`\r\n   * property on the result object. Has no effect if `silent` is set to `true`.\r\n   * This option is only available when `overwriteMode` is set to `\"update\"` or\r\n   * `\"replace\"`.\r\n   *\r\n   * Default: `false`\r\n   */\r\n  returnOld?: boolean;\r\n  /**\r\n   * Defines what should happen if a document with the same `_key` or `_id`\r\n   * already exists, instead of throwing an exception.\r\n   *\r\n   * Default: `\"conflict\"\r\n   */\r\n  overwriteMode?: \"ignore\" | \"update\" | \"replace\" | \"conflict\";\r\n  /**\r\n   * If set to `false`, properties with a value of `null` will be removed from\r\n   * the new document.\r\n   *\r\n   * Default: `true`\r\n   */\r\n  keepNull?: boolean;\r\n  /**\r\n   * If set to `false`, object properties that already exist in the old\r\n   * document will be overwritten rather than merged when an existing document\r\n   * with the same `_key` or `_id` is updated. This does not affect arrays.\r\n   *\r\n   * Default: `true`\r\n   */\r\n  mergeObjects?: boolean;\r\n  /**\r\n   * If set to `true`, new entries will be added to in-memory index caches if\r\n   * document insertions affect the edge index or cache-enabled persistent\r\n   * indexes.\r\n   *\r\n   * Default: `false`\r\n   */\r\n  refillIndexCaches?: boolean;\r\n  /**\r\n   * If set, the attribute with the name specified by the option is looked up\r\n   * in the stored document and the attribute value is compared numerically to\r\n   * the value of the versioning attribute in the supplied document that is\r\n   * supposed to update/replace it.\r\n   */\r\n  versionAttribute?: string;\r\n};\r\n\r\n/**\r\n * Options for replacing an existing document in a collection.\r\n */\r\nexport type ReplaceDocumentOptions = {\r\n  /**\r\n   * If set to `true`, data will be synchronized to disk before returning.\r\n   *\r\n   * Default: `false`\r\n   */\r\n  waitForSync?: boolean;\r\n  /**\r\n   * If set to `true`, no data will be returned by the server. This option can\r\n   * be used to reduce network traffic.\r\n   *\r\n   * Default: `false`\r\n   */\r\n  silent?: boolean;\r\n  /**\r\n   * If set to `true`, the complete new document will be returned as the `new`\r\n   * property on the result object. Has no effect if `silent` is set to `true`.\r\n   *\r\n   * Default: `false`\r\n   */\r\n  returnNew?: boolean;\r\n  /**\r\n   * If set to `false`, the existing document will only be modified if its\r\n   * `_rev` property matches the same property on the new data.\r\n   *\r\n   * Default: `true`\r\n   */\r\n  ignoreRevs?: boolean;\r\n  /**\r\n   * If set to `true`, the complete old document will be returned as the `old`\r\n   * property on the result object. Has no effect if `silent` is set to `true`.\r\n   *\r\n   * Default: `false`\r\n   */\r\n  returnOld?: boolean;\r\n  /**\r\n   * If set to a document revision, the document will only be replaced if its\r\n   * `_rev` matches the given revision.\r\n   */\r\n  ifMatch?: string;\r\n  /**\r\n   * If set to `true`, existing entries in in-memory index caches will be\r\n   * updated if document replacements affect the edge index or cache-enabled\r\n   * persistent indexes.\r\n   *\r\n   * Default: `false`\r\n   */\r\n  refillIndexCaches?: boolean;\r\n  /**\r\n   * If set, the attribute with the name specified by the option is looked up\r\n   * in the stored document and the attribute value is compared numerically to\r\n   * the value of the versioning attribute in the supplied document that is\r\n   * supposed to update/replace it.\r\n   */\r\n  versionAttribute?: string;\r\n};\r\n\r\n/**\r\n * Options for updating a document in a collection.\r\n */\r\nexport type UpdateDocumentOptions = {\r\n  /**\r\n   * If set to `true`, data will be synchronized to disk before returning.\r\n   *\r\n   * Default: `false`\r\n   */\r\n  waitForSync?: boolean;\r\n  /**\r\n   * If set to `true`, no data will be returned by the server. This option can\r\n   * be used to reduce network traffic.\r\n   *\r\n   * Default: `false`\r\n   */\r\n  silent?: boolean;\r\n  /**\r\n   * If set to `true`, the complete new document will be returned as the `new`\r\n   * property on the result object. Has no effect if `silent` is set to `true`.\r\n   *\r\n   * Default: `false`\r\n   */\r\n  returnNew?: boolean;\r\n  /**\r\n   * If set to `false`, the existing document will only be modified if its\r\n   * `_rev` property matches the same property on the new data.\r\n   *\r\n   * Default: `true`\r\n   */\r\n  ignoreRevs?: boolean;\r\n  /**\r\n   * If set to `true`, the complete old document will be returned as the `old`\r\n   * property on the result object. Has no effect if `silent` is set to `true`.\r\n   *\r\n   * Default: `false`\r\n   */\r\n  returnOld?: boolean;\r\n  /**\r\n   * If set to `false`, properties with a value of `null` will be removed from\r\n   * the new document.\r\n   *\r\n   * Default: `true`\r\n   */\r\n  keepNull?: boolean;\r\n  /**\r\n   * If set to `false`, object properties that already exist in the old\r\n   * document will be overwritten rather than merged. This does not affect\r\n   * arrays.\r\n   *\r\n   * Default: `true`\r\n   */\r\n  mergeObjects?: boolean;\r\n  /**\r\n   * If set to a document revision, the document will only be updated if its\r\n   * `_rev` matches the given revision.\r\n   */\r\n  ifMatch?: string;\r\n  /**\r\n   * If set to `true`, existing entries in in-memory index caches will be\r\n   * updated if document updates affect the edge index or cache-enabled\r\n   * persistent indexes.\r\n   *\r\n   * Default: `false`\r\n   */\r\n  refillIndexCaches?: boolean;\r\n  /**\r\n   * If set, the attribute with the name specified by the option is looked up\r\n   * in the stored document and the attribute value is compared numerically to\r\n   * the value of the versioning attribute in the supplied document that is\r\n   * supposed to update/replace it.\r\n   */\r\n  versionAttribute?: string;\r\n};\r\n\r\n/**\r\n * Options for removing a document from a collection.\r\n */\r\nexport type RemoveDocumentOptions = {\r\n  /**\r\n   * If set to `true`, changes will be synchronized to disk before returning.\r\n   *\r\n   * Default: `false`\r\n   */\r\n  waitForSync?: boolean;\r\n  /**\r\n   * If set to `false`, the existing document will only be modified if its\r\n   * `_rev` property matches the same property on the new data.\r\n   *\r\n   * Default: `true`\r\n   */\r\n  ignoreRevs?: boolean;\r\n  /**\r\n   * If set to `true`, the complete old document will be returned as the `old`\r\n   * property on the result object. Has no effect if `silent` is set to `true`.\r\n   *\r\n   * Default: `false`\r\n   */\r\n  returnOld?: boolean;\r\n  /**\r\n   * If set to `true`, no data will be returned by the server. This option can\r\n   * be used to reduce network traffic.\r\n   *\r\n   * Default: `false`\r\n   */\r\n  silent?: boolean;\r\n  /**\r\n   * If set to a document revision, the document will only be removed if its\r\n   * `_rev` matches the given revision.\r\n   */\r\n  ifMatch?: string;\r\n  /**\r\n   * If set to `true`, existing entries in in-memory index caches will be\r\n   * deleted if document removals affect the edge index or cache-enabled\r\n   * persistent indexes.\r\n   *\r\n   * Default: `false`\r\n   */\r\n  refillIndexCaches?: boolean;\r\n};\r\n\r\n/**\r\n * Options for bulk importing documents into a collection.\r\n */\r\nexport type ImportDocumentsOptions = {\r\n  /**\r\n   * (Edge collections only.) Prefix to prepend to `_from` attribute values.\r\n   */\r\n  fromPrefix?: string;\r\n  /**\r\n   * (Edge collections only.) Prefix to prepend to `_to` attribute values.\r\n   */\r\n  toPrefix?: string;\r\n  /**\r\n   * If set to `true`, the collection is truncated before the data is imported.\r\n   *\r\n   * Default: `false`\r\n   */\r\n  overwrite?: boolean;\r\n  /**\r\n   * Whether to wait for the documents to have been synced to disk.\r\n   */\r\n  waitForSync?: boolean;\r\n  /**\r\n   * Controls behavior when a unique constraint is violated on the document key.\r\n   *\r\n   * * `\"error\"`: the document will not be imported.\r\n   * * `\"update`: the document will be merged into the existing document.\r\n   * * `\"replace\"`: the document will replace the existing document.\r\n   * * `\"ignore\"`: the document will not be imported and the unique constraint\r\n   *   error will be ignored.\r\n   *\r\n   * Default: `\"error\"`\r\n   */\r\n  onDuplicate?: \"error\" | \"update\" | \"replace\" | \"ignore\";\r\n  /**\r\n   * If set to `true`, the import will abort if any error occurs.\r\n   */\r\n  complete?: boolean;\r\n  /**\r\n   * Whether the response should contain additional details about documents\r\n   * that could not be imported.\r\n   */\r\n  details?: boolean;\r\n};\r\n\r\n/**\r\n * Options for retrieving a document's edges from a collection.\r\n */\r\nexport type DocumentEdgesOptions = {\r\n  /**\r\n   * If set to `true`, the request will explicitly permit ArangoDB to return a\r\n   * potentially dirty or stale result and arangojs will load balance the\r\n   * request without distinguishing between leaders and followers.\r\n   */\r\n  allowDirtyRead?: boolean;\r\n};\r\n//#endregion\r\n\r\n//#region Document operation results\r\n/**\r\n * Represents a bulk operation failure for an individual document.\r\n */\r\nexport type DocumentOperationFailure = {\r\n  /**\r\n   * Indicates that the operation failed.\r\n   */\r\n  error: true;\r\n  /**\r\n   * Human-readable description of the failure.\r\n   */\r\n  errorMessage: string;\r\n  /**\r\n   * Numeric representation of the failure.\r\n   */\r\n  errorNum: number;\r\n};\r\n\r\n/**\r\n * Metadata returned by a document operation.\r\n */\r\nexport type DocumentOperationMetadata = DocumentMetadata & {\r\n  /**\r\n   * Revision of the document that was updated or replaced by this operation.\r\n   */\r\n  _oldRev?: string;\r\n};\r\n\r\n/**\r\n * Result of a collection bulk import.\r\n */\r\nexport type ImportDocumentsResult = {\r\n  /**\r\n   * Whether the import failed.\r\n   */\r\n  error: false;\r\n  /**\r\n   * Number of new documents imported.\r\n   */\r\n  created: number;\r\n  /**\r\n   * Number of documents that failed with an error.\r\n   */\r\n  errors: number;\r\n  /**\r\n   * Number of empty documents.\r\n   */\r\n  empty: number;\r\n  /**\r\n   * Number of documents updated.\r\n   */\r\n  updated: number;\r\n  /**\r\n   * Number of documents that failed with an error that is ignored.\r\n   */\r\n  ignored: number;\r\n  /**\r\n   * Additional details about any errors encountered during the import.\r\n   */\r\n  details?: string[];\r\n};\r\n\r\n/**\r\n * Result of retrieving edges in a collection.\r\n */\r\nexport type DocumentEdgesResult<T extends Record<string, any> = any> = {\r\n  edges: Edge<T>[];\r\n  stats: {\r\n    scannedIndex: number;\r\n    filtered: number;\r\n  };\r\n};\r\n//#endregion\r\n\r\n//#region Document selectors\r\n/**\r\n * A value that can be used to identify a document within a collection in\r\n * arangojs methods, i.e. a partial ArangoDB document or the value of a\r\n * document's `_key` or `_id`.\r\n *\r\n * See {@link DocumentMetadata}.\r\n */\r\nexport type DocumentSelector =\r\n  | ObjectWithDocumentId\r\n  | ObjectWithDocumentKey\r\n  | string;\r\n\r\n/**\r\n * An object with an ArangoDB document `_id` property.\r\n *\r\n * See {@link DocumentMetadata}.\r\n */\r\nexport type ObjectWithDocumentId = {\r\n  [key: string]: any;\r\n  _id: string;\r\n};\r\n\r\n/**\r\n * An object with an ArangoDB document `_key` property.\r\n *\r\n * See {@link DocumentMetadata}.\r\n */\r\nexport type ObjectWithDocumentKey = {\r\n  [key: string]: any;\r\n  _key: string;\r\n};\r\n\r\n/**\r\n * @internal\r\n */\r\nexport function _documentHandle(\r\n  selector: DocumentSelector,\r\n  collectionName: string,\r\n  strict: boolean = true\r\n): string {\r\n  if (typeof selector !== \"string\") {\r\n    if (selector._id) {\r\n      return _documentHandle(selector._id, collectionName);\r\n    }\r\n    if (selector._key) {\r\n      return _documentHandle(selector._key, collectionName);\r\n    }\r\n    throw new Error(\r\n      \"Document handle must be a string or an object with a _key or _id attribute\"\r\n    );\r\n  }\r\n  if (selector.includes(\"/\")) {\r\n    const [head] = selector.split(\"/\");\r\n    if (strict && head !== collectionName) {\r\n      throw new Error(\r\n        `Document ID \"${selector}\" does not match collection name \"${collectionName}\"`\r\n      );\r\n    }\r\n    return selector;\r\n  }\r\n  return `${collectionName}/${selector}`;\r\n}\r\n//#endregion\r\n"]}