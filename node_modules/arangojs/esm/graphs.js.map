{"version":3,"file":"graphs.js","sourceRoot":"","sources":["../../src/graphs.ts"],"names":[],"mappings":"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","sourcesContent":["/**\r\n * ```ts\r\n * import type {\r\n *   Graph,\r\n *   GraphVertexCollection,\r\n *   GraphEdgeCollection,\r\n * } from \"arangojs/graphs\";\r\n * ```\r\n *\r\n * The \"graphs\" module provides graph related types and interfaces\r\n * for TypeScript.\r\n *\r\n * @packageDocumentation\r\n */\r\nimport * as collections from \"./collections.js\";\r\nimport * as databases from \"./databases.js\";\r\nimport * as documents from \"./documents.js\";\r\nimport * as errors from \"./errors.js\";\r\nimport { DOCUMENT_NOT_FOUND, GRAPH_NOT_FOUND } from \"./lib/codes.js\";\r\n\r\n/**\r\n * @internal\r\n */\r\nfunction mungeGharialResponse(body: any, prop: \"vertex\" | \"edge\" | \"removed\") {\r\n  const { [prop]: doc, ...meta } = body;\r\n  return { ...meta, ...doc };\r\n}\r\n\r\n/**\r\n * @internal\r\n */\r\nfunction coerceEdgeDefinition(options: EdgeDefinitionOptions): EdgeDefinition {\r\n  const edgeDefinition = {} as EdgeDefinition;\r\n  edgeDefinition.collection = collections.collectionToString(\r\n    options.collection\r\n  );\r\n  edgeDefinition.from = Array.isArray(options.from)\r\n    ? options.from.map(collections.collectionToString)\r\n    : [collections.collectionToString(options.from)];\r\n  edgeDefinition.to = Array.isArray(options.to)\r\n    ? options.to.map(collections.collectionToString)\r\n    : [collections.collectionToString(options.to)];\r\n  return edgeDefinition;\r\n}\r\n\r\n//#region Graph document operation options\r\n/**\r\n * Options for retrieving a document from a graph collection.\r\n */\r\nexport type ReadGraphDocumentOptions = {\r\n  /**\r\n   * If set to a document revision, the document will only be returned if its\r\n   * `_rev` property matches this value.\r\n   *\r\n   * See also {@link documents.DocumentMetadata}.\r\n   */\r\n  rev?: string;\r\n  /**\r\n   * If set to `true`, `null` is returned instead of an exception being thrown\r\n   * if the document does not exist.\r\n   *\r\n   * Default: `false`\r\n   */\r\n  graceful?: boolean;\r\n  /**\r\n   * If set to `true`, the request will explicitly permit ArangoDB to return a\r\n   * potentially dirty or stale result and arangojs will load balance the\r\n   * request without distinguishing between leaders and followers.\r\n   *\r\n   * Default: `false`\r\n   */\r\n  allowDirtyRead?: boolean;\r\n};\r\n\r\n/**\r\n * Options for inserting a document into a graph collection.\r\n */\r\nexport type InsertGraphDocumentOptions = {\r\n  /**\r\n   * If set to `true`, data will be synchronized to disk before returning.\r\n   *\r\n   * Default: `false`\r\n   */\r\n  waitForSync?: boolean;\r\n  /**\r\n   * If set to `true`, the complete new document will be returned as the `new`\r\n   * property on the result object.\r\n   *\r\n   * Default: `false`\r\n   */\r\n  returnNew?: boolean;\r\n};\r\n\r\n/**\r\n * Options for replacing a document in a graph collection.\r\n */\r\nexport type ReplaceGraphDocumentOptions = {\r\n  /**\r\n   * If set to a document revision, the document will only be modified if its\r\n   * `_rev` property matches this value.\r\n   *\r\n   * See also {@link documents.DocumentMetadata}.\r\n   */\r\n  rev?: string;\r\n  /**\r\n   * If set to `true`, data will be synchronized to disk before returning.\r\n   *\r\n   * Default: `false`\r\n   */\r\n  waitForSync?: boolean;\r\n  /**\r\n   * If set to `false`, properties with a value of `null` will be removed from\r\n   * the new document.\r\n   *\r\n   * Default: `true`\r\n   */\r\n  keepNull?: boolean;\r\n  /**\r\n   * If set to `true`, the complete old document will be returned as the `old`\r\n   * property on the result object.\r\n   *\r\n   * Default: `false`\r\n   */\r\n  returnOld?: boolean;\r\n  /**\r\n   * If set to `true`, the complete new document will be returned as the `new`\r\n   * property on the result object.\r\n   *\r\n   * Default: `false`\r\n   */\r\n  returnNew?: boolean;\r\n};\r\n\r\n/**\r\n * Options for removing a document from a graph collection.\r\n */\r\nexport type RemoveGraphDocumentOptions = {\r\n  /**\r\n   * If set to a document revision, the document will only be removed if its\r\n   * `_rev` property matches this value.\r\n   *\r\n   * See also {@link documents.DocumentMetadata}.\r\n   */\r\n  rev?: string;\r\n  /**\r\n   * If set to `true`, data will be synchronized to disk before returning.\r\n   *\r\n   * Default: `false`\r\n   */\r\n  waitForSync?: boolean;\r\n  /**\r\n   * If set to `true`, the complete old document will be returned as the `old`\r\n   * property on the result object.\r\n   *\r\n   * Default: `false`\r\n   */\r\n  returnOld?: boolean;\r\n};\r\n//#endregion\r\n\r\n//#region Edge definition operation options\r\n/**\r\n * An edge definition used to define a collection of edges in a {@link Graph}.\r\n */\r\nexport type EdgeDefinitionOptions = {\r\n  /**\r\n   * Collection containing the edges.\r\n   */\r\n  collection: string | collections.ArangoCollection;\r\n  /**\r\n   * Collection or collections containing the start vertices.\r\n   */\r\n  from:\r\n    | (string | collections.ArangoCollection)[]\r\n    | string\r\n    | collections.ArangoCollection;\r\n  /**\r\n   * Collection or collections containing the end vertices.\r\n   */\r\n  to:\r\n    | (string | collections.ArangoCollection)[]\r\n    | string\r\n    | collections.ArangoCollection;\r\n};\r\n//#endregion\r\n\r\n//#region GraphDescription\r\n/**\r\n * General information about a graph.\r\n */\r\nexport type GraphDescription = {\r\n  /**\r\n   * Key of the document internally representing this graph.\r\n   *\r\n   * See {@link documents.DocumentMetadata}.\r\n   *\r\n   * @internal\r\n   */\r\n  _key: string;\r\n  /**\r\n   * Unique identifier of the document internally representing this graph.\r\n   *\r\n   * See {@link documents.DocumentMetadata}.\r\n   *\r\n   * @internal\r\n   */\r\n  _id: string;\r\n  /**\r\n   * Revision of the document internally representing this graph.\r\n   *\r\n   * See {@link documents.DocumentMetadata}.\r\n   *\r\n   * @internal\r\n   */\r\n  _rev: string;\r\n  /**\r\n   * Name of the graph.\r\n   */\r\n  name: string;\r\n  /**\r\n   * Definitions for the relations of the graph.\r\n   */\r\n  edgeDefinitions: EdgeDefinition[];\r\n  /**\r\n   * Additional vertex collections. Documents within these collections do not\r\n   * have edges within this graph.\r\n   */\r\n  orphanCollections: string[];\r\n\r\n  /**\r\n   * (Cluster only.) Number of shards that is used for every collection\r\n   * within this graph.\r\n   */\r\n  numberOfShards?: number;\r\n  /**\r\n   * (Cluster only.) Replication factor used when initially creating\r\n   * collections for this graph.\r\n   */\r\n  replicationFactor?: number;\r\n  /**\r\n   * (Cluster only.) Write concern for new collections in the graph.\r\n   */\r\n  writeConcern?: number;\r\n  /**\r\n   * (Enterprise Edition cluster only.) If set to `true`, the graph is a\r\n   * SatelliteGraph.\r\n   */\r\n  isSatellite?: boolean;\r\n  /**\r\n   * (Enterprise Edition cluster only.) If set to `true`, the graph has been\r\n   * created as a SmartGraph.\r\n   */\r\n  isSmart?: boolean;\r\n  /**\r\n   * (Enterprise Edition cluster only.) Attribute containing the shard key\r\n   * value to use for smart sharding.\r\n   */\r\n  smartGraphAttribute?: string;\r\n  /**\r\n   * (Enterprise Edition cluster only.) If set to `true`, the graph has been\r\n   * created as a Disjoint SmartGraph.\r\n   */\r\n  isDisjoint?: boolean;\r\n};\r\n\r\n/**\r\n * Definition of a relation in a {@link Graph}.\r\n */\r\nexport type EdgeDefinition = {\r\n  /**\r\n   * Name of the collection containing the edges.\r\n   */\r\n  collection: string;\r\n  /**\r\n   * Array of names of collections containing the start vertices.\r\n   */\r\n  from: string[];\r\n  /**\r\n   * Array of names of collections containing the end vertices.\r\n   */\r\n  to: string[];\r\n};\r\n//#endregion\r\n\r\n//#region Graph operation options\r\n/**\r\n * Option for creating a graph.\r\n */\r\nexport type CreateGraphOptions = {\r\n  /**\r\n   * If set to `true`, the request will wait until all modifications have been\r\n   * synchronized to disk before returning successfully.\r\n   *\r\n   * Default: `false`\r\n   */\r\n  waitForSync?: boolean;\r\n  /**\r\n   * Additional vertex collections. Documents within these collections do not\r\n   * have edges within this graph.\r\n   */\r\n  orphanCollections?:\r\n    | (string | collections.ArangoCollection)[]\r\n    | string\r\n    | collections.ArangoCollection;\r\n\r\n  /**\r\n   * (Cluster only.) Number of shards that is used for every collection\r\n   * within this graph.\r\n   *\r\n   * Has no effect when `replicationFactor` is set to `\"satellite\"`.\r\n   */\r\n  numberOfShards?: number;\r\n  /**\r\n   * (Cluster only.) Replication factor used when initially creating\r\n   * collections for this graph.\r\n   *\r\n   * Default: `1`\r\n   */\r\n  replicationFactor?: number | \"satellite\";\r\n  /**\r\n   * (Cluster only.) Write concern for new collections in the graph.\r\n   *\r\n   * Has no effect when `replicationFactor` is set to `\"satellite\"`.\r\n   */\r\n  writeConcern?: number;\r\n\r\n  // Extra options\r\n  /**\r\n   * (Enterprise Edition cluster only.) If set to `true`, the graph will be\r\n   * created as a SmartGraph.\r\n   *\r\n   * Default: `false`\r\n   */\r\n  isSmart?: boolean;\r\n  /**\r\n   * (Enterprise Edition cluster only.) Attribute containing the shard key\r\n   * value to use for smart sharding.\r\n   */\r\n  smartGraphAttribute?: string;\r\n  /**\r\n   * (Enterprise Edition cluster only.) If set to `true`, the graph will be\r\n   * created as a Disjoint SmartGraph.\r\n   *\r\n   * Default: `false`\r\n   */\r\n  isDisjoint?: boolean;\r\n  /**\r\n   * (Enterprise Edition cluster only.) Collections to be included in a Hybrid\r\n   * SmartGraph.\r\n   */\r\n  satellites?: (string | collections.ArangoCollection)[];\r\n};\r\n\r\n/**\r\n * Options for adding a vertex collection to a graph.\r\n */\r\nexport type AddVertexCollectionOptions = {\r\n  /**\r\n   * (Enterprise Edition cluster only.) Collections to be included in a Hybrid\r\n   * SmartGraph.\r\n   */\r\n  satellites?: (string | collections.ArangoCollection)[];\r\n};\r\n\r\n/**\r\n * Options for adding an edge definition to a graph.\r\n */\r\nexport type AddEdgeDefinitionOptions = {\r\n  /**\r\n   * (Enterprise Edition cluster only.) Collections to be included in a Hybrid\r\n   * SmartGraph.\r\n   */\r\n  satellites?: (string | collections.ArangoCollection)[];\r\n};\r\n\r\n/**\r\n * Options for replacing an edge definition in a graph.\r\n */\r\nexport type ReplaceEdgeDefinitionOptions = {\r\n  /**\r\n   * (Enterprise Edition cluster only.) Collections to be included in a Hybrid\r\n   * SmartGraph.\r\n   */\r\n  satellites?: string[];\r\n};\r\n//#endregion\r\n\r\n//#region GraphVertexCollection class\r\n/**\r\n * Represents a {@link collections.DocumentCollection} of vertices in a {@link Graph}.\r\n *\r\n * @param EntryResultType - Type to represent vertex document contents returned\r\n * by the server (including computed properties).\r\n * @param EntryInputType - Type to represent vertex document contents passed\r\n * when inserting or replacing vertex documents (without computed properties).\r\n */\r\nexport class GraphVertexCollection<\r\n  EntryResultType extends Record<string, any> = any,\r\n  EntryInputType extends Record<string, any> = EntryResultType,\r\n> implements collections.ArangoCollection\r\n{\r\n  protected _db: databases.Database;\r\n  protected _name: string;\r\n  protected _graph: Graph;\r\n  protected _collection: collections.DocumentCollection<\r\n    EntryResultType,\r\n    EntryInputType\r\n  >;\r\n\r\n  /**\r\n   * @internal\r\n   */\r\n  constructor(db: databases.Database, name: string, graph: Graph) {\r\n    this._db = db;\r\n    this._collection = db.collection(name);\r\n    this._name = this._collection.name;\r\n    this._graph = graph;\r\n  }\r\n\r\n  /**\r\n   * @internal\r\n   *\r\n   * Indicates that this object represents an ArangoDB collection.\r\n   */\r\n  get isArangoCollection(): true {\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * Database this vertex collection belongs to.\r\n   */\r\n  get database() {\r\n    return this._db;\r\n  }\r\n\r\n  /**\r\n   * Name of the collection.\r\n   */\r\n  get name() {\r\n    return this._name;\r\n  }\r\n\r\n  /**\r\n   * A {@link collections.DocumentCollection} instance for this vertex collection.\r\n   */\r\n  get collection() {\r\n    return this._collection;\r\n  }\r\n\r\n  /**\r\n   * The {@link Graph} instance this vertex collection is bound to.\r\n   */\r\n  get graph() {\r\n    return this._graph;\r\n  }\r\n\r\n  /**\r\n   * Checks whether a vertex matching the given key or id exists in this\r\n   * collection.\r\n   *\r\n   * Throws an exception when passed a vertex or `_id` from a different\r\n   * collection.\r\n   *\r\n   * @param selector - Document `_key`, `_id` or object with either of those\r\n   * properties (e.g. a vertex from this collection).\r\n   *\r\n   * @example\r\n   * ```js\r\n   * const graph = db.graph(\"some-graph\");\r\n   * const collection = graph.vertexCollection(\"vertices\");\r\n   * const exists = await collection.vertexExists(\"abc123\");\r\n   * if (!exists) {\r\n   *   console.log(\"Vertex does not exist\");\r\n   * }\r\n   * ```\r\n   */\r\n  async vertexExists(selector: documents.DocumentSelector): Promise<boolean> {\r\n    try {\r\n      return await this._db.request(\r\n        {\r\n          method: \"HEAD\",\r\n          pathname: `/_api/gharial/${encodeURIComponent(\r\n            this.graph.name\r\n          )}/vertex/${encodeURI(documents._documentHandle(selector, this._name))}`,\r\n        },\r\n        () => true\r\n      );\r\n    } catch (err: any) {\r\n      if (err.code === 404) {\r\n        return false;\r\n      }\r\n      throw err;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Retrieves the vertex matching the given key or id.\r\n   *\r\n   * Throws an exception when passed a vertex or `_id` from a different\r\n   * collection.\r\n   *\r\n   * @param selector - Document `_key`, `_id` or object with either of those\r\n   * properties (e.g. a vertex from this collection).\r\n   * @param options - Options for retrieving the vertex.\r\n   *\r\n   * @example\r\n   * ```js\r\n   * const graph = db.graph(\"some-graph\");\r\n   * const collection = graph.vertexCollection(\"vertices\");\r\n   * try {\r\n   *   const vertex = await collection.vertex(\"abc123\");\r\n   *   console.log(vertex);\r\n   * } catch (e: any) {\r\n   *   console.error(\"Could not find vertex\");\r\n   * }\r\n   * ```\r\n   *\r\n   * @example\r\n   * ```js\r\n   * const graph = db.graph(\"some-graph\");\r\n   * const collection = graph.vertexCollection(\"vertices\");\r\n   * const vertex = await collection.vertex(\"abc123\", { graceful: true });\r\n   * if (vertex) {\r\n   *   console.log(vertex);\r\n   * } else {\r\n   *   console.error(\"Could not find vertex\");\r\n   * }\r\n   * ```\r\n   */\r\n  async vertex(\r\n    selector: documents.DocumentSelector,\r\n    options?: ReadGraphDocumentOptions\r\n  ): Promise<documents.Document<EntryResultType>>;\r\n  /**\r\n   * Retrieves the vertex matching the given key or id.\r\n   *\r\n   * Throws an exception when passed a vertex or `_id` from a different\r\n   * collection.\r\n   *\r\n   * @param selector - Document `_key`, `_id` or object with either of those\r\n   * properties (e.g. a vertex from this collection).\r\n   * @param graceful - If set to `true`, `null` is returned instead of an\r\n   * exception being thrown if the vertex does not exist.\r\n   *\r\n   * @example\r\n   * ```js\r\n   * const graph = db.graph(\"some-graph\");\r\n   * const collection = graph.vertexCollection(\"vertices\");\r\n   * try {\r\n   *   const vertex = await collection.vertex(\"abc123\", false);\r\n   *   console.log(vertex);\r\n   * } catch (e: any) {\r\n   *   console.error(\"Could not find vertex\");\r\n   * }\r\n   * ```\r\n   *\r\n   * @example\r\n   * ```js\r\n   * const graph = db.graph(\"some-graph\");\r\n   * const collection = graph.vertexCollection(\"vertices\");\r\n   * const vertex = await collection.vertex(\"abc123\", true);\r\n   * if (vertex) {\r\n   *   console.log(vertex);\r\n   * } else {\r\n   *   console.error(\"Could not find vertex\");\r\n   * }\r\n   * ```\r\n   */\r\n  async vertex(\r\n    selector: documents.DocumentSelector,\r\n    graceful: boolean\r\n  ): Promise<documents.Document<EntryResultType>>;\r\n  async vertex(\r\n    selector: documents.DocumentSelector,\r\n    options: boolean | ReadGraphDocumentOptions = {}\r\n  ): Promise<documents.Document<EntryResultType> | null> {\r\n    if (typeof options === \"boolean\") {\r\n      options = { graceful: options };\r\n    }\r\n    const {\r\n      allowDirtyRead = undefined,\r\n      graceful = false,\r\n      rev,\r\n      ...search\r\n    } = options;\r\n    const headers: Record<string, string> = {};\r\n    if (rev) headers[\"if-match\"] = rev;\r\n    const result = this._db.request(\r\n      {\r\n        pathname: `/_api/gharial/${encodeURIComponent(\r\n          this.graph.name\r\n        )}/vertex/${encodeURI(documents._documentHandle(selector, this._name))}`,\r\n        headers,\r\n        search,\r\n        allowDirtyRead,\r\n      },\r\n      (res) => res.parsedBody.vertex\r\n    );\r\n    if (!graceful) return result;\r\n    try {\r\n      return await result;\r\n    } catch (err: any) {\r\n      if (errors.isArangoError(err) && err.errorNum === DOCUMENT_NOT_FOUND) {\r\n        return null;\r\n      }\r\n      throw err;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Inserts a new vertex with the given `data` into the collection.\r\n   *\r\n   * @param data - The contents of the new vertex.\r\n   * @param options - Options for inserting the vertex.\r\n   *\r\n   * @example\r\n   * ```js\r\n   * const graph = db.graph(\"some-graph\");\r\n   * const collection = graph.vertexCollection(\"friends\");\r\n   * const result = await collection.save(\r\n   *   { _key: \"a\", color: \"blue\", count: 1 },\r\n   *   { returnNew: true }\r\n   * );\r\n   * console.log(result.new.color, result.new.count); // \"blue\" 1\r\n   * ```\r\n   */\r\n  save(\r\n    data: documents.DocumentData<EntryInputType>,\r\n    options?: InsertGraphDocumentOptions\r\n  ): Promise<\r\n    documents.DocumentMetadata & { new?: documents.Document<EntryResultType> }\r\n  >;\r\n  save(\r\n    data: documents.DocumentData<EntryInputType>,\r\n    options?: InsertGraphDocumentOptions\r\n  ) {\r\n    return this._db.request(\r\n      {\r\n        method: \"POST\",\r\n        pathname: `/_api/gharial/${encodeURIComponent(\r\n          this.graph.name\r\n        )}/vertex/${encodeURIComponent(this._name)}`,\r\n        body: data,\r\n        search: options,\r\n      },\r\n      (res) => mungeGharialResponse(res.parsedBody, \"vertex\")\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Replaces an existing vertex in the collection.\r\n   *\r\n   * Throws an exception when passed a vertex or `_id` from a different\r\n   * collection.\r\n   *\r\n   * @param selector - Document `_key`, `_id` or object with either of those\r\n   * properties (e.g. a vertex from this collection).\r\n   * @param newData - The contents of the new vertex.\r\n   * @param options - Options for replacing the vertex.\r\n   *\r\n   * @example\r\n   * ```js\r\n   * const graph = db.graph(\"some-graph\");\r\n   * const collection = graph.collection(\"vertices\");\r\n   * await collection.save({ _key: \"a\", color: \"blue\", count: 1 });\r\n   * const result = await collection.replace(\r\n   *   \"a\",\r\n   *   { color: \"red\" },\r\n   *   { returnNew: true }\r\n   * );\r\n   * console.log(result.new.color, result.new.count); // \"red\" undefined\r\n   * ```\r\n   */\r\n  replace(\r\n    selector: documents.DocumentSelector,\r\n    newData: documents.DocumentData<EntryInputType>,\r\n    options?: ReplaceGraphDocumentOptions\r\n  ): Promise<\r\n    documents.DocumentMetadata & {\r\n      new?: documents.Document<EntryResultType>;\r\n      old?: documents.Document<EntryResultType>;\r\n    }\r\n  >;\r\n  replace(\r\n    selector: documents.DocumentSelector,\r\n    newData: documents.DocumentData<EntryInputType>,\r\n    options: ReplaceGraphDocumentOptions = {}\r\n  ) {\r\n    if (typeof options === \"string\") {\r\n      options = { rev: options };\r\n    }\r\n    const { rev, ...search } = options;\r\n    const headers: Record<string, string> = {};\r\n    if (rev) headers[\"if-match\"] = rev;\r\n    return this._db.request(\r\n      {\r\n        method: \"PUT\",\r\n        pathname: `/_api/gharial/${encodeURIComponent(\r\n          this.graph.name\r\n        )}/vertex/${encodeURI(documents._documentHandle(selector, this._name))}`,\r\n        body: newData,\r\n        search,\r\n        headers,\r\n      },\r\n      (res) => mungeGharialResponse(res.parsedBody, \"vertex\")\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Updates an existing vertex in the collection.\r\n   *\r\n   * Throws an exception when passed a vertex or `_id` from a different\r\n   * collection.\r\n   *\r\n   * @param selector - Document `_key`, `_id` or object with either of those\r\n   * properties (e.g. a vertex from this collection).\r\n   * @param newData - The data for updating the vertex.\r\n   * @param options - Options for updating the vertex.\r\n   *\r\n   * @example\r\n   * ```js\r\n   * const graph = db.graph(\"some-graph\");\r\n   * const collection = graph.collection(\"vertices\");\r\n   * await collection.save({ _key: \"a\", color: \"blue\", count: 1 });\r\n   * const result = await collection.update(\r\n   *   \"a\",\r\n   *   { count: 2 },\r\n   *   { returnNew: true }\r\n   * );\r\n   * console.log(result.new.color, result.new.count); // \"blue\" 2\r\n   * ```\r\n   */\r\n  update(\r\n    selector: documents.DocumentSelector,\r\n    newData: documents.Patch<documents.DocumentData<EntryInputType>>,\r\n    options?: ReplaceGraphDocumentOptions\r\n  ): Promise<\r\n    documents.DocumentMetadata & {\r\n      new?: documents.Document<EntryResultType>;\r\n      old?: documents.Document<EntryResultType>;\r\n    }\r\n  >;\r\n  update(\r\n    selector: documents.DocumentSelector,\r\n    newData: documents.Patch<documents.DocumentData<EntryInputType>>,\r\n    options: ReplaceGraphDocumentOptions = {}\r\n  ) {\r\n    if (typeof options === \"string\") {\r\n      options = { rev: options };\r\n    }\r\n    const headers: Record<string, string> = {};\r\n    const { rev, ...search } = options;\r\n    if (rev) headers[\"if-match\"] = rev;\r\n    return this._db.request(\r\n      {\r\n        method: \"PATCH\",\r\n        pathname: `/_api/gharial/${encodeURIComponent(\r\n          this.graph.name\r\n        )}/vertex/${encodeURI(documents._documentHandle(selector, this._name))}`,\r\n        body: newData,\r\n        search,\r\n        headers,\r\n      },\r\n      (res) => mungeGharialResponse(res.parsedBody, \"vertex\")\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Removes an existing vertex from the collection.\r\n   *\r\n   * Throws an exception when passed a vertex or `_id` from a different\r\n   * collection.\r\n   *\r\n   * @param selector - Document `_key`, `_id` or object with either of those\r\n   * properties (e.g. a vertex from this collection).\r\n   * @param options - Options for removing the vertex.\r\n   *\r\n   * @example\r\n   * ```js\r\n   * const graph = db.graph(\"some-graph\");\r\n   * const collection = graph.vertexCollection(\"vertices\");\r\n   * await collection.remove(\"abc123\");\r\n   * // document with key \"abc123\" deleted\r\n   * ```\r\n   *\r\n   * @example\r\n   * ```js\r\n   * const graph = db.graph(\"some-graph\");\r\n   * const collection = graph.vertexCollection(\"vertices\");\r\n   * const doc = await collection.vertex(\"abc123\");\r\n   * await collection.remove(doc);\r\n   * // document with key \"abc123\" deleted\r\n   * ```\r\n   */\r\n  remove(\r\n    selector: documents.DocumentSelector,\r\n    options?: RemoveGraphDocumentOptions\r\n  ): Promise<\r\n    documents.DocumentMetadata & { old?: documents.Document<EntryResultType> }\r\n  >;\r\n  remove(\r\n    selector: documents.DocumentSelector,\r\n    options: RemoveGraphDocumentOptions = {}\r\n  ) {\r\n    if (typeof options === \"string\") {\r\n      options = { rev: options };\r\n    }\r\n    const headers: Record<string, string> = {};\r\n    const { rev, ...search } = options;\r\n    if (rev) headers[\"if-match\"] = rev;\r\n    return this._db.request(\r\n      {\r\n        method: \"DELETE\",\r\n        pathname: `/_api/gharial/${encodeURIComponent(\r\n          this.graph.name\r\n        )}/vertex/${encodeURI(documents._documentHandle(selector, this._name))}`,\r\n        search,\r\n        headers,\r\n      },\r\n      (res) => mungeGharialResponse(res.parsedBody, \"removed\")\r\n    );\r\n  }\r\n}\r\n//#endregion\r\n\r\n//#region GraphEdgeCollection class\r\n/**\r\n * Represents a {@link collections.EdgeCollection} of edges in a {@link Graph}.\r\n *\r\n * @param EntryResultType - Type to represent edge document contents returned\r\n * by the server (including computed properties).\r\n * @param EntryInputType - Type to represent edge document contents passed\r\n * when inserting or replacing edge documents (without computed properties).\r\n */\r\nexport class GraphEdgeCollection<\r\n  EntryResultType extends Record<string, any> = any,\r\n  EntryInputType extends Record<string, any> = EntryResultType,\r\n> implements collections.ArangoCollection\r\n{\r\n  protected _db: databases.Database;\r\n  protected _name: string;\r\n  protected _graph: Graph;\r\n  protected _collection: collections.EdgeCollection<\r\n    EntryResultType,\r\n    EntryInputType\r\n  >;\r\n\r\n  /**\r\n   * @internal\r\n   */\r\n  constructor(db: databases.Database, name: string, graph: Graph) {\r\n    this._db = db;\r\n    this._collection = db.collection(name);\r\n    this._name = this._collection.name;\r\n    this._graph = graph;\r\n  }\r\n\r\n  /**\r\n   * @internal\r\n   *\r\n   * Indicates that this object represents an ArangoDB collection.\r\n   */\r\n  get isArangoCollection(): true {\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * Database this edge collection belongs to.\r\n   */\r\n  get database() {\r\n    return this._db;\r\n  }\r\n\r\n  /**\r\n   * Name of the collection.\r\n   */\r\n  get name() {\r\n    return this._name;\r\n  }\r\n\r\n  /**\r\n   * A {@link collections.EdgeCollection} instance for this edge collection.\r\n   */\r\n  get collection() {\r\n    return this._collection;\r\n  }\r\n\r\n  /**\r\n   * The {@link Graph} instance this edge collection is bound to.\r\n   */\r\n  get graph() {\r\n    return this._graph;\r\n  }\r\n\r\n  /**\r\n   * Checks whether a edge matching the given key or id exists in this\r\n   * collection.\r\n   *\r\n   * Throws an exception when passed a edge or `_id` from a different\r\n   * collection.\r\n   *\r\n   * @param selector - Document `_key`, `_id` or object with either of those\r\n   * properties (e.g. a edge from this collection).\r\n   *\r\n   * @example\r\n   * ```js\r\n   * const graph = db.graph(\"some-graph\");\r\n   * const collection = graph.edgeCollection(\"friends\")\r\n   * const exists = await collection.edgeExists(\"abc123\");\r\n   * if (!exists) {\r\n   *   console.log(\"Edge does not exist\");\r\n   * }\r\n   * ```\r\n   */\r\n  async edgeExists(selector: documents.DocumentSelector): Promise<boolean> {\r\n    try {\r\n      return await this._db.request(\r\n        {\r\n          method: \"HEAD\",\r\n          pathname: `/_api/gharial/${encodeURIComponent(\r\n            this.graph.name\r\n          )}/edge/${encodeURI(documents._documentHandle(selector, this._name))}`,\r\n        },\r\n        () => true\r\n      );\r\n    } catch (err: any) {\r\n      if (err.code === 404) {\r\n        return false;\r\n      }\r\n      throw err;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Retrieves the edge matching the given key or id.\r\n   *\r\n   * Throws an exception when passed a edge or `_id` from a different\r\n   * collection, or if the edge does not exist.\r\n   *\r\n   * @param selector - Document `_key`, `_id` or object with either of those\r\n   * properties (e.g. a edge from this collection).\r\n   * @param options - Options for retrieving the edge.\r\n   *\r\n   * @example\r\n   * ```js\r\n   * const graph = db.graph(\"some-graph\");\r\n   * const collection = graph.edgeCollection(\"friends\")\r\n   * try {\r\n   *   const edge = await collection.edge(\"abc123\");\r\n   *   console.log(edge);\r\n   * } catch (e: any) {\r\n   *   console.error(\"Could not find edge\");\r\n   * }\r\n   * ```\r\n   *\r\n   * @example\r\n   * ```js\r\n   * const graph = db.graph(\"some-graph\");\r\n   * const collection = graph.edgeCollection(\"friends\")\r\n   * const edge = await collection.edge(\"abc123\", { graceful: true });\r\n   * if (edge) {\r\n   *   console.log(edge);\r\n   * } else {\r\n   *   console.error(\"Edge does not exist\");\r\n   * }\r\n   * ```\r\n   */\r\n  async edge(\r\n    selector: documents.DocumentSelector,\r\n    options?: ReadGraphDocumentOptions\r\n  ): Promise<documents.Edge<EntryResultType>>;\r\n  /**\r\n   * Retrieves the edge matching the given key or id.\r\n   *\r\n   * Throws an exception when passed a edge or `_id` from a different\r\n   * collection, or if the edge does not exist.\r\n   *\r\n   * @param selector - Document `_key`, `_id` or object with either of those\r\n   * properties (e.g. a edge from this collection).\r\n   * @param graceful - If set to `true`, `null` is returned instead of an\r\n   * exception being thrown if the edge does not exist.\r\n   *\r\n   * @example\r\n   * ```js\r\n   * const graph = db.graph(\"some-graph\");\r\n   * const collection = graph.edgeCollection(\"friends\")\r\n   * try {\r\n   *   const edge = await collection.edge(\"abc123\", false);\r\n   *   console.log(edge);\r\n   * } catch (e: any) {\r\n   *   console.error(\"Could not find edge\");\r\n   * }\r\n   * ```\r\n   *\r\n   * @example\r\n   * ```js\r\n   * const graph = db.graph(\"some-graph\");\r\n   * const collection = graph.edgeCollection(\"friends\")\r\n   * const edge = await collection.edge(\"abc123\", true);\r\n   * if (edge) {\r\n   *   console.log(edge);\r\n   * } else {\r\n   *   console.error(\"Edge does not exist\");\r\n   * }\r\n   * ```\r\n   */\r\n  async edge(\r\n    selector: documents.DocumentSelector,\r\n    graceful: boolean\r\n  ): Promise<documents.Edge<EntryResultType>>;\r\n  async edge(\r\n    selector: documents.DocumentSelector,\r\n    options: boolean | ReadGraphDocumentOptions = {}\r\n  ): Promise<documents.Edge<EntryResultType> | null> {\r\n    if (typeof options === \"boolean\") {\r\n      options = { graceful: options };\r\n    }\r\n    const {\r\n      allowDirtyRead = undefined,\r\n      graceful = false,\r\n      rev,\r\n      ...search\r\n    } = options;\r\n    const headers: Record<string, string> = {};\r\n    if (rev) headers[\"if-match\"] = rev;\r\n    const result = this._db.request(\r\n      {\r\n        pathname: `/_api/gharial/${encodeURIComponent(\r\n          this.graph.name\r\n        )}/edge/${encodeURI(documents._documentHandle(selector, this._name))}`,\r\n        search,\r\n        allowDirtyRead,\r\n      },\r\n      (res) => res.parsedBody.edge\r\n    );\r\n    if (!graceful) return result;\r\n    try {\r\n      return await result;\r\n    } catch (err: any) {\r\n      if (errors.isArangoError(err) && err.errorNum === DOCUMENT_NOT_FOUND) {\r\n        return null;\r\n      }\r\n      throw err;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Inserts a new edge with the given `data` into the collection.\r\n   *\r\n   * @param data - The contents of the new edge.\r\n   * @param options - Options for inserting the edge.\r\n   *\r\n   * @example\r\n   * ```js\r\n   * const db = new Database();\r\n   * const collection = db.collection(\"friends\");\r\n   * const result = await collection.save(\r\n   *   { _from: \"users/rana\", _to: \"users/mudasir\", active: false },\r\n   *   { returnNew: true }\r\n   * );\r\n   * ```\r\n   */\r\n  save(\r\n    data: documents.EdgeData<EntryInputType>,\r\n    options?: InsertGraphDocumentOptions\r\n  ): Promise<\r\n    documents.DocumentMetadata & { new?: documents.Edge<EntryResultType> }\r\n  >;\r\n  save(\r\n    data: documents.EdgeData<EntryInputType>,\r\n    options?: InsertGraphDocumentOptions\r\n  ) {\r\n    return this._db.request(\r\n      {\r\n        method: \"POST\",\r\n        pathname: `/_api/gharial/${encodeURIComponent(\r\n          this.graph.name\r\n        )}/edge/${encodeURIComponent(this._name)}`,\r\n        body: data,\r\n        search: options,\r\n      },\r\n      (res) => mungeGharialResponse(res.parsedBody, \"edge\")\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Replaces an existing edge in the collection.\r\n   *\r\n   * Throws an exception when passed a edge or `_id` from a different\r\n   * collection.\r\n   *\r\n   * @param selector - Document `_key`, `_id` or object with either of those\r\n   * properties (e.g. a edge from this collection).\r\n   * @param newData - The contents of the new edge.\r\n   * @param options - Options for replacing the edge.\r\n   *\r\n   * @example\r\n   * ```js\r\n   * const db = new Database();\r\n   * const collection = db.collection(\"friends\");\r\n   * await collection.save(\r\n   *   {\r\n   *     _key: \"musadir\",\r\n   *     _from: \"users/rana\",\r\n   *     _to: \"users/mudasir\",\r\n   *     active: true,\r\n   *     best: true\r\n   *   }\r\n   * );\r\n   * const result = await collection.replace(\r\n   *   \"musadir\",\r\n   *   { active: false },\r\n   *   { returnNew: true }\r\n   * );\r\n   * console.log(result.new.active, result.new.best); // false undefined\r\n   * ```\r\n   */\r\n  replace(\r\n    selector: documents.DocumentSelector,\r\n    newData: documents.EdgeData<EntryInputType>,\r\n    options?: ReplaceGraphDocumentOptions\r\n  ): Promise<\r\n    documents.DocumentMetadata & {\r\n      new?: documents.Edge<EntryResultType>;\r\n      old?: documents.Edge<EntryResultType>;\r\n    }\r\n  >;\r\n  replace(\r\n    selector: documents.DocumentSelector,\r\n    newData: documents.EdgeData<EntryInputType>,\r\n    options: ReplaceGraphDocumentOptions = {}\r\n  ) {\r\n    if (typeof options === \"string\") {\r\n      options = { rev: options };\r\n    }\r\n    const { rev, ...search } = options;\r\n    const headers: Record<string, string> = {};\r\n    if (rev) headers[\"if-match\"] = rev;\r\n    return this._db.request(\r\n      {\r\n        method: \"PUT\",\r\n        pathname: `/_api/gharial/${encodeURIComponent(\r\n          this.graph.name\r\n        )}/edge/${encodeURI(documents._documentHandle(selector, this._name))}`,\r\n        body: newData,\r\n        search,\r\n        headers,\r\n      },\r\n      (res) => mungeGharialResponse(res.parsedBody, \"edge\")\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Updates an existing edge in the collection.\r\n   *\r\n   * Throws an exception when passed a edge or `_id` from a different\r\n   * collection.\r\n   *\r\n   * @param selector - Document `_key`, `_id` or object with either of those\r\n   * properties (e.g. a edge from this collection).\r\n   * @param newData - The data for updating the edge.\r\n   * @param options - Options for updating the edge.\r\n   *\r\n   * @example\r\n   * ```js\r\n   * const db = new Database();\r\n   * const collection = db.collection(\"friends\");\r\n   * await collection.save(\r\n   *   {\r\n   *     _key: \"musadir\",\r\n   *     _from: \"users/rana\",\r\n   *     _to: \"users/mudasir\",\r\n   *     active: true,\r\n   *     best: true\r\n   *   }\r\n   * );\r\n   * const result = await collection.update(\r\n   *   \"musadir\",\r\n   *   { active: false },\r\n   *   { returnNew: true }\r\n   * );\r\n   * console.log(result.new.active, result.new.best); // false true\r\n   * ```\r\n   */\r\n  update(\r\n    selector: documents.DocumentSelector,\r\n    newData: documents.Patch<documents.EdgeData<EntryInputType>>,\r\n    options?: ReplaceGraphDocumentOptions\r\n  ): Promise<\r\n    documents.DocumentMetadata & {\r\n      new?: documents.Edge<EntryResultType>;\r\n      old?: documents.Edge<EntryResultType>;\r\n    }\r\n  >;\r\n  update(\r\n    selector: documents.DocumentSelector,\r\n    newData: documents.Patch<documents.EdgeData<EntryInputType>>,\r\n    options: ReplaceGraphDocumentOptions = {}\r\n  ) {\r\n    if (typeof options === \"string\") {\r\n      options = { rev: options };\r\n    }\r\n    const { rev, ...search } = options;\r\n    const headers: Record<string, string> = {};\r\n    if (rev) headers[\"if-match\"] = rev;\r\n    return this._db.request(\r\n      {\r\n        method: \"PATCH\",\r\n        pathname: `/_api/gharial/${encodeURIComponent(\r\n          this.graph.name\r\n        )}/edge/${encodeURI(documents._documentHandle(selector, this._name))}`,\r\n        body: newData,\r\n        search,\r\n        headers,\r\n      },\r\n      (res) => mungeGharialResponse(res.parsedBody, \"edge\")\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Removes an existing edge from the collection.\r\n   *\r\n   * Throws an exception when passed a edge or `_id` from a different\r\n   * collection.\r\n   *\r\n   * @param selector - Document `_key`, `_id` or object with either of those\r\n   * properties (e.g. a edge from this collection).\r\n   * @param options - Options for removing the edge.\r\n   *\r\n   * @example\r\n   * ```js\r\n   * const db = new Database();\r\n   * const collection = db.collection(\"friends\");\r\n   * const doc = await collection.edge(\"musadir\");\r\n   * await collection.remove(doc);\r\n   * // edge with key \"musadir\" deleted\r\n   * ```\r\n   */\r\n  remove(\r\n    selector: documents.DocumentSelector,\r\n    options?: RemoveGraphDocumentOptions\r\n  ): Promise<\r\n    documents.DocumentMetadata & { old?: documents.Edge<EntryResultType> }\r\n  >;\r\n  remove(\r\n    selector: documents.DocumentSelector,\r\n    options: RemoveGraphDocumentOptions = {}\r\n  ) {\r\n    if (typeof options === \"string\") {\r\n      options = { rev: options };\r\n    }\r\n    const { rev, ...search } = options;\r\n    const headers: Record<string, string> = {};\r\n    if (rev) headers[\"if-match\"] = rev;\r\n    return this._db.request(\r\n      {\r\n        method: \"DELETE\",\r\n        pathname: `/_api/gharial/${encodeURIComponent(\r\n          this.graph.name\r\n        )}/edge/${encodeURI(documents._documentHandle(selector, this._name))}`,\r\n        search,\r\n        headers,\r\n      },\r\n      (res) => mungeGharialResponse(res.parsedBody, \"removed\")\r\n    );\r\n  }\r\n}\r\n//#endregion\r\n\r\n//#region Graph class\r\n/**\r\n * Indicates whether the given value represents a {@link Graph}.\r\n *\r\n * @param graph - A value that might be a Graph.\r\n */\r\nexport function isArangoGraph(graph: any): graph is Graph {\r\n  return Boolean(graph && graph.isArangoGraph);\r\n}\r\n\r\n/**\r\n * Represents a graph in a {@link databases.Database}.\r\n */\r\nexport class Graph {\r\n  protected _name: string;\r\n\r\n  protected _db: databases.Database;\r\n\r\n  /**\r\n   * @internal\r\n   */\r\n  constructor(db: databases.Database, name: string) {\r\n    this._db = db;\r\n    this._name = name;\r\n  }\r\n\r\n  /**\r\n   * Indicates that this object represents an ArangoDB Graph.\r\n   */\r\n  get isArangoGraph(): true {\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * Database this graph belongs to.\r\n   */\r\n  get database() {\r\n    return this._db;\r\n  }\r\n\r\n  /**\r\n   * Name of the graph.\r\n   */\r\n  get name() {\r\n    return this._name;\r\n  }\r\n\r\n  /**\r\n   * Checks whether the graph exists.\r\n   *\r\n   * @example\r\n   * ```js\r\n   * const db = new Database();\r\n   * const graph = db.graph(\"some-graph\");\r\n   * const result = await graph.exists();\r\n   * // result indicates whether the graph exists\r\n   * ```\r\n   */\r\n  async exists(): Promise<boolean> {\r\n    try {\r\n      await this.get();\r\n      return true;\r\n    } catch (err: any) {\r\n      if (errors.isArangoError(err) && err.errorNum === GRAPH_NOT_FOUND) {\r\n        return false;\r\n      }\r\n      throw err;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Retrieves general information about the graph.\r\n   *\r\n   * @example\r\n   * ```js\r\n   * const db = new Database();\r\n   * const graph = db.graph(\"some-graph\");\r\n   * const data = await graph.get();\r\n   * // data contains general information about the graph\r\n   * ```\r\n   */\r\n  get(): Promise<GraphDescription> {\r\n    return this._db.request(\r\n      { pathname: `/_api/gharial/${encodeURIComponent(this._name)}` },\r\n      (res) => res.parsedBody.graph\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Creates a graph with the given `edgeDefinitions` and `options` for this\r\n   * graph's name.\r\n   *\r\n   * @param edgeDefinitions - Definitions for the relations of the graph.\r\n   * @param options - Options for creating the graph.\r\n   *\r\n   * @example\r\n   * ```js\r\n   * const db = new Database();\r\n   * const graph = db.graph(\"some-graph\");\r\n   * const info = await graph.create([\r\n   *   {\r\n   *     collection: \"edges\",\r\n   *     from: [\"start-vertices\"],\r\n   *     to: [\"end-vertices\"],\r\n   *   },\r\n   * ]);\r\n   * // graph now exists\r\n   * ```\r\n   */\r\n  create(\r\n    edgeDefinitions: EdgeDefinitionOptions[],\r\n    options: CreateGraphOptions = {}\r\n  ): Promise<GraphDescription> {\r\n    const { orphanCollections, satellites, waitForSync, isSmart, ...opts } =\r\n      options;\r\n    return this._db.request(\r\n      {\r\n        method: \"POST\",\r\n        pathname: \"/_api/gharial\",\r\n        body: {\r\n          orphanCollections:\r\n            orphanCollections &&\r\n            (Array.isArray(orphanCollections)\r\n              ? orphanCollections.map(collections.collectionToString)\r\n              : [collections.collectionToString(orphanCollections)]),\r\n          edgeDefinitions: edgeDefinitions.map(coerceEdgeDefinition),\r\n          isSmart,\r\n          name: this._name,\r\n          options: {\r\n            ...opts,\r\n            satellites: satellites?.map(collections.collectionToString),\r\n          },\r\n        },\r\n        search: { waitForSync },\r\n      },\r\n      (res) => res.parsedBody.graph\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Deletes the graph from the database.\r\n   *\r\n   * @param dropCollections - If set to `true`, the collections associated with\r\n   * the graph will also be deleted.\r\n   *\r\n   * @example\r\n   * ```js\r\n   * const db = new Database();\r\n   * const graph = db.graph(\"some-graph\");\r\n   * await graph.drop();\r\n   * // the graph \"some-graph\" no longer exists\r\n   * ```\r\n   */\r\n  drop(dropCollections: boolean = false): Promise<boolean> {\r\n    return this._db.request(\r\n      {\r\n        method: \"DELETE\",\r\n        pathname: `/_api/gharial/${encodeURIComponent(this._name)}`,\r\n        search: { dropCollections },\r\n      },\r\n      (res) => res.parsedBody.removed\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Returns a {@link GraphVertexCollection} instance for the given collection\r\n   * name representing the collection in this graph.\r\n   *\r\n   * @param T - Type to use for document data. Defaults to `any`.\r\n   * @param collection - Name of the vertex collection.\r\n   */\r\n  vertexCollection<T extends Record<string, any> = any>(\r\n    collection: string | collections.ArangoCollection\r\n  ): GraphVertexCollection<T> {\r\n    return new GraphVertexCollection<T>(\r\n      this._db,\r\n      collections.collectionToString(collection),\r\n      this\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Fetches all vertex collections of this graph from the database and returns\r\n   * an array of their names.\r\n   *\r\n   * See also {@link Graph#vertexCollections}.\r\n   *\r\n   * @example\r\n   * ```js\r\n   * const db = new Database();\r\n   * const graph = db.graph(\"some-graph\");\r\n   * const info = await graph.create([\r\n   *   {\r\n   *     collection: \"edges\",\r\n   *     from: [\"start-vertices\"],\r\n   *     to: [\"end-vertices\"],\r\n   *   },\r\n   * ]);\r\n   * const vertexCollectionNames = await graph.listVertexCollections();\r\n   * // [\"start-vertices\", \"end-vertices\"]\r\n   * ```\r\n   */\r\n  listVertexCollections(): Promise<string[]> {\r\n    return this._db.request(\r\n      { pathname: `/_api/gharial/${encodeURIComponent(this._name)}/vertex` },\r\n      (res) => res.parsedBody.collections\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Fetches all vertex collections of this graph from the database and returns\r\n   * an array of {@link GraphVertexCollection} instances.\r\n   *\r\n   * See also {@link Graph#listVertexCollections}.\r\n   *\r\n   * @example\r\n   * ```js\r\n   * const db = new Database();\r\n   * const graph = db.graph(\"some-graph\");\r\n   * const info = await graph.create([\r\n   *   {\r\n   *     collection: \"edges\",\r\n   *     from: [\"start-vertices\"],\r\n   *     to: [\"end-vertices\"],\r\n   *   },\r\n   * ]);\r\n   * const vertexCollections = await graph.vertexCollections();\r\n   * for (const vertexCollection of vertexCollections) {\r\n   *   console.log(vertexCollection.name);\r\n   *   // \"start-vertices\"\r\n   *   // \"end-vertices\"\r\n   * }\r\n   * ```\r\n   */\r\n  async vertexCollections(): Promise<GraphVertexCollection[]> {\r\n    const names = await this.listVertexCollections();\r\n    return names.map((name) => new GraphVertexCollection(this._db, name, this));\r\n  }\r\n\r\n  /**\r\n   * Adds the given collection to this graph as a vertex collection.\r\n   *\r\n   * @param collection - Collection to add to the graph.\r\n   *\r\n   * @example\r\n   * ```js\r\n   * const db = new Database();\r\n   * const graph = db.graph(\"some-graph\");\r\n   * await graph.addVertexCollection(\"more-vertices\");\r\n   * // The collection \"more-vertices\" has been added to the graph\r\n   * const extra = db.collection(\"extra-vertices\");\r\n   * await graph.addVertexCollection(extra);\r\n   * // The collection \"extra-vertices\" has been added to the graph\r\n   * ```\r\n   */\r\n  addVertexCollection(\r\n    collection: string | collections.ArangoCollection,\r\n    options: AddVertexCollectionOptions = {}\r\n  ): Promise<GraphDescription> {\r\n    const { satellites, ...opts } = options;\r\n    return this._db.request(\r\n      {\r\n        method: \"POST\",\r\n        pathname: `/_api/gharial/${encodeURIComponent(this._name)}/vertex`,\r\n        body: {\r\n          collection: collections.collectionToString(collection),\r\n          options: {\r\n            ...opts,\r\n            satellites: satellites?.map(collections.collectionToString),\r\n          },\r\n        },\r\n      },\r\n      (res) => res.parsedBody.graph\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Removes the given collection from this graph as a vertex collection.\r\n   *\r\n   * @param collection - Collection to remove from the graph.\r\n   * @param dropCollection - If set to `true`, the collection will also be\r\n   * deleted from the database.\r\n   *\r\n   * @example\r\n   * ```js\r\n   * const db = new Database();\r\n   * const graph = db.graph(\"some-graph\");\r\n   * const info = await graph.create([\r\n   *   {\r\n   *     collection: \"edges\",\r\n   *     from: [\"start-vertices\"],\r\n   *     to: [\"end-vertices\"],\r\n   *   },\r\n   * ]);\r\n   * await graph.removeVertexCollection(\"start-vertices\");\r\n   * // The collection \"start-vertices\" is no longer part of the graph.\r\n   * ```\r\n   */\r\n  removeVertexCollection(\r\n    collection: string | collections.ArangoCollection,\r\n    dropCollection: boolean = false\r\n  ): Promise<GraphDescription> {\r\n    return this._db.request(\r\n      {\r\n        method: \"DELETE\",\r\n        pathname: `/_api/gharial/${encodeURIComponent(\r\n          this._name\r\n        )}/vertex/${encodeURIComponent(collections.collectionToString(collection))}`,\r\n        search: {\r\n          dropCollection,\r\n        },\r\n      },\r\n      (res) => res.parsedBody.graph\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Returns a {@link GraphEdgeCollection} instance for the given collection\r\n   * name representing the collection in this graph.\r\n   *\r\n   * @param T - Type to use for document data. Defaults to `any`.\r\n   * @param collection - Name of the edge collection.\r\n   *\r\n   * @example\r\n   * ```js\r\n   * const db = new Database();\r\n   * const graph = db.graph(\"some-graph\");\r\n   * const info = await graph.create([\r\n   *   {\r\n   *     collection: \"edges\",\r\n   *     from: [\"start-vertices\"],\r\n   *     to: [\"end-vertices\"],\r\n   *   },\r\n   * ]);\r\n   * const graphEdgeCollection = graph.edgeCollection(\"edges\");\r\n   * // Access the underlying EdgeCollection API:\r\n   * const edgeCollection = graphEdgeCollection.collection;\r\n   * ```\r\n   */\r\n  edgeCollection<T extends Record<string, any> = any>(\r\n    collection: string | collections.ArangoCollection\r\n  ): GraphEdgeCollection<T> {\r\n    return new GraphEdgeCollection<T>(\r\n      this._db,\r\n      collections.collectionToString(collection),\r\n      this\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Fetches all edge collections of this graph from the database and returns\r\n   * an array of their names.\r\n   *\r\n   * See also {@link Graph#edgeCollections}.\r\n   *\r\n   * @example\r\n   * ```js\r\n   * const db = new Database();\r\n   * const graph = db.graph(\"some-graph\");\r\n   * const info = await graph.create([\r\n   *   {\r\n   *     collection: \"edges\",\r\n   *     from: [\"start-vertices\"],\r\n   *     to: [\"end-vertices\"],\r\n   *   },\r\n   * ]);\r\n   * const edgeCollectionNames = await graph.listEdgeCollections();\r\n   * // [\"edges\"]\r\n   * ```\r\n   */\r\n  listEdgeCollections(): Promise<string[]> {\r\n    return this._db.request(\r\n      { pathname: `/_api/gharial/${encodeURIComponent(this._name)}/edge` },\r\n      (res) => res.parsedBody.collections\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Fetches all edge collections of this graph from the database and returns\r\n   * an array of {@link GraphEdgeCollection} instances.\r\n   *\r\n   * See also {@link Graph#listEdgeCollections}.\r\n   *\r\n   * @example\r\n   * ```js\r\n   * const db = new Database();\r\n   * const graph = db.graph(\"some-graph\");\r\n   * const info = await graph.create([\r\n   *   {\r\n   *     collection: \"edges\",\r\n   *     from: [\"start-vertices\"],\r\n   *     to: [\"end-vertices\"],\r\n   *   },\r\n   * ]);\r\n   * const graphEdgeCollections = await graph.edgeCollections();\r\n   * for (const collection of graphEdgeCollection) {\r\n   *   console.log(collection.name);\r\n   *   // \"edges\"\r\n   * }\r\n   * ```\r\n   */\r\n  async edgeCollections(): Promise<GraphEdgeCollection[]> {\r\n    const names = await this.listEdgeCollections();\r\n    return names.map((name) => new GraphEdgeCollection(this._db, name, this));\r\n  }\r\n\r\n  /**\r\n   * Adds an edge definition to this graph.\r\n   *\r\n   * @param edgeDefinition - Definition of a relation in this graph.\r\n   *\r\n   * @example\r\n   * ```js\r\n   * const db = new Database();\r\n   * const graph = db.graph(\"some-graph\");\r\n   * await graph.addEdgeDefinition({\r\n   *   collection: \"edges\",\r\n   *   from: [\"start-vertices\"],\r\n   *   to: [\"end-vertices\"],\r\n   * });\r\n   * // The edge definition has been added to the graph\r\n   * ```\r\n   */\r\n  addEdgeDefinition(\r\n    edgeDefinition: EdgeDefinitionOptions,\r\n    options: AddEdgeDefinitionOptions = {}\r\n  ): Promise<GraphDescription> {\r\n    const { satellites, ...opts } = options;\r\n    return this._db.request(\r\n      {\r\n        method: \"POST\",\r\n        pathname: `/_api/gharial/${encodeURIComponent(this._name)}/edge`,\r\n        body: {\r\n          ...coerceEdgeDefinition(edgeDefinition),\r\n          options: {\r\n            ...opts,\r\n            satellites: satellites?.map(collections.collectionToString),\r\n          },\r\n        },\r\n      },\r\n      (res) => res.parsedBody.graph\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Replaces an edge definition in this graph. The existing edge definition\r\n   * for the given edge collection will be overwritten.\r\n   *\r\n   * @param edgeDefinition - Definition of a relation in this graph.\r\n   *\r\n   * @example\r\n   * ```js\r\n   * const db = new Database();\r\n   * const graph = db.graph(\"some-graph\");\r\n   * const info = await graph.create([\r\n   *   {\r\n   *     collection: \"edges\",\r\n   *     from: [\"start-vertices\"],\r\n   *     to: [\"end-vertices\"],\r\n   *   },\r\n   * ]);\r\n   * await graph.replaceEdgeDefinition({\r\n   *   collection: \"edges\",\r\n   *   from: [\"start-vertices\"],\r\n   *   to: [\"other-vertices\"],\r\n   * });\r\n   * // The edge definition for \"edges\" has been replaced\r\n   * ```\r\n   */\r\n  replaceEdgeDefinition(\r\n    edgeDefinition: EdgeDefinitionOptions,\r\n    options?: ReplaceEdgeDefinitionOptions\r\n  ): Promise<GraphDescription>;\r\n  /**\r\n   * Replaces an edge definition in this graph. The existing edge definition\r\n   * for the given edge collection will be overwritten.\r\n   *\r\n   * @param collection - Edge collection for which to replace the definition.\r\n   * @param edgeDefinition - Definition of a relation in this graph.\r\n   *\r\n   * @example\r\n   * ```js\r\n   * const db = new Database();\r\n   * const graph = db.graph(\"some-graph\");\r\n   * const info = await graph.create([\r\n   *   {\r\n   *     collection: \"edges\",\r\n   *     from: [\"start-vertices\"],\r\n   *     to: [\"end-vertices\"],\r\n   *   },\r\n   * ]);\r\n   * await graph.replaceEdgeDefinition(\"edges\", {\r\n   *   collection: \"edges\",\r\n   *   from: [\"start-vertices\"],\r\n   *   to: [\"other-vertices\"],\r\n   * });\r\n   * // The edge definition for \"edges\" has been replaced\r\n   * ```\r\n   */\r\n  replaceEdgeDefinition(\r\n    collection: string | collections.ArangoCollection,\r\n    edgeDefinition: EdgeDefinitionOptions,\r\n    options?: ReplaceEdgeDefinitionOptions\r\n  ): Promise<GraphDescription>;\r\n  replaceEdgeDefinition(\r\n    collectionOrEdgeDefinitionOptions:\r\n      | string\r\n      | collections.ArangoCollection\r\n      | EdgeDefinitionOptions,\r\n    edgeDefinitionOrOptions?:\r\n      | EdgeDefinitionOptions\r\n      | ReplaceEdgeDefinitionOptions,\r\n    options: ReplaceEdgeDefinitionOptions = {}\r\n  ) {\r\n    let collection = collectionOrEdgeDefinitionOptions as\r\n      | string\r\n      | collections.ArangoCollection;\r\n    let edgeDefinition = edgeDefinitionOrOptions as EdgeDefinitionOptions;\r\n    if (\r\n      edgeDefinitionOrOptions &&\r\n      !edgeDefinitionOrOptions.hasOwnProperty(\"collection\")\r\n    ) {\r\n      options = edgeDefinitionOrOptions as ReplaceEdgeDefinitionOptions;\r\n      edgeDefinitionOrOptions = undefined;\r\n    }\r\n    if (!edgeDefinitionOrOptions) {\r\n      edgeDefinition =\r\n        collectionOrEdgeDefinitionOptions as EdgeDefinitionOptions;\r\n      collection = edgeDefinition.collection;\r\n    }\r\n    const { satellites, ...opts } = options;\r\n    return this._db.request(\r\n      {\r\n        method: \"PUT\",\r\n        pathname: `/_api/gharial/${encodeURIComponent(\r\n          this._name\r\n        )}/edge/${encodeURIComponent(collections.collectionToString(collection))}`,\r\n        body: {\r\n          ...coerceEdgeDefinition(edgeDefinition),\r\n          options: {\r\n            ...opts,\r\n            satellites: satellites?.map(collections.collectionToString),\r\n          },\r\n        },\r\n      },\r\n      (res) => res.parsedBody.graph\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Removes the edge definition for the given edge collection from this graph.\r\n   *\r\n   * @param collection - Edge collection for which to remove the definition.\r\n   * @param dropCollection - If set to `true`, the collection will also be\r\n   * deleted from the database.\r\n   *\r\n   * @example\r\n   * ```js\r\n   * const db = new Database();\r\n   * const graph = db.graph(\"some-graph\");\r\n   * const info = await graph.create([\r\n   *   {\r\n   *     collection: \"edges\",\r\n   *     from: [\"start-vertices\"],\r\n   *     to: [\"end-vertices\"],\r\n   *   },\r\n   * ]);\r\n   * await graph.removeEdgeDefinition(\"edges\");\r\n   * // The edge definition for \"edges\" has been replaced\r\n   * ```\r\n   */\r\n  removeEdgeDefinition(\r\n    collection: string | collections.ArangoCollection,\r\n    dropCollection: boolean = false\r\n  ): Promise<GraphDescription> {\r\n    return this._db.request(\r\n      {\r\n        method: \"DELETE\",\r\n        pathname: `/_api/gharial/${encodeURIComponent(\r\n          this._name\r\n        )}/edge/${encodeURIComponent(collections.collectionToString(collection))}`,\r\n        search: {\r\n          dropCollection,\r\n        },\r\n      },\r\n      (res) => res.parsedBody.graph\r\n    );\r\n  }\r\n}\r\n//#endregion\r\n"]}