{"version":3,"file":"indexes.js","sourceRoot":"","sources":["../../src/indexes.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;GAeG;AAi7BH;;GAEG;AACH,MAAM,UAAU,YAAY,CAC1B,QAAuB,EACvB,cAAsB;IAEtB,IAAI,OAAO,QAAQ,KAAK,QAAQ,EAAE,CAAC;QACjC,IAAI,QAAQ,CAAC,EAAE,EAAE,CAAC;YAChB,OAAO,YAAY,CAAC,QAAQ,CAAC,EAAE,EAAE,cAAc,CAAC,CAAC;QACnD,CAAC;QACD,MAAM,IAAI,KAAK,CACb,iEAAiE,CAClE,CAAC;IACJ,CAAC;IACD,IAAI,QAAQ,CAAC,QAAQ,CAAC,GAAG,CAAC,EAAE,CAAC;QAC3B,MAAM,CAAC,IAAI,CAAC,GAAG,QAAQ,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;QACnC,IAAI,IAAI,KAAK,cAAc,EAAE,CAAC;YAC5B,MAAM,IAAI,KAAK,CACb,aAAa,QAAQ,qCAAqC,cAAc,GAAG,CAC5E,CAAC;QACJ,CAAC;QACD,OAAO,QAAQ,CAAC;IAClB,CAAC;IACD,OAAO,GAAG,cAAc,IAAI,MAAM,CAAC,QAAQ,CAAC,EAAE,CAAC;AACjD,CAAC;AACD,YAAY","sourcesContent":["/**\r\n * ```ts\r\n * import type {\r\n *   FulltextIndex,\r\n *   GeoIndex,\r\n *   MdiIndex,\r\n *   PersistentIndex,\r\n *   PrimaryIndex,\r\n *   TtlIndex,\r\n * } from \"arangojs/indexes\";\r\n * ```\r\n *\r\n * The \"indexes\" module provides index-related types for TypeScript.\r\n *\r\n * @packageDocumentation\r\n */\r\n\r\nimport * as analyzers from \"./analyzers.js\";\r\nimport * as views from \"./views.js\";\r\n\r\n//#region Shared types\r\n/**\r\n * Type of an index.\r\n */\r\nexport type IndexType = IndexDescription[\"type\"];\r\n\r\n/**\r\n * Type of an internal index.\r\n */\r\nexport type InternalIndexType = InternalIndexDescription[\"type\"];\r\n//#endregion\r\n\r\n//#region Index operation options\r\n/**\r\n * Options for listing indexes.\r\n */\r\nexport type ListIndexesOptions = {\r\n  /**\r\n   * If set to `true`, includes additional information about each index.\r\n   *\r\n   * Default: `false`\r\n   */\r\n  withStats?: boolean;\r\n  /**\r\n   * If set to `true`, includes internal indexes as well as indexes that are\r\n   * not yet fully built but are in the building phase.\r\n   *\r\n   * You should cast the resulting indexes to `HiddenIndex` to ensure internal\r\n   * and incomplete indexes are accurately represented.\r\n   *\r\n   * Default: `false`.\r\n   */\r\n  withHidden?: boolean;\r\n};\r\n\r\n/**\r\n * Options for creating an index.\r\n */\r\nexport type EnsureIndexOptions =\r\n  | EnsurePersistentIndexOptions\r\n  | EnsureGeoIndexOptions\r\n  | EnsureTtlIndexOptions\r\n  | EnsureMdiIndexOptions\r\n  | EnsureMdiPrefixedIndexOptions\r\n  | EnsureInvertedIndexOptions\r\n  | EnsureVectorIndexOptions;\r\n\r\n/**\r\n * Shared attributes of all index creation options.\r\n */\r\nexport type EnsureIndexOptionsType<\r\n  Type extends IndexType,\r\n  Fields extends any[],\r\n  Extra extends {} = {},\r\n> = {\r\n  /**\r\n   * A unique name for this index.\r\n   */\r\n  name?: string;\r\n  /**\r\n   * Type of this index.\r\n   */\r\n  type: Type;\r\n  /**\r\n   * An array of attribute paths.\r\n   */\r\n  fields: Fields;\r\n  /**\r\n   * If set to `true`, the index will be created in the background to reduce\r\n   * the write-lock duration for the collection during index creation.\r\n   *\r\n   * Default: `false`\r\n   */\r\n  inBackground?: boolean;\r\n} & Extra;\r\n\r\n/**\r\n * Options for creating a persistent index.\r\n */\r\nexport type EnsurePersistentIndexOptions = EnsureIndexOptionsType<\r\n  \"persistent\",\r\n  string[],\r\n  {\r\n    /**\r\n     * If set to `true`, a unique index will be created.\r\n     *\r\n     * Default: `false`\r\n     */\r\n    unique?: boolean;\r\n    /**\r\n     * If set to `true`, the index will omit documents that do not contain at\r\n     * least one of the attribute paths in `fields` and these documents will be\r\n     * ignored for uniqueness checks.\r\n     *\r\n     * Default: `false`\r\n     */\r\n    sparse?: boolean;\r\n    /**\r\n     * If set to `false`, inserting duplicate index values from the same\r\n     * document will lead to a unique constraint error if this is a unique index.\r\n     *\r\n     * Default: `true`\r\n     */\r\n    deduplicate?: boolean;\r\n    /**\r\n     * If set to `false`, index selectivity estimates will be disabled for this\r\n     * index.\r\n     *\r\n     * Default: `true`\r\n     */\r\n    estimates?: boolean;\r\n    /**\r\n     * If set to `true`, an in-memory hash cache will be put in front of the\r\n     * persistent index.\r\n     *\r\n     * Default: `false`\r\n     */\r\n    cacheEnabled?: boolean;\r\n    /**\r\n     * An array of attribute paths that will be stored in the index but can not\r\n     * be used for index lookups or sorting but can avoid full document lookups.\r\n     */\r\n    storedValues?: string[];\r\n  }\r\n>;\r\n\r\n/**\r\n * Options for creating a geo index.\r\n */\r\nexport type EnsureGeoIndexOptions = EnsureIndexOptionsType<\r\n  \"geo\",\r\n  [string, string] | [string],\r\n  {\r\n    /**\r\n     * If set to `true`, `fields` must be an array containing a single attribute\r\n     * path and the attribute value must be an array with two values, the first\r\n     * of which will be interpreted as the longitude and the second of which\r\n     * will be interpreted as the latitude of the document.\r\n     *\r\n     * If set to `false`, `fields` can be either an array containing two\r\n     * attribute paths, the first of which will be interpreted as the latitude\r\n     * and the second as the longitude, or a single attribute path for an array\r\n     * containing two values, the first of which will be interpreted as the\r\n     * latitude, the second as the longitude.\r\n     *\r\n     * Default: `false`\r\n     */\r\n    geoJson?: boolean;\r\n    /**\r\n     * If set to `true`, the index will use pre-3.10 rules for parsing\r\n     * GeoJSON polygons. This option is always implicitly `true` when using\r\n     * ArangoDB 3.9 or lower.\r\n     */\r\n    legacyPolygons?: boolean;\r\n  }\r\n>;\r\n\r\n/**\r\n * Options for creating a TTL index.\r\n */\r\nexport type EnsureTtlIndexOptions = EnsureIndexOptionsType<\r\n  \"ttl\",\r\n  [string],\r\n  {\r\n    /**\r\n     * Duration in seconds after the attribute value at which the document will\r\n     * be considered as expired.\r\n     */\r\n    expireAfter: number;\r\n  }\r\n>;\r\n\r\n/**\r\n * Options for creating a MDI index.\r\n */\r\nexport type EnsureMdiIndexOptions = EnsureIndexOptionsType<\r\n  \"mdi\",\r\n  string[],\r\n  {\r\n    /**\r\n     * Data type of the dimension attributes.\r\n     */\r\n    fieldValueTypes: \"double\";\r\n    /**\r\n     * If set to `true`, a unique index will be created.\r\n     *\r\n     * Default: `false`\r\n     */\r\n    unique?: boolean;\r\n    /**\r\n     * If set to `true`, the index will omit documents that do not contain at\r\n     * least one of the attribute paths in `fields` and these documents will be\r\n     * ignored for uniqueness checks.\r\n     *\r\n     * Default: `false`\r\n     */\r\n    sparse?: boolean;\r\n    /**\r\n     * If set to `false`, index selectivity estimates will be disabled for this\r\n     * index.\r\n     *\r\n     * Default: `true`\r\n     */\r\n    estimates?: boolean;\r\n    /**\r\n     * An array of attribute paths that will be stored in the index but can not\r\n     * be used for index lookups or sorting but can avoid full document lookups.\r\n     */\r\n    storedValues?: string[];\r\n  }\r\n>;\r\n\r\n/**\r\n * Options for creating a prefixed MDI index.\r\n */\r\nexport type EnsureMdiPrefixedIndexOptions = EnsureIndexOptionsType<\r\n  \"mdi-prefixed\",\r\n  string[],\r\n  {\r\n    /**\r\n     * An array of attribute names used as a search prefix.\r\n     */\r\n    prefixFields: string[];\r\n    /**\r\n     * Data type of the dimension attributes.\r\n     */\r\n    fieldValueTypes: \"double\";\r\n    /**\r\n     * If set to `true`, a unique index will be created.\r\n     *\r\n     * Default: `false`\r\n     */\r\n    unique?: boolean;\r\n    /**\r\n     * If set to `true`, the index will omit documents that do not contain at\r\n     * least one of the attribute paths in `fields` and these documents will be\r\n     * ignored for uniqueness checks.\r\n     *\r\n     * Default: `false`\r\n     */\r\n    sparse?: boolean;\r\n    /**\r\n     * If set to `false`, index selectivity estimates will be disabled for this\r\n     * index.\r\n     *\r\n     * Default: `true`\r\n     */\r\n    estimates?: boolean;\r\n    /**\r\n     * An array of attribute paths that will be stored in the index but can not\r\n     * be used for index lookups or sorting but can avoid full document lookups.\r\n     */\r\n    storedValues?: string[];\r\n  }\r\n>;\r\n\r\n/**\r\n * Options for creating an inverted index.\r\n */\r\nexport type EnsureInvertedIndexOptions = EnsureIndexOptionsType<\r\n  \"inverted\",\r\n  (string | InvertedIndexFieldOptions)[],\r\n  {\r\n    /**\r\n     * If set to `true` array values will by default be indexed using the same\r\n     * behavior as ArangoSearch Views. This option only applies when using the\r\n     * index in a SearchAlias View.\r\n     *\r\n     * Default: `false`\r\n     */\r\n    searchField?: boolean;\r\n    /**\r\n     * An array of attribute paths that will be stored in the index but can not\r\n     * be used for index lookups or sorting but can avoid full document lookups.\r\n     */\r\n    storedValues?: InvertedIndexStoredValueOptions[];\r\n    /**\r\n     * Primary sort order to optimize AQL queries using a matching sort order.\r\n     */\r\n    primarySort?: InvertedIndexPrimarySortOptions;\r\n    /**\r\n     * (Enterprise Edition only.) If set to `true`, then the primary key column\r\n     * will always be cached in memory.\r\n     *\r\n     * Default: `false`\r\n     */\r\n    primaryKeyCache?: boolean;\r\n    /**\r\n     * Name of the default Analyzer to apply to the values of indexed fields.\r\n     *\r\n     * Default: `\"identity\"`\r\n     */\r\n    analyzer?: string;\r\n    /**\r\n     * List of Analyzer features to enable for the default Analyzer.\r\n     *\r\n     * Defaults to the Analyzer's features.\r\n     */\r\n    features?: analyzers.AnalyzerFeature[];\r\n    /**\r\n     * If set to `true`, all document attributes are indexed, excluding any\r\n     * sub-attributes configured in the `fields` array. The `analyzer` and\r\n     * `features` properties apply to the sub-attributes. This option only\r\n     * applies when using the index in a SearchAlias View.\r\n     *\r\n     * Default: `false`\r\n     */\r\n    includeAllFields?: boolean;\r\n    /**\r\n     * If set to `true`, the position of values in array values are tracked and\r\n     * need to be specified in queries. Otherwise all values in an array are\r\n     * treated as equivalent. This option only applies when using the index in a\r\n     * SearchAlias View.\r\n     *\r\n     * Default: `false`\r\n     */\r\n    trackListPositions?: boolean;\r\n    /**\r\n     * The number of threads to use for indexing the fields.\r\n     *\r\n     * Default: `2`\r\n     */\r\n    parallelism?: number;\r\n    /**\r\n     * Wait at least this many commits between removing unused files in the\r\n     * ArangoSearch data directory.\r\n     *\r\n     * Default: `2`\r\n     */\r\n    cleanupIntervalStep?: number;\r\n    /**\r\n     * Wait at least this many milliseconds between committing View data store\r\n     * changes and making documents visible to queries.\r\n     *\r\n     * Default: `1000`\r\n     */\r\n    commitIntervalMsec?: number;\r\n    /**\r\n     * Wait at least this many milliseconds between applying\r\n     * `consolidationPolicy` to consolidate View data store and possibly release\r\n     * space on the filesystem.\r\n     *\r\n     * Default: `1000`\r\n     */\r\n    consolidationIntervalMsec?: number;\r\n    /**\r\n     * The consolidation policy to apply for selecting which segments should be\r\n     * merged.\r\n     *\r\n     * Default: `{ type: \"tier\" }`\r\n     */\r\n    consolidationPolicy?: views.TierConsolidationPolicy;\r\n    /**\r\n     * Maximum number of writers (segments) cached in the pool.\r\n     *\r\n     * Default: `64`\r\n     */\r\n    writeBufferIdle?: number;\r\n    /**\r\n     * Maximum number of concurrent active writers (segments) that perform a\r\n     * transaction.\r\n     *\r\n     * Default: `0` (disabled)\r\n     */\r\n    writeBufferActive?: number;\r\n    /**\r\n     * Maximum memory byte size per writer (segment) before a writer (segment)\r\n     * flush is triggered.\r\n     *\r\n     * Default: `33554432` (32 MiB)\r\n     */\r\n    writeBufferSizeMax?: number;\r\n    /**\r\n     * (Enterprise Edition only.) If set to `true`, then field normalization\r\n     * values will always be cached in memory.\r\n     *\r\n     * Default: `false`\r\n     */\r\n    cache?: boolean;\r\n    /**\r\n     * An array of strings defining sort expressions to optimize.\r\n     */\r\n    optimizeTopK?: string[];\r\n  }\r\n>;\r\n\r\n/**\r\n * Options for an attribute path in an inverted index.\r\n */\r\nexport type InvertedIndexFieldOptions = {\r\n  /**\r\n   * An attribute path.\r\n   */\r\n  name: string;\r\n  /**\r\n   * Name of the Analyzer to apply to the values of this field.\r\n   *\r\n   * Defaults to the `analyzer` specified on the index itself.\r\n   */\r\n  analyzer?: string;\r\n  /**\r\n   * List of Analyzer features to enable for this field's Analyzer.\r\n   *\r\n   * Defaults to the features of the Analyzer.\r\n   */\r\n  features?: analyzers.AnalyzerFeature[];\r\n  /**\r\n   * If set to `true`, all document attributes are indexed, excluding any\r\n   * sub-attributes configured in the `fields` array. The `analyzer` and\r\n   * `features` properties apply to the sub-attributes. This option only\r\n   * applies when using the index in a SearchAlias View.\r\n   *\r\n   * Defaults to the value of `includeAllFields` specified on the index itself.\r\n   */\r\n  includeAllFields?: boolean;\r\n  /**\r\n   * If set to `true` array values will be indexed using the same behavior as\r\n   * ArangoSearch Views. This option only applies when using the index in a\r\n   * SearchAlias View.\r\n   *\r\n   * Defaults to the value of `searchField` specified on the index itself.\r\n   */\r\n  searchField?: boolean;\r\n  /**\r\n   * If set to `true`, the position of values in array values are tracked and\r\n   * need to be specified in queries. Otherwise all values in an array are\r\n   * treated as equivalent. This option only applies when using the index in a\r\n   * SearchAlias View.\r\n   *\r\n   * Defaults to the value of `trackListPositions` specified on the index\r\n   * itself.\r\n   */\r\n  trackListPositions?: boolean;\r\n  /**\r\n   * (Enterprise Edition only.) Sub-objects to index to allow querying for\r\n   * co-occurring values.\r\n   */\r\n  nested?: (string | InvertedIndexNestedFieldOptions)[];\r\n  /**\r\n   * (Enterprise Edition only.) If set to `true`, then field normalization\r\n   * values will always be cached in memory.\r\n   *\r\n   * Defaults to the value of `cache` specified on the index itself.\r\n   */\r\n  cache?: boolean;\r\n};\r\n\r\n/**\r\n * Options for defining a primary sort field on an inverted index.\r\n */\r\nexport type InvertedIndexPrimarySortOptions = {\r\n  /**\r\n   * An array of fields to sort the index by.\r\n   */\r\n  fields: InvertedIndexPrimarySortFieldOptions[];\r\n  /**\r\n   * How the primary sort data should be compressed.\r\n   *\r\n   * Default: `\"lz4\"`\r\n   */\r\n  compression?: views.Compression;\r\n  /**\r\n   * (Enterprise Edition only.) If set to `true`, then primary sort columns\r\n   * will always be cached in memory.\r\n   *\r\n   * Default: `false`\r\n   */\r\n  cache?: boolean;\r\n};\r\n\r\n/**\r\n * Options for defining a primary sort field on an inverted index.\r\n */\r\nexport type InvertedIndexPrimarySortFieldOptions = {\r\n  /**\r\n   * The attribute path to sort by.\r\n   */\r\n  field: string;\r\n  /**\r\n   * The sorting direction.\r\n   */\r\n  direction: views.Direction;\r\n};\r\n\r\n/**\r\n * (Enterprise Edition only.) Options for a nested field in an inverted index.\r\n */\r\nexport type InvertedIndexNestedFieldOptions = {\r\n  /**\r\n   * An attribute path.\r\n   */\r\n  name: string;\r\n  /**\r\n   * Name of the Analyzer to apply to the values of this field.\r\n   *\r\n   * Defaults to the `analyzer` specified on the parent options or on the index\r\n   * itself.\r\n   */\r\n  analyzer?: string;\r\n  /**\r\n   * List of Analyzer features to enable for this field's Analyzer.\r\n   *\r\n   * Defaults to the features of the Analyzer.\r\n   */\r\n  features?: analyzers.AnalyzerFeature[];\r\n  /**\r\n   * If set to `true` array values will be indexed using the same behavior as\r\n   * ArangoSearch Views. This option only applies when using the index in a\r\n   * SearchAlias View.\r\n   *\r\n   * Defaults to the value of `searchField` specified on the index itself.\r\n   */\r\n  searchField?: boolean;\r\n  /**\r\n   * Sub-objects to index to allow querying for co-occurring values.\r\n   */\r\n  nested?: (string | InvertedIndexNestedFieldOptions)[];\r\n};\r\n\r\n/**\r\n * Options for defining a stored value on an inverted index.\r\n */\r\nexport type InvertedIndexStoredValueOptions = {\r\n  /**\r\n   * The attribute paths to store.\r\n   */\r\n  fields: string[];\r\n  /**\r\n   * How the attribute values should be compressed.\r\n   *\r\n   * Default: `\"lz4\"`\r\n   */\r\n  compression?: views.Compression;\r\n  /**\r\n   * (Enterprise Edition only.) If set to `true`, then stored values will\r\n   * always be cached in memory.\r\n   *\r\n   * Default: `false`\r\n   */\r\n  cache?: boolean;\r\n};\r\n\r\n/**\r\n * Options for creating a vector index.\r\n */\r\nexport type EnsureVectorIndexOptions = EnsureIndexOptionsType<\r\n  \"vector\",\r\n  [string],\r\n  {\r\n    /**\r\n     * The number of threads to use for indexing. Default is 2.\r\n     */\r\n    parallelism?: number;\r\n\r\n    /**\r\n     * Vector index parameters, following Faiss configuration.\r\n     */\r\n    params: {\r\n      /**\r\n       * Whether to use cosine or l2 (Euclidean) distance.\r\n       */\r\n      metric: \"cosine\" | \"l2\";\r\n\r\n      /**\r\n       * Vector dimension. Must match the length of vectors in documents.\r\n       */\r\n      dimension: number;\r\n\r\n      /**\r\n       * Number of Voronoi cells (centroids) for IVF. Affects accuracy and index build time.\r\n       */\r\n      nLists: number;\r\n\r\n      /**\r\n       * How many neighboring centroids to probe by default. Higher = slower, better recall.\r\n       */\r\n      defaultNProbe?: number;\r\n\r\n      /**\r\n       * Training iterations for index build. Default is 25.\r\n       */\r\n      trainingIterations?: number;\r\n\r\n      /**\r\n       * Advanced Faiss index factory string.\r\n       * If not specified, defaults to IVF<nLists>,Flat.\r\n       */\r\n      factory?: string;\r\n    };\r\n  }\r\n>;\r\n//#endregion\r\n\r\n//#region IndexDescription\r\n/**\r\n * An object representing an index.\r\n */\r\nexport type IndexDescription =\r\n  | FulltextIndexDescription\r\n  | GeoIndexDescription\r\n  | PersistentIndexDescription\r\n  | TtlIndexDescription\r\n  | MdiIndexDescription\r\n  | MdiPrefixedIndexDescription\r\n  | InvertedIndexDescription\r\n  | SystemIndexDescription\r\n  | VectorIndexDescription;\r\n\r\n/**\r\n * An object representing a system index.\r\n */\r\nexport type SystemIndexDescription =\r\n  | PrimaryIndexDescription\r\n  | EdgeIndexDescription;\r\n\r\n/**\r\n * Shared attributes of all index types.\r\n */\r\nexport type IndexDescriptionType<\r\n  Type extends string,\r\n  Fields extends any[],\r\n  Extra extends {} = {},\r\n> = {\r\n  /**\r\n   * A unique name for this index.\r\n   */\r\n  name: string;\r\n  /**\r\n   * A unique identifier for this index.\r\n   */\r\n  id: string;\r\n  /**\r\n   * Type of this index.\r\n   */\r\n  type: Type;\r\n  /**\r\n   * An array of attribute paths.\r\n   */\r\n  fields: Fields;\r\n  /**\r\n   * Whether documents not containing at least one of the attribute paths\r\n   * are omitted by this index.\r\n   */\r\n  sparse: boolean;\r\n  /**\r\n   * Whether this index enforces uniqueness for values of its attribute paths.\r\n   */\r\n  unique: boolean;\r\n  /**\r\n   * Additional stats about this index.\r\n   */\r\n  figures?: Record<string, any>;\r\n} & Extra;\r\n\r\n/**\r\n * An object representing a persistent index.\r\n */\r\nexport type PersistentIndexDescription = IndexDescriptionType<\r\n  \"persistent\",\r\n  string[],\r\n  {\r\n    cacheEnabled: boolean;\r\n    deduplicate: boolean;\r\n    estimates: boolean;\r\n    selectivityEstimate: number;\r\n    storedValues?: string[];\r\n  }\r\n>;\r\n\r\n/**\r\n * An object representing a primary index.\r\n */\r\nexport type PrimaryIndexDescription = IndexDescriptionType<\r\n  \"primary\",\r\n  [\"_key\"],\r\n  {\r\n    selectivityEstimate: number;\r\n  }\r\n>;\r\n\r\n/**\r\n * An object representing an edge index.\r\n */\r\nexport type EdgeIndexDescription = IndexDescriptionType<\r\n  \"edge\",\r\n  [\"_from\", \"_to\"],\r\n  {\r\n    selectivityEstimate: number;\r\n  }\r\n>;\r\n\r\n/**\r\n * An object representing a fulltext index.\r\n *\r\n * @deprecated The `fulltext` index type was deprecated in ArangoDB 3.10. Use\r\n * {@link views.View}s instead.\r\n */\r\nexport type FulltextIndexDescription = IndexDescriptionType<\r\n  \"fulltext\",\r\n  [string],\r\n  {\r\n    minLength: number;\r\n  }\r\n>;\r\n\r\n/**\r\n * An object representing an edge index.\r\n */\r\nexport type EdgeIndex = IndexDescriptionType<\r\n  \"edge\",\r\n  [\"_from\", \"_to\"],\r\n  {\r\n    selectivityEstimate: number;\r\n  }\r\n>;\r\n\r\n/**\r\n * An object representing a fulltext index.\r\n *\r\n * @deprecated The `fulltext` index type was deprecated in ArangoDB 3.10. Use\r\n * {@link views.View} instead.\r\n */\r\nexport type FulltextIndex = IndexDescriptionType<\r\n  \"fulltext\",\r\n  [string],\r\n  {\r\n    minLength: number;\r\n  }\r\n>;\r\n\r\n/**\r\n * An object representing a geo index.\r\n */\r\nexport type GeoIndexDescription = IndexDescriptionType<\r\n  \"geo\",\r\n  [string] | [string, string],\r\n  {\r\n    geoJson: boolean;\r\n    legacyPolygons: boolean;\r\n    bestIndexedLevel: number;\r\n    worstIndexedLevel: number;\r\n    maxNumCoverCells: number;\r\n  }\r\n>;\r\n\r\n/**\r\n * An object representing a TTL index.\r\n */\r\nexport type TtlIndexDescription = IndexDescriptionType<\r\n  \"ttl\",\r\n  [string],\r\n  {\r\n    expireAfter: number;\r\n    estimates: boolean;\r\n    selectivityEstimate: number;\r\n  }\r\n>;\r\n\r\n/**\r\n * An object representing a MDI index.\r\n */\r\nexport type MdiIndexDescription = IndexDescriptionType<\r\n  \"mdi\",\r\n  string[],\r\n  {\r\n    fieldValueTypes: \"double\";\r\n    estimates: boolean;\r\n    selectivityEstimate: number;\r\n    storedValues?: string[];\r\n  }\r\n>;\r\n\r\n/**\r\n * An object representing a prefixed MDI index.\r\n */\r\nexport type MdiPrefixedIndexDescription = IndexDescriptionType<\r\n  \"mdi-prefixed\",\r\n  string[],\r\n  {\r\n    fieldValueTypes: \"double\";\r\n    estimates: boolean;\r\n    selectivityEstimate: number;\r\n    storedValues?: string[];\r\n    prefixFields: string[];\r\n  }\r\n>;\r\n\r\n/**\r\n * An object representing an inverted index.\r\n */\r\nexport type InvertedIndexDescription = IndexDescriptionType<\r\n  \"inverted\",\r\n  InvertedIndexField[],\r\n  {\r\n    searchField: boolean;\r\n    cache?: boolean;\r\n    storedValues: {\r\n      fields: string[];\r\n      compression: views.Compression;\r\n      cache?: boolean;\r\n    }[];\r\n    primarySort: {\r\n      fields: {\r\n        field: string;\r\n        direction: views.Direction;\r\n      }[];\r\n      compression: views.Compression;\r\n      cache?: boolean;\r\n    };\r\n    primaryKeyCache?: boolean;\r\n    analyzer: string;\r\n    features: analyzers.AnalyzerFeature[];\r\n    includeAllFields: boolean;\r\n    trackListPositions: boolean;\r\n    parallelism: number;\r\n    cleanupIntervalStep: number;\r\n    commitIntervalMsec: number;\r\n    consolidationIntervalMsec: number;\r\n    consolidationPolicy: Required<views.TierConsolidationPolicy>;\r\n    writeBufferIdle: number;\r\n    writeBufferActive: number;\r\n    writeBufferSizeMax: number;\r\n    optimizeTopK: string[];\r\n  }\r\n>;\r\n\r\n/**\r\n * An object representing a field in an inverted index.\r\n */\r\nexport type InvertedIndexField = {\r\n  name: string;\r\n  analyzer?: string;\r\n  features?: analyzers.AnalyzerFeature[];\r\n  includeAllFields?: boolean;\r\n  searchField?: boolean;\r\n  trackListPositions?: boolean;\r\n  nested?: InvertedIndexNestedField[];\r\n  cache?: boolean;\r\n};\r\n\r\n/**\r\n * (Enterprise Edition only.) An object representing a nested field in an\r\n * inverted index.\r\n */\r\nexport type InvertedIndexNestedField = {\r\n  name: string;\r\n  analyzer?: string;\r\n  features?: analyzers.AnalyzerFeature[];\r\n  searchField?: boolean;\r\n  nested?: InvertedIndexNestedField[];\r\n};\r\n\r\n/**\r\n * An object representing an arangosearch index.\r\n */\r\nexport type ArangosearchIndexDescription = {\r\n  id: string;\r\n  type: \"arangosearch\";\r\n  view: string;\r\n  figures?: Record<string, any>;\r\n  analyzers: string[];\r\n  fields: Record<string, Record<string, any>>;\r\n  includeAllFields: boolean;\r\n  trackListPositions: boolean;\r\n  storeValues: \"none\" | \"id\";\r\n};\r\n\r\n/**\r\n * An object representing an internal index.\r\n */\r\nexport type InternalIndexDescription = ArangosearchIndexDescription;\r\n\r\n/**\r\n * An object representing a potentially hidden index.\r\n *\r\n * This type can be used to cast the result of `collection.indexes` to better\r\n * reflect the actual data returned by the server when using the `withHidden`\r\n * option:\r\n *\r\n * ```ts\r\n * const indexes = await collection.indexes<HiddenIndex>({\r\n *   withHidden: true\r\n * }));\r\n * // indexes may include internal indexes and indexes with a \"progress\"\r\n * // property\r\n * ```\r\n */\r\nexport type HiddenIndexDescription = (\r\n  | IndexDescription\r\n  | InternalIndexDescription\r\n) & {\r\n  /**\r\n   * Progress of this index if it is still being created.\r\n   */\r\n  progress?: number;\r\n};\r\n\r\n/**\r\n * An object representing a vector index.\r\n */\r\nexport type VectorIndexDescription = IndexDescriptionType<\r\n  \"vector\",\r\n  [string],\r\n  {\r\n    parallelism: number;\r\n    inBackground: boolean;\r\n    params: {\r\n      metric: \"cosine\" | \"l2\";\r\n      dimension: number;\r\n      nLists: number;\r\n      defaultNProbe?: number;\r\n      trainingIterations?: number;\r\n      factory?: string;\r\n    };\r\n  }\r\n>;\r\n//#endregion\r\n\r\n//#region Index selectors\r\n/**\r\n * Index name, id or object with a `name` or `id` property.\r\n */\r\nexport type IndexSelector = ObjectWithIndexId | ObjectWithName | string;\r\n\r\n/**\r\n * An object with an `id` property.\r\n */\r\nexport type ObjectWithIndexId = {\r\n  [key: string]: any;\r\n  id: string;\r\n};\r\n\r\n/**\r\n * An object with a `name` property.\r\n */\r\nexport type ObjectWithName = {\r\n  [key: string]: any;\r\n  name: string;\r\n};\r\n\r\n/**\r\n * @internal\r\n */\r\nexport function _indexHandle(\r\n  selector: IndexSelector,\r\n  collectionName: string\r\n): string {\r\n  if (typeof selector !== \"string\") {\r\n    if (selector.id) {\r\n      return _indexHandle(selector.id, collectionName);\r\n    }\r\n    throw new Error(\r\n      \"Index handle must be a string or an object with an id attribute\"\r\n    );\r\n  }\r\n  if (selector.includes(\"/\")) {\r\n    const [head] = selector.split(\"/\");\r\n    if (head !== collectionName) {\r\n      throw new Error(\r\n        `Index ID \"${selector}\" does not match collection name \"${collectionName}\"`\r\n      );\r\n    }\r\n    return selector;\r\n  }\r\n  return `${collectionName}/${String(selector)}`;\r\n}\r\n//#endregion\r\n"]}