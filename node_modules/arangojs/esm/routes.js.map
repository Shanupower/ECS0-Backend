{"version":3,"file":"routes.js","sourceRoot":"","sources":["../../src/routes.ts"],"names":[],"mappings":"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","sourcesContent":["/**\r\n * ```ts\r\n * import type { Route } from \"arangojs/routes\";\r\n * ```\r\n *\r\n * The \"routes\" module provides route related types and interfaces for\r\n * TypeScript.\r\n *\r\n * @packageDocumentation\r\n */\r\nimport * as connections from \"./connection.js\";\r\nimport * as databases from \"./databases.js\";\r\nimport * as util from \"./lib/util.js\";\r\n\r\n/**\r\n * Represents an arbitrary route relative to an ArangoDB database.\r\n */\r\nexport class Route {\r\n  protected _db: databases.Database;\r\n  protected _pathname: string;\r\n  protected _headers: Headers;\r\n\r\n  /**\r\n   * @internal\r\n   */\r\n  constructor(\r\n    db: databases.Database,\r\n    pathname: string = \"\",\r\n    headers: Headers | Record<string, string> = {},\r\n  ) {\r\n    if (!pathname) pathname = \"\";\r\n    else if (pathname.charAt(0) !== \"/\") pathname = `/${pathname}`;\r\n    this._db = db;\r\n    this._pathname = pathname;\r\n    this._headers = headers instanceof Headers ? headers : new Headers(headers);\r\n  }\r\n\r\n  /**\r\n   * Database this route belongs to.\r\n   */\r\n  get database() {\r\n    return this._db;\r\n  }\r\n\r\n  /**\r\n   * Path of this route.\r\n   */\r\n  get pathname() {\r\n    return this._pathname;\r\n  }\r\n\r\n  /**\r\n   * Headers of this route.\r\n   */\r\n  get headers() {\r\n    return this._headers;\r\n  }\r\n\r\n  /**\r\n   * Creates a new route relative to this route that inherits any of its default\r\n   * HTTP headers.\r\n   *\r\n   * @param pathname - Path relative to this route.\r\n   * @param headers - Additional headers that will be sent with each request.\r\n   *\r\n   * @example\r\n   * ```js\r\n   * const db = new Database();\r\n   * const foxx = db.route(\"/my-foxx-service\");\r\n   * const users = foxx.route(\"/users\");\r\n   * ```\r\n   */\r\n  route(pathname: string, headers?: Headers | Record<string, string>) {\r\n    return new Route(\r\n      this._db,\r\n      util.joinPath(this._pathname, pathname),\r\n      util.mergeHeaders(this._headers, headers),\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Performs an arbitrary HTTP request relative to this route and returns the\r\n   * server response.\r\n   *\r\n   * @param options - Options for performing the request.\r\n   *\r\n   * @example\r\n   * ```js\r\n   * const db = new Database();\r\n   * const foxx = db.route(\"/my-foxx-service\");\r\n   * const res = await foxx.request({\r\n   *   method: \"POST\",\r\n   *   pathname: \"/users\",\r\n   *   body: {\r\n   *     username: \"admin\",\r\n   *     password: \"hunter2\"\r\n   *   }\r\n   * });\r\n   * ```\r\n   */\r\n  request(options: connections.RequestOptions = {}) {\r\n    const { method = \"GET\", pathname, headers, ...opts } = options;\r\n    return this._db.request(\r\n      {\r\n        ...opts,\r\n        method: method.toUpperCase(),\r\n        pathname: util.joinPath(this._pathname, pathname),\r\n        headers: util.mergeHeaders(this._headers, headers),\r\n      },\r\n      false,\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Performs a DELETE request against the given path relative to this route\r\n   * and returns the server response.\r\n   *\r\n   * @param pathname - Path relative to this route.\r\n   * @param search - Query string parameters for this request.\r\n   * @param headers - Additional headers to send with this request.\r\n   *\r\n   * @example\r\n   * ```js\r\n   * const db = new Database();\r\n   * const foxx = db.route(\"/my-foxx-service\");\r\n   * const res = await foxx.delete(\"/users/admin\");\r\n   * ```\r\n   */\r\n  delete(\r\n    pathname: string,\r\n    search?: URLSearchParams | Record<string, any>,\r\n    headers?: Headers | Record<string, string>,\r\n  ): Promise<connections.ProcessedResponse>;\r\n  /**\r\n   * Performs a DELETE request against the given path relative to this route\r\n   * and returns the server response.\r\n   *\r\n   * @param search - Query string parameters for this request.\r\n   * @param headers - Additional headers to send with this request.\r\n   *\r\n   * @example\r\n   * ```js\r\n   * const db = new Database();\r\n   * const foxx = db.route(\"/my-foxx-service\");\r\n   * const user = foxx.route(\"/users/admin\");\r\n   * const res = await user.delete();\r\n   * ```\r\n   */\r\n  delete(\r\n    search?: URLSearchParams | Record<string, any>,\r\n    headers?: Headers | Record<string, string>,\r\n  ): Promise<connections.ProcessedResponse>;\r\n  delete(...args: any[]): Promise<connections.ProcessedResponse> {\r\n    const pathname = typeof args[0] === \"string\" ? args.shift() : undefined;\r\n    const [search, headers] = args;\r\n    return this.request({ method: \"DELETE\", pathname, search, headers });\r\n  }\r\n\r\n  /**\r\n   * Performs a GET request against the given path relative to this route\r\n   * and returns the server response.\r\n   *\r\n   * @param pathname - Path relative to this route.\r\n   * @param search - Query string parameters for this request.\r\n   * @param headers - Additional headers to send with this request.\r\n   *\r\n   * @example\r\n   * ```js\r\n   * const db = new Database();\r\n   * const foxx = db.route(\"/my-foxx-service\");\r\n   * const res = await foxx.get(\"/users\", { offset: 10, limit: 5 });\r\n   * ```\r\n   */\r\n  get(\r\n    pathname: string,\r\n    search?: URLSearchParams | Record<string, any>,\r\n    headers?: Headers | Record<string, string>,\r\n  ): Promise<connections.ProcessedResponse>;\r\n  /**\r\n   * Performs a GET request against the given path relative to this route\r\n   * and returns the server response.\r\n   *\r\n   * @param search - Query string parameters for this request.\r\n   * @param headers - Additional headers to send with this request.\r\n   *\r\n   * @example\r\n   * ```js\r\n   * const db = new Database();\r\n   * const foxx = db.route(\"/my-foxx-service\");\r\n   * const users = foxx.route(\"/users\");\r\n   * const res = await users.get({ offset: 10, limit: 5 });\r\n   * ```\r\n   */\r\n  get(\r\n    search?: URLSearchParams | Record<string, any>,\r\n    headers?: Headers | Record<string, string>,\r\n  ): Promise<connections.ProcessedResponse>;\r\n  get(...args: any[]): Promise<connections.ProcessedResponse> {\r\n    const pathname = typeof args[0] === \"string\" ? args.shift() : undefined;\r\n    const [search, headers] = args;\r\n    return this.request({ method: \"GET\", pathname, search, headers });\r\n  }\r\n\r\n  /**\r\n   * Performs a HEAD request against the given path relative to this route\r\n   * and returns the server response.\r\n   *\r\n   * @param pathname - Path relative to this route.\r\n   * @param search - Query string parameters for this request.\r\n   * @param headers - Additional headers to send with this request.\r\n   *\r\n   * @example\r\n   * ```js\r\n   * const db = new Database();\r\n   * const foxx = db.route(\"/my-foxx-service\");\r\n   * const res = await foxx.head(\"/users\", { offset: 10, limit: 5 });\r\n   * ```\r\n   */\r\n  head(\r\n    pathname: string,\r\n    search?: URLSearchParams | Record<string, any>,\r\n    headers?: Headers | Record<string, string>,\r\n  ): Promise<connections.ProcessedResponse>;\r\n  /**\r\n   * Performs a HEAD request against the given path relative to this route\r\n   * and returns the server response.\r\n   *\r\n   * @param search - Query string parameters for this request.\r\n   * @param headers - Additional headers to send with this request.\r\n   *\r\n   * @example\r\n   * ```js\r\n   * const db = new Database();\r\n   * const foxx = db.route(\"/my-foxx-service\");\r\n   * const users = foxx.route(\"/users\");\r\n   * const res = await users.head({ offset: 10, limit: 5 });\r\n   * ```\r\n   */\r\n  head(\r\n    search?: URLSearchParams | Record<string, any>,\r\n    headers?: Headers | Record<string, string>,\r\n  ): Promise<connections.ProcessedResponse>;\r\n  head(...args: any[]): Promise<connections.ProcessedResponse> {\r\n    const pathname = typeof args[0] === \"string\" ? args.shift() : undefined;\r\n    const [search, headers] = args;\r\n    return this.request({ method: \"HEAD\", pathname, search, headers });\r\n  }\r\n\r\n  /**\r\n   * Performs a PATCH request against the given path relative to this route\r\n   * and returns the server response.\r\n   *\r\n   * @param pathname - Path relative to this route.\r\n   * @param body - Body of the request object.\r\n   * @param search - Query string parameters for this request.\r\n   * @param headers - Additional headers to send with this request.\r\n   *\r\n   * @example\r\n   * ```js\r\n   * const db = new Database();\r\n   * const foxx = db.route(\"/my-foxx-service\");\r\n   * const res = await foxx.patch(\"/users/admin\", { password: \"admin\" });\r\n   * ```\r\n   */\r\n  patch(\r\n    pathname: string,\r\n    body?: any,\r\n    search?: URLSearchParams | Record<string, any>,\r\n    headers?: Headers | Record<string, string>,\r\n  ): Promise<connections.ProcessedResponse>;\r\n  /**\r\n   * Performs a PATCH request against the given path relative to this route\r\n   * and returns the server response.\r\n   *\r\n   * **Note**: `body` must not be a `string`.\r\n   *\r\n   * @param body - Body of the request object. Must not be a string.\r\n   * @param search - Query string parameters for this request.\r\n   * @param headers - Additional headers to send with this request.\r\n   *\r\n   * @example\r\n   * ```js\r\n   * const db = new Database();\r\n   * const foxx = db.route(\"/my-foxx-service\");\r\n   * const user = foxx.route(\"/users/admin\")\r\n   * const res = await user.patch({ password: \"admin\" });\r\n   * ```\r\n   */\r\n  patch(\r\n    body?: any,\r\n    search?: URLSearchParams | Record<string, any>,\r\n    headers?: Headers | Record<string, string>,\r\n  ): Promise<connections.ProcessedResponse>;\r\n  patch(...args: any[]): Promise<connections.ProcessedResponse> {\r\n    const pathname = typeof args[0] === \"string\" ? args.shift() : undefined;\r\n    const [body, search, headers] = args;\r\n    return this.request({ method: \"PATCH\", pathname, body, search, headers });\r\n  }\r\n\r\n  /**\r\n   * Performs a POST request against the given path relative to this route\r\n   * and returns the server response.\r\n   *\r\n   * @param pathname - Path relative to this route.\r\n   * @param body - Body of the request object.\r\n   * @param search - Query string parameters for this request.\r\n   * @param headers - Additional headers to send with this request.\r\n   *\r\n   * @example\r\n   * ```js\r\n   * const db = new Database();\r\n   * const foxx = db.route(\"/my-foxx-service\");\r\n   * const res = await foxx.post(\"/users\", {\r\n   *   username: \"admin\",\r\n   *   password: \"hunter2\"\r\n   * });\r\n   * ```\r\n   */\r\n  post(\r\n    pathname: string,\r\n    body?: any,\r\n    search?: URLSearchParams | Record<string, any>,\r\n    headers?: Headers | Record<string, string>,\r\n  ): Promise<connections.ProcessedResponse>;\r\n  /**\r\n   * Performs a POST request against the given path relative to this route\r\n   * and returns the server response.\r\n   *\r\n   * **Note**: `body` must not be a `string`.\r\n   *\r\n   * @param body - Body of the request object. Must not be a string.\r\n   * @param search - Query string parameters for this request.\r\n   * @param headers - Additional headers to send with this request.\r\n   *\r\n   * @example\r\n   * ```js\r\n   * const db = new Database();\r\n   * const foxx = db.route(\"/my-foxx-service\");\r\n   * const users = foxx.route(\"/users\");\r\n   * const res = await users.post({\r\n   *   username: \"admin\",\r\n   *   password: \"hunter2\"\r\n   * });\r\n   * ```\r\n   */\r\n  post(\r\n    body?: any,\r\n    search?: URLSearchParams | Record<string, any>,\r\n    headers?: Headers | Record<string, string>,\r\n  ): Promise<connections.ProcessedResponse>;\r\n  post(...args: any[]): Promise<connections.ProcessedResponse> {\r\n    const pathname = typeof args[0] === \"string\" ? args.shift() : undefined;\r\n    const [body, search, headers] = args;\r\n    return this.request({ method: \"POST\", pathname, body, search, headers });\r\n  }\r\n\r\n  /**\r\n   * Performs a PUT request against the given path relative to this route\r\n   * and returns the server response.\r\n   *\r\n   * @param pathname - Path relative to this route.\r\n   * @param body - Body of the request object.\r\n   * @param search - Query string parameters for this request.\r\n   * @param headers - Additional headers to send with this request.\r\n   *\r\n   * @example\r\n   * ```js\r\n   * const db = new Database();\r\n   * const foxx = db.route(\"/my-foxx-service\");\r\n   * const res = await foxx.put(\"/users/admin/password\", { password: \"admin\" });\r\n   * ```\r\n   */\r\n  put(\r\n    pathname: string,\r\n    body?: any,\r\n    search?: URLSearchParams | Record<string, any>,\r\n    headers?: Headers | Record<string, string>,\r\n  ): Promise<connections.ProcessedResponse>;\r\n  /**\r\n   * Performs a PUT request against the given path relative to this route\r\n   * and returns the server response.\r\n   *\r\n   * **Note**: `body` must not be a `string`.\r\n   *\r\n   * @param body - Body of the request object. Must not be a string.\r\n   * @param search - Query string parameters for this request.\r\n   * @param headers - Additional headers to send with this request.\r\n   *\r\n   * @example\r\n   * ```js\r\n   * const db = new Database();\r\n   * const foxx = db.route(\"/my-foxx-service\");\r\n   * const password = foxx.route(\"/users/admin/password\");\r\n   * const res = await password.put({ password: \"admin\" });\r\n   * ```\r\n   */\r\n  put(\r\n    body?: any,\r\n    search?: URLSearchParams | Record<string, any>,\r\n    headers?: Headers | Record<string, string>,\r\n  ): Promise<connections.ProcessedResponse>;\r\n  put(...args: any[]): Promise<connections.ProcessedResponse> {\r\n    const pathname = typeof args[0] === \"string\" ? args.shift() : undefined;\r\n    const [body, search, headers] = args;\r\n    return this.request({ method: \"PUT\", pathname, body, search, headers });\r\n  }\r\n}\r\n"]}