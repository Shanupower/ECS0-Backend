{"version":3,"file":"administration.js","sourceRoot":"","sources":["../../src/administration.ts"],"names":[],"mappings":"AAAA;;;;;;;;GAQG;;AAkaH,YAAY","sourcesContent":["/**\r\n * ```ts\r\n * import type { VersionInfo } from \"arangojs/administration\";\r\n * ```\r\n *\r\n * The \"administration\" module provides types for database administration.\r\n *\r\n * @packageDocumentation\r\n */\r\n\r\n//#region Administrative operation options\r\n/**\r\n * Options for compacting all databases on the server.\r\n */\r\nexport type CompactOptions = {\r\n  /**\r\n   * Whether compacted data should be moved to the minimum possible level.\r\n   *\r\n   * Default: `false`.\r\n   */\r\n  changeLevel?: boolean;\r\n  /**\r\n   * Whether to compact the bottom-most level of data.\r\n   *\r\n   * Default: `false`.\r\n   */\r\n  compactBottomMostLevel?: boolean;\r\n};\r\n//#endregion\r\n\r\n//#region Administrative operation results\r\n/**\r\n * Result of retrieving database version information.\r\n */\r\nexport type VersionInfo = {\r\n  /**\r\n   * Value identifying the server type, i.e. `\"arango\"`.\r\n   */\r\n  server: string;\r\n  /**\r\n   * ArangoDB license type or \"edition\".\r\n   */\r\n  license: \"community\" | \"enterprise\";\r\n  /**\r\n   * ArangoDB server version.\r\n   */\r\n  version: string;\r\n  /**\r\n   * Additional information about the ArangoDB server.\r\n   */\r\n  details?: { [key: string]: string };\r\n};\r\n\r\n/**\r\n * Information about the storage engine.\r\n */\r\nexport type EngineInfo = {\r\n  /**\r\n   * Endianness of the storage engine.\r\n   */\r\n  endianness?: \"little\" | \"big\";\r\n  /**\r\n   * Name of the storage engine.\r\n   */\r\n  name: string;\r\n  /**\r\n   * Features supported by the storage engine.\r\n   */\r\n  supports?: {\r\n    /**\r\n     * Index types supported by the storage engine.\r\n     */\r\n    indexes?: string[];\r\n    /**\r\n     * Aliases supported by the storage engine.\r\n     */\r\n    aliases?: {\r\n      /**\r\n       * Index type aliases supported by the storage engine.\r\n       */\r\n      indexes?: Record<string, string>;\r\n    };\r\n  };\r\n};\r\n\r\n/**\r\n * Performance and resource usage information about the storage engine.\r\n */\r\nexport type EngineStatsInfo = Record<\r\n  string,\r\n  string | number | Record<string, number | string>\r\n>;\r\n\r\n/**\r\n * Information about the server license.\r\n */\r\nexport type LicenseInfo = {\r\n  /**\r\n   * Properties of the license.\r\n   */\r\n  features: {\r\n    /**\r\n     * The timestamp of the expiration date of the license in seconds since the\r\n     * Unix epoch.\r\n     */\r\n    expires?: number;\r\n  };\r\n  /**\r\n   * The hash value of the license.\r\n   */\r\n  hash: string;\r\n  /**\r\n   * The encrypted license key in base 64 encoding, or `\"none\"` when running\r\n   * in the Community Edition.\r\n   */\r\n  license?: string;\r\n  /**\r\n   * The status of the installed license.\r\n   *\r\n   * - `\"good\"`: The license is valid for more than 2 weeks.\r\n   *\r\n   * - `\"expiring\"`: The license is valid for less than 2 weeks.\r\n   *\r\n   * - `\"expired\"`: The license has expired.\r\n   *\r\n   * - `\"read-only\"`: The license has been expired for more than 2 weeks.\r\n   */\r\n  status: \"good\" | \"expiring\" | \"expired\" | \"read-only\";\r\n  /**\r\n   * Whether the server is performing a database upgrade.\r\n   */\r\n  upgrading: boolean;\r\n  /**\r\n   * The license version number.\r\n   */\r\n  version: number;\r\n};\r\n\r\n/**\r\n * Information about the server status.\r\n */\r\nexport type ServerStatusInfo = {\r\n  /**\r\n   * (Cluster Coordinators and DB-Servers only.) The address of the server.\r\n   */\r\n  address?: string;\r\n  /**\r\n   * (Cluster Coordinators and DB-Servers only.) Information about the Agency.\r\n   */\r\n  agency?: {\r\n    /**\r\n     * Information about the communication with the Agency.\r\n     */\r\n    agencyComm: {\r\n      /**\r\n       * A list of possible Agency endpoints.\r\n       */\r\n      endpoints: string[];\r\n    };\r\n  };\r\n  /**\r\n   * (Cluster Agents only.) Information about the Agents.\r\n   */\r\n  agent?: {\r\n    /**\r\n     * The endpoint of the queried Agent.\r\n     */\r\n    endpoint: string;\r\n    /**\r\n     * Server ID of the queried Agent.\r\n     */\r\n    id: string;\r\n    /**\r\n     * Server ID of the leading Agent.\r\n     */\r\n    leaderId: string;\r\n    /**\r\n     * Whether the queried Agent is the leader.\r\n     */\r\n    leading: boolean;\r\n    /**\r\n     * The current term number.\r\n     */\r\n    term: number;\r\n  };\r\n  /**\r\n   * (Cluster Coordinators only.) Information about the Coordinators.\r\n   */\r\n  coordinator?: {\r\n    /**\r\n     * The server ID of the Coordinator that is the Foxx master.\r\n     */\r\n    foxxmaster: string[];\r\n    /**\r\n     * Whether the queried Coordinator is the Foxx master.\r\n     */\r\n    isFoxxmaster: boolean[];\r\n  };\r\n  /**\r\n   * Whether the Foxx API is enabled.\r\n   */\r\n  foxxApi: boolean;\r\n  /**\r\n   * A host identifier defined by the HOST or NODE_NAME environment variable,\r\n   * or a fallback value using a machine identifier or the cluster/Agency address.\r\n   */\r\n  host: string;\r\n  /**\r\n   * A hostname defined by the HOSTNAME environment variable.\r\n   */\r\n  hostname?: string;\r\n  /**\r\n   * ArangoDB Edition.\r\n   */\r\n  license: \"community\" | \"enterprise\";\r\n  /**\r\n   * Server operation mode.\r\n   *\r\n   * @deprecated Use `operationMode` instead\r\n   */\r\n  mode: \"server\" | \"console\";\r\n  /**\r\n   * Server operation mode.\r\n   */\r\n  operationMode: \"server\" | \"console\";\r\n  /**\r\n   * The process ID of arangod.\r\n   */\r\n  pid: number;\r\n  /**\r\n   * Server type.\r\n   */\r\n  server: \"arango\";\r\n  /**\r\n   * Information about the server status.\r\n   */\r\n  serverInfo: {\r\n    /**\r\n     * Whether the maintenance mode is enabled.\r\n     */\r\n    maintenance: boolean;\r\n    /**\r\n     * (Cluster only.) The persisted ID.\r\n     */\r\n    persistedId?: string;\r\n    /**\r\n     * Startup and recovery information.\r\n     */\r\n    progress: {\r\n      /**\r\n       * Internal name of the feature that is currently being prepared, started, stopped or unprepared.\r\n       */\r\n      feature: string;\r\n      /**\r\n       * Name of the lifecycle phase the instance is currently in.\r\n       */\r\n      phase: string;\r\n      /**\r\n       * Current recovery sequence number value.\r\n       */\r\n      recoveryTick: number;\r\n    };\r\n    /**\r\n     * Whether writes are disabled.\r\n     */\r\n    readOnly: boolean;\r\n    /**\r\n     * (Cluster only.) The reboot ID. Changes on every restart.\r\n     */\r\n    rebootId?: number;\r\n    /**\r\n     * Either \"SINGLE\", \"COORDINATOR\", \"PRIMARY\" (DB-Server), or \"AGENT\"\r\n     */\r\n    role: \"SINGLE\" | \"COORDINATOR\" | \"PRIMARY\" | \"AGENT\";\r\n    /**\r\n     * (Cluster Coordinators and DB-Servers only.) The server ID.\r\n     */\r\n    serverId?: string;\r\n    /**\r\n     * (Cluster Coordinators and DB-Servers only.) Either \"STARTUP\", \"SERVING\",\r\n     * or \"SHUTDOWN\".\r\n     */\r\n    state?: \"STARTUP\" | \"SERVING\" | \"SHUTDOWN\";\r\n    /**\r\n     * The server version string.\r\n     */\r\n    version: string;\r\n    /**\r\n     * Whether writes are enabled.\r\n     *\r\n     * @deprecated Use `readOnly` instead.\r\n     */\r\n    writeOpsEnabled: boolean;\r\n  };\r\n};\r\n\r\n/**\r\n * Server availability.\r\n *\r\n * - `\"default\"`: The server is operational.\r\n *\r\n * - `\"readonly\"`: The server is in read-only mode.\r\n *\r\n * - `false`: The server is not available.\r\n */\r\nexport type ServerAvailability = \"default\" | \"readonly\" | false;\r\n\r\n/**\r\n * Single server deployment information for support purposes.\r\n */\r\nexport type SingleServerSupportInfo = {\r\n  /**\r\n   * ISO 8601 datetime string of when the information was requested.\r\n   */\r\n  date: string;\r\n  /**\r\n   * Information about the deployment.\r\n   */\r\n  deployment: {\r\n    /**\r\n     * Deployment mode:\r\n     *\r\n     * - `\"single\"`: A single server deployment.\r\n     *\r\n     * - `\"cluster\"`: A cluster deployment.\r\n     */\r\n    type: \"single\";\r\n  };\r\n};\r\n\r\n/**\r\n * Cluster deployment information for support purposes.\r\n */\r\nexport type ClusterSupportInfo = {\r\n  /**\r\n   * ISO 8601 datetime string of when the information was requested.\r\n   */\r\n  date: string;\r\n  /**\r\n   * Information about the deployment.\r\n   */\r\n  deployment: {\r\n    /**\r\n     * Deployment mode:\r\n     *\r\n     * - `\"single\"`: A single server deployment.\r\n     *\r\n     * - `\"cluster\"`: A cluster deployment.\r\n     */\r\n    type: \"cluster\";\r\n    /**\r\n     * Information about the servers in the cluster.\r\n     */\r\n    servers: Record<string, Record<string, any>>;\r\n    /**\r\n     * Number of agents in the cluster.\r\n     */\r\n    agents: number;\r\n    /**\r\n     * Number of coordinators in the cluster.\r\n     */\r\n    coordinators: number;\r\n    /**\r\n     * Number of DB-Servers in the cluster.\r\n     */\r\n    dbServers: number;\r\n    /**\r\n     * Information about the shards in the cluster.\r\n     */\r\n    shards: {\r\n      /**\r\n       * Number of collections in the cluster.\r\n       */\r\n      collections: number;\r\n      /**\r\n       * Number of shards in the cluster.\r\n       */\r\n      shards: number;\r\n      /**\r\n       * Number of leaders in the cluster.\r\n       */\r\n      leaders: number;\r\n      /**\r\n       * Number of real leaders in the cluster.\r\n       */\r\n      realLeaders: number;\r\n      /**\r\n       * Number of followers in the cluster.\r\n       */\r\n      followers: number;\r\n      /**\r\n       * Number of servers in the cluster.\r\n       */\r\n      servers: number;\r\n    };\r\n  };\r\n  /**\r\n   * (Cluster only.) Information about the ArangoDB instance as well as the\r\n   * host machine.\r\n   */\r\n  host: Record<string, any>;\r\n};\r\n//#endregion\r\n\r\n//#region Queue time metrics\r\n/**\r\n * An object providing methods for accessing queue time metrics of the most\r\n * recently received server responses if the server supports this feature.\r\n */\r\nexport interface QueueTimeMetrics {\r\n  /**\r\n   * Returns the queue time of the most recently received response in seconds.\r\n   */\r\n  getLatest(): number | undefined;\r\n  /**\r\n   * Returns a list of the most recently received queue time values as tuples\r\n   * of the timestamp of the response being processed in milliseconds and the\r\n   * queue time in seconds.\r\n   */\r\n  getValues(): [number, number][];\r\n  /**\r\n   * Returns the average queue time of the most recently received responses\r\n   * in seconds.\r\n   */\r\n  getAvg(): number;\r\n}\r\n//#endregion\r\n"]}